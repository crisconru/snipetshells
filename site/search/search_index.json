{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Contenido Estos son algunos minitutoriales-recordatorios r\u00e1pidos, para hacer algunas tareas con distintas tecnolog\u00edas. Code: Devops: Ansible Docker IDEs: Visual Studio code Python: Entornos virtuales PYTHONPATH Web: Frontend: HTML CSS JS Backend: Django Software: Linux: Fecha y Hora Ficheros Redes: Linux SSH iptables IPv6 Terminal: ZSH Hardware: Micropython Platformio","title":"Contenido"},{"location":"#contenido","text":"Estos son algunos minitutoriales-recordatorios r\u00e1pidos, para hacer algunas tareas con distintas tecnolog\u00edas. Code: Devops: Ansible Docker IDEs: Visual Studio code Python: Entornos virtuales PYTHONPATH Web: Frontend: HTML CSS JS Backend: Django Software: Linux: Fecha y Hora Ficheros Redes: Linux SSH iptables IPv6 Terminal: ZSH Hardware: Micropython Platformio","title":"Contenido"},{"location":"code/devops/ansible/ansible/","text":"Ansible TODO","title":"Ansible"},{"location":"code/devops/ansible/ansible/#ansible","text":"TODO","title":"Ansible"},{"location":"code/devops/docker/docker-aclaraciones/","text":"Aclaraciones Importante aclarar: Docker Host o solo Host -> Es la m\u00e1quina donde se van a ejecutar los contenedores. Docker Container o solo Contenedor -> Lo que entendemos por contenedor. Docker Image o solo Imagen -> Es el modelo sobre el que se basa el contenedor. Para que lo entendamos: Si un contenedor equivale a una VM (m\u00e1quina virtual). Una imagen equivale a una ISO (imagen del SO). Para cuando veamos comandos, hay que tener claro: <imagen> equivale al nombre de la imagen. <contenedor> equivale al id o nombre del contenedor, es indiferente.","title":"Aclaraciones"},{"location":"code/devops/docker/docker-aclaraciones/#aclaraciones","text":"Importante aclarar: Docker Host o solo Host -> Es la m\u00e1quina donde se van a ejecutar los contenedores. Docker Container o solo Contenedor -> Lo que entendemos por contenedor. Docker Image o solo Imagen -> Es el modelo sobre el que se basa el contenedor. Para que lo entendamos: Si un contenedor equivale a una VM (m\u00e1quina virtual). Una imagen equivale a una ISO (imagen del SO). Para cuando veamos comandos, hay que tener claro: <imagen> equivale al nombre de la imagen. <contenedor> equivale al id o nombre del contenedor, es indiferente.","title":"Aclaraciones"},{"location":"code/devops/docker/docker-comandos/","text":"Comandos de Docker Todos los comandos de Docker cuentan con ayuda. Para poder verla hacemos docker <comando> --help Por ejemplo, docker search --help nos sacar\u00e1 la ayuda del comando search . Para ver todos los comandos por la terminal podemos usar docker --help docker search - Buscar im\u00e1genes docker search [<opciones>] <imagen> Podemos buscar im\u00e1genes tanto desde la web, como desde la terminal con el comando docker search . Por ejemplo si quiero buscar una imagen de Ubuntu docker search ubuntu Y veremos la cantidad de im\u00e1genes disponibles de ubuntu que se han creado, oficiales o no, y cuantas estrellas / likes tienen. Si solo quisieramos ver por ejemplo las imagenes de ubuntu que sean de 14.04, har\u00edamos docker search ubuntu:14.04 docker pull - Descargar im\u00e1genes docker pull [<opciones>] <imagen>[:<tag>|@<digest>] Para poder descargar una imagen basta con poner docker pull <imagen> . Por ejemplo si queremos descargar la ubuntu oficial har\u00edamos docker pull ubuntu Pero si por ejemplo nos interesa m\u00e1s la ubuntu de pivotaldata, es tan sencillo como docker pull pivotaldata/ubuntu docker images - Im\u00e1genes en el sistema docker images [<opciones>] [<repositorio>[:<tag>]] Con este comando podemos ver todas las imagenes que se han descargado en el sistema. OJO , imag\u00e9n es distinto de contenedor, podemos tener varios contenedores de la misma imagen. docker images docker ps - Contenedores ejecut\u00e1ndose / ejecutados docker ps [<opciones>] Para poder ver los contenedores ejecut\u00e1ndose hacemos docker ps Si en cambio queremos ver los que se han ejecutado docker ps -a docker run - Lanzar contenedores docker run [<opciones>] <imagen> [<comando>] [<parametros>] Es el comando estrella y sirve para lanzar un contenedor. Se comenta con m\u00e1s detalle en la siguiente secci\u00f3n -> Lanzar contenedores docker start / restart - Arrancar un contenedor parado / pausado docker start [<opciones>] <contenedor> [<contenedor1> <contenedor2> ...] docker restart [<opciones>] <contenedor> [<contenedor1> <contenedor2> ...] Con docker ps -a podemos ver los contenedores que ya no est\u00e1n activos ( STATUS = Exited ). Si queremos volver a la lanzar uno docker start <id-contenedor> Tambi\u00e9n existe el comando docker restart para reiniciar un contenedor. docker attach - Entrar en un contenedor activo docker attach [<opciones>] <contenedor> Para poder entrar dentro de un contenedor que se est\u00e1 ejecutando y ver que se est\u00e1 ejecutando. docker exec - Ejecutar comandos en un contenedor activo docker exec [<opciones>] <contenedor> <comando> [<par\u00e1metros>] Si queremos que en un contenedor activo se ejecute alg\u00fan comando. Por ejemplo abrir una consola docker exec -it <contenedor> bash docker stop - Parar un contenedor docker stop [<opciones>] <contenedor> [<contenedor1> <contenedor2> ...] Para acabar con la ejecuci\u00f3n de un contenedor. docker rm / rmi - Borrar contenedor / imagen docker rm [<opciones>] <contenedor> [<contenedor1> <contenedor2> ...] docker rmi [<opciones>] <imagen> [<imagen1> <imagen2> ...] El primero sirve para borrar contenedores y el segundo para im\u00e1genes. Si quisieramos que un contenedor se borrase una vez se dejara de ejecutar docker run --rm <contenedor> docker history - Ver el historial de creacion de una imagen docker history [<opciones>] <imagen> Para poder ver todos los pasos que ha llevado a cabo hacer una imagen. Se recomienda usar la opci\u00f3n -H para poder leerlo mejor docker history -H <imagen> docker logs - Ver los logs (salidas) de un contenedor docker logs [<opciones>] <contenedor> docker stats - Ver consumo de recursos de un contenedor docker stats [<opciones>] <contenedor> [<contenedor1> <contenedor2> ...] docker cp - Copiar ficheros a / desde un contenedor al sistema local # Copiar del sistema al contenedor docker cp [<optiones>] <src-path> <contenedor>:<dest-path> # Copiar del contenedor al sistema docker cp [<optiones>] <contenedor>:<src-path> <dest-path> docker inspect - Obtener informaci\u00f3n de bajo nivel de un contenedor docker inspect [<opciones>] <contenedor> [<contenedor2> <contenedor3> ...] docker commit - Crear una imagen a partir de un contenedor (modificado) docker commit [<opciones>] contenedor [<repositorio>[:<tag>]] Esto se ve con m\u00e1s detalle en -> Crear im\u00e1genes Docker","title":"Comandos docker"},{"location":"code/devops/docker/docker-comandos/#comandos-de-docker","text":"Todos los comandos de Docker cuentan con ayuda. Para poder verla hacemos docker <comando> --help Por ejemplo, docker search --help nos sacar\u00e1 la ayuda del comando search . Para ver todos los comandos por la terminal podemos usar docker --help","title":"Comandos de Docker"},{"location":"code/devops/docker/docker-comandos/#docker-search-buscar-imagenes","text":"docker search [<opciones>] <imagen> Podemos buscar im\u00e1genes tanto desde la web, como desde la terminal con el comando docker search . Por ejemplo si quiero buscar una imagen de Ubuntu docker search ubuntu Y veremos la cantidad de im\u00e1genes disponibles de ubuntu que se han creado, oficiales o no, y cuantas estrellas / likes tienen. Si solo quisieramos ver por ejemplo las imagenes de ubuntu que sean de 14.04, har\u00edamos docker search ubuntu:14.04","title":"docker search - Buscar im\u00e1genes"},{"location":"code/devops/docker/docker-comandos/#docker-pull-descargar-imagenes","text":"docker pull [<opciones>] <imagen>[:<tag>|@<digest>] Para poder descargar una imagen basta con poner docker pull <imagen> . Por ejemplo si queremos descargar la ubuntu oficial har\u00edamos docker pull ubuntu Pero si por ejemplo nos interesa m\u00e1s la ubuntu de pivotaldata, es tan sencillo como docker pull pivotaldata/ubuntu","title":"docker pull - Descargar im\u00e1genes"},{"location":"code/devops/docker/docker-comandos/#docker-images-imagenes-en-el-sistema","text":"docker images [<opciones>] [<repositorio>[:<tag>]] Con este comando podemos ver todas las imagenes que se han descargado en el sistema. OJO , imag\u00e9n es distinto de contenedor, podemos tener varios contenedores de la misma imagen. docker images","title":"docker images - Im\u00e1genes en el sistema"},{"location":"code/devops/docker/docker-comandos/#docker-ps-contenedores-ejecutandose-ejecutados","text":"docker ps [<opciones>] Para poder ver los contenedores ejecut\u00e1ndose hacemos docker ps Si en cambio queremos ver los que se han ejecutado docker ps -a","title":"docker ps - Contenedores ejecut\u00e1ndose / ejecutados"},{"location":"code/devops/docker/docker-comandos/#docker-run-lanzar-contenedores","text":"docker run [<opciones>] <imagen> [<comando>] [<parametros>] Es el comando estrella y sirve para lanzar un contenedor. Se comenta con m\u00e1s detalle en la siguiente secci\u00f3n -> Lanzar contenedores","title":"docker run - Lanzar contenedores"},{"location":"code/devops/docker/docker-comandos/#docker-start-restart-arrancar-un-contenedor-parado-pausado","text":"docker start [<opciones>] <contenedor> [<contenedor1> <contenedor2> ...] docker restart [<opciones>] <contenedor> [<contenedor1> <contenedor2> ...] Con docker ps -a podemos ver los contenedores que ya no est\u00e1n activos ( STATUS = Exited ). Si queremos volver a la lanzar uno docker start <id-contenedor> Tambi\u00e9n existe el comando docker restart para reiniciar un contenedor.","title":"docker start / restart - Arrancar un contenedor parado / pausado"},{"location":"code/devops/docker/docker-comandos/#docker-attach-entrar-en-un-contenedor-activo","text":"docker attach [<opciones>] <contenedor> Para poder entrar dentro de un contenedor que se est\u00e1 ejecutando y ver que se est\u00e1 ejecutando.","title":"docker attach - Entrar en un contenedor activo"},{"location":"code/devops/docker/docker-comandos/#docker-exec-ejecutar-comandos-en-un-contenedor-activo","text":"docker exec [<opciones>] <contenedor> <comando> [<par\u00e1metros>] Si queremos que en un contenedor activo se ejecute alg\u00fan comando. Por ejemplo abrir una consola docker exec -it <contenedor> bash","title":"docker exec - Ejecutar comandos en un contenedor activo"},{"location":"code/devops/docker/docker-comandos/#docker-stop-parar-un-contenedor","text":"docker stop [<opciones>] <contenedor> [<contenedor1> <contenedor2> ...] Para acabar con la ejecuci\u00f3n de un contenedor.","title":"docker stop - Parar un contenedor"},{"location":"code/devops/docker/docker-comandos/#docker-rm-rmi-borrar-contenedor-imagen","text":"docker rm [<opciones>] <contenedor> [<contenedor1> <contenedor2> ...] docker rmi [<opciones>] <imagen> [<imagen1> <imagen2> ...] El primero sirve para borrar contenedores y el segundo para im\u00e1genes. Si quisieramos que un contenedor se borrase una vez se dejara de ejecutar docker run --rm <contenedor>","title":"docker rm / rmi - Borrar contenedor / imagen"},{"location":"code/devops/docker/docker-comandos/#docker-history-ver-el-historial-de-creacion-de-una-imagen","text":"docker history [<opciones>] <imagen> Para poder ver todos los pasos que ha llevado a cabo hacer una imagen. Se recomienda usar la opci\u00f3n -H para poder leerlo mejor docker history -H <imagen>","title":"docker history - Ver el historial de creacion de una imagen"},{"location":"code/devops/docker/docker-comandos/#docker-logs-ver-los-logs-salidas-de-un-contenedor","text":"docker logs [<opciones>] <contenedor>","title":"docker logs - Ver los logs (salidas) de un contenedor"},{"location":"code/devops/docker/docker-comandos/#docker-stats-ver-consumo-de-recursos-de-un-contenedor","text":"docker stats [<opciones>] <contenedor> [<contenedor1> <contenedor2> ...]","title":"docker stats - Ver consumo de recursos de un contenedor"},{"location":"code/devops/docker/docker-comandos/#docker-cp-copiar-ficheros-a-desde-un-contenedor-al-sistema-local","text":"# Copiar del sistema al contenedor docker cp [<optiones>] <src-path> <contenedor>:<dest-path> # Copiar del contenedor al sistema docker cp [<optiones>] <contenedor>:<src-path> <dest-path>","title":"docker cp - Copiar ficheros a / desde un contenedor al sistema local"},{"location":"code/devops/docker/docker-comandos/#docker-inspect-obtener-informacion-de-bajo-nivel-de-un-contenedor","text":"docker inspect [<opciones>] <contenedor> [<contenedor2> <contenedor3> ...]","title":"docker inspect - Obtener informaci\u00f3n de bajo nivel de un contenedor"},{"location":"code/devops/docker/docker-comandos/#docker-commit-crear-una-imagen-a-partir-de-un-contenedor-modificado","text":"docker commit [<opciones>] contenedor [<repositorio>[:<tag>]] Esto se ve con m\u00e1s detalle en -> Crear im\u00e1genes Docker","title":"docker commit - Crear una imagen a partir de un contenedor (modificado)"},{"location":"code/devops/docker/docker-contenedores/","text":"Arrancar contenedores TODO Ejemplo, limitar memoria a 500MB y solo usar hasta 2 cores docker run -m \"500mb\" --cpu-set-cpus 0-1 <imagen> Hello World Para hacer un Hola mundo en Docker, lo que se hace es ejecutar un contenedor de la imagen hello-world . Para ello podemos bajar la imagen con docker pull hello-world y luego ejecutarlo. O bien ejecutarlo directamente y ya docker se encarga de bajar la imagen si n est\u00e1 y ejecutarla. Para ello hacemos docker run hello-world Puertos Por defecto todos los contenedores tienen todos los puertos cerrados. En muchos casos tienen ciertos puertos para poder consumir un servicio y el propio contenedor te dice que puertos y que tr\u00e1fico soportan. La gracia aqu\u00ed est\u00e1 en que nosotros podemos asignarle cualquier puerto del Host a ese puerto del contenedor con la opci\u00f3n -p <puerto-host>:<puerto-contenedor> . En el ejemplo ejecuto un docker con un jenkins, y le as\u00edgno el puerto 80 de mi m\u00e1quina (que es el que usan los navegadores) al puerto 8080 del contenedor (que es por donde se despacha el jenkins). docker run -p 80:8080 jenkins Esto es un buena soluci\u00f3n en cuestiones de seguridad y de escalabilidad, ya que el contenedor tiene los puertos por defecto pero el host no. Lanzar contenedor con comando Para ver por ejemplo el filesystem del contenedor ubuntu hacemos docker run ubuntu ls . Contenedores interactivos Para que el contenedor ubuntu no se pare por ejemplo, podemos acceder con la opci\u00f3n interactive y con tty docker run -i -t ubuntu bash Ahora estamos dentro del container y podemos ejecutar comandos o lo que queramos. Asignarle un nombre al contenedor Para asignarle un nombre al contenedor para ser usado de manera m\u00e1s c\u00f3moda, hay que usar la opci\u00f3n --name . Este nombre se podr\u00e1 usar en sustituci\u00f3n del id del contenedor en muchos comandos, haciendo as\u00ed m\u00e1s f\u00e1cil su uso. docker run --name perico -it ubuntu Si queremos renombrar un contenedor debemos usar el comando docker rename . docker rename <nombre-actual-del-contenedor> <nuevo-nombre-del-contenedor> Salir del contenedor Salir del contenedor y apagarlo / matarlo: Para salir del contenedor podemos ejecutar el comando exit Usar la combinaci\u00f3n Ctrl+D . Salir del contenedor pero mantenerlo activo: Mantener todo el rato la tecla Ctrl Luego pulsar P Despu\u00e9s Q Es decir -> Ctrl+P , D Limitar recursos","title":"Lanzar contenedores"},{"location":"code/devops/docker/docker-contenedores/#arrancar-contenedores","text":"TODO Ejemplo, limitar memoria a 500MB y solo usar hasta 2 cores docker run -m \"500mb\" --cpu-set-cpus 0-1 <imagen>","title":"Arrancar contenedores"},{"location":"code/devops/docker/docker-contenedores/#hello-world","text":"Para hacer un Hola mundo en Docker, lo que se hace es ejecutar un contenedor de la imagen hello-world . Para ello podemos bajar la imagen con docker pull hello-world y luego ejecutarlo. O bien ejecutarlo directamente y ya docker se encarga de bajar la imagen si n est\u00e1 y ejecutarla. Para ello hacemos docker run hello-world","title":"Hello World"},{"location":"code/devops/docker/docker-contenedores/#puertos","text":"Por defecto todos los contenedores tienen todos los puertos cerrados. En muchos casos tienen ciertos puertos para poder consumir un servicio y el propio contenedor te dice que puertos y que tr\u00e1fico soportan. La gracia aqu\u00ed est\u00e1 en que nosotros podemos asignarle cualquier puerto del Host a ese puerto del contenedor con la opci\u00f3n -p <puerto-host>:<puerto-contenedor> . En el ejemplo ejecuto un docker con un jenkins, y le as\u00edgno el puerto 80 de mi m\u00e1quina (que es el que usan los navegadores) al puerto 8080 del contenedor (que es por donde se despacha el jenkins). docker run -p 80:8080 jenkins Esto es un buena soluci\u00f3n en cuestiones de seguridad y de escalabilidad, ya que el contenedor tiene los puertos por defecto pero el host no.","title":"Puertos"},{"location":"code/devops/docker/docker-contenedores/#lanzar-contenedor-con-comando","text":"Para ver por ejemplo el filesystem del contenedor ubuntu hacemos docker run ubuntu ls .","title":"Lanzar contenedor con comando"},{"location":"code/devops/docker/docker-contenedores/#contenedores-interactivos","text":"Para que el contenedor ubuntu no se pare por ejemplo, podemos acceder con la opci\u00f3n interactive y con tty docker run -i -t ubuntu bash Ahora estamos dentro del container y podemos ejecutar comandos o lo que queramos.","title":"Contenedores interactivos"},{"location":"code/devops/docker/docker-contenedores/#asignarle-un-nombre-al-contenedor","text":"Para asignarle un nombre al contenedor para ser usado de manera m\u00e1s c\u00f3moda, hay que usar la opci\u00f3n --name . Este nombre se podr\u00e1 usar en sustituci\u00f3n del id del contenedor en muchos comandos, haciendo as\u00ed m\u00e1s f\u00e1cil su uso. docker run --name perico -it ubuntu Si queremos renombrar un contenedor debemos usar el comando docker rename . docker rename <nombre-actual-del-contenedor> <nuevo-nombre-del-contenedor>","title":"Asignarle un nombre al contenedor"},{"location":"code/devops/docker/docker-contenedores/#salir-del-contenedor","text":"Salir del contenedor y apagarlo / matarlo: Para salir del contenedor podemos ejecutar el comando exit Usar la combinaci\u00f3n Ctrl+D . Salir del contenedor pero mantenerlo activo: Mantener todo el rato la tecla Ctrl Luego pulsar P Despu\u00e9s Q Es decir -> Ctrl+P , D","title":"Salir del contenedor"},{"location":"code/devops/docker/docker-contenedores/#limitar-recursos","text":"","title":"Limitar recursos"},{"location":"code/devops/docker/docker-dockercompose/","text":"Docker Compose Informaci\u00f3n oficial -> aqu\u00ed Es para aplicaciones multicontenedor. La nomenclatura que se sigue a la hora de nombrar el fichero es docker-compose-<nombre>.yml , y su formato es YAML . Si no se especifica nada, el fichero tiene que llamarse docker-compose.yml . Instalaci\u00f3n de Docker Compose Informaci\u00f3n oficial -> aqu\u00ed sudo curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose up - Levantar contenedores con docker-compose docker-compose up [<opciones>] [--scale <servicio>=<numero-instancias>] [<servicio1> <servicio2> ...] Con este comando lanza docker-compose y ejecuta el fichero por defecto docker-compose.yml . docker-compose [-p <nombre-proyecto>] up [-d] Si queremos que levante un fichero docker-compose especifico, hacemos docker-compose [-p <nombre-proyecto>] -f <fichero-docker-compose> up [-d] docker-compose down - Parar y eliminar todo lo que ha hecho docker-compose docker-compose [-f <fichero-docker-compose>] down [-d] Estructura Tiene cuatro secciones: version -> Indica la version de Docker-Compose que se va a usar (poner '3' a menos que). Es OBLIGATORIA services -> Son los distintos servicios / contenedores que se van a crear Es OBLIGATORIA volumes -> opcional networks -> opcional version: services: volumes: networks: Un ejemplo con un contenedor de nginx. Si fuera por comandos har\u00edamos docker run -d --name nginx nginx Con docker-compose version: '3' services: web: container_name: nginx1 ports: - \"8080:80\" image: nginx Y para lanzarlo docker-compose up -d Para eliminar todo lo que ha hecho el anterior fichero hacemos docker-compose down services container_name -> Nombre del contenedor image -> Imagen con la que se va a crear build -> Ruta hasta el Dockerfile usar una imagen propia Versi\u00f3n corta version: '3' services: web: build: . Versi\u00f3n extendida version: '3' services: webapp: build: context: ./dir dockerfile: mi-dockerfile args: buildno: 1 command -> Mandarle un comando, sobreescribiendo el del Dockerfile (si lo hubiera). ports -> Exponer los puertos restart -> Pol\u00edtica de reinicio (informaci\u00f3n aqu\u00ed ) no -> Por defecto. on-failure -> Reiniciar el contenedor si hay un error. always -> Reiniciar si el contenedor se para (si se ha parado a mano, se reiniciar\u00e1 cuando se reinicie el demonio de docker). unless-stopped -> Parecido a always pero no se reinicia cuando se reinicia el demonio de docker. volumes version: \"3.2\" services: web: image: nginx:alpine volumes: - type: volume source: mydata target: /data volume: nocopy: true - type: bind source: ./static target: /opt/app/static db: image: postgres:latest volumes: - \"/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock\" - \"dbdata:/var/lib/postgresql/data\" volumes: mydata: dbdata: networks version: '3' services: web: networks: - some-network - other-network networks: some-network: other-network:","title":"Docker Compose"},{"location":"code/devops/docker/docker-dockercompose/#docker-compose","text":"Informaci\u00f3n oficial -> aqu\u00ed Es para aplicaciones multicontenedor. La nomenclatura que se sigue a la hora de nombrar el fichero es docker-compose-<nombre>.yml , y su formato es YAML . Si no se especifica nada, el fichero tiene que llamarse docker-compose.yml .","title":"Docker Compose"},{"location":"code/devops/docker/docker-dockercompose/#instalacion-de-docker-compose","text":"Informaci\u00f3n oficial -> aqu\u00ed sudo curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose","title":"Instalaci\u00f3n de Docker Compose"},{"location":"code/devops/docker/docker-dockercompose/#docker-compose-up-levantar-contenedores-con-docker-compose","text":"docker-compose up [<opciones>] [--scale <servicio>=<numero-instancias>] [<servicio1> <servicio2> ...] Con este comando lanza docker-compose y ejecuta el fichero por defecto docker-compose.yml . docker-compose [-p <nombre-proyecto>] up [-d] Si queremos que levante un fichero docker-compose especifico, hacemos docker-compose [-p <nombre-proyecto>] -f <fichero-docker-compose> up [-d]","title":"docker-compose up - Levantar contenedores con docker-compose"},{"location":"code/devops/docker/docker-dockercompose/#docker-compose-down-parar-y-eliminar-todo-lo-que-ha-hecho-docker-compose","text":"docker-compose [-f <fichero-docker-compose>] down [-d]","title":"docker-compose down - Parar y eliminar todo lo que ha hecho docker-compose"},{"location":"code/devops/docker/docker-dockercompose/#estructura","text":"Tiene cuatro secciones: version -> Indica la version de Docker-Compose que se va a usar (poner '3' a menos que). Es OBLIGATORIA services -> Son los distintos servicios / contenedores que se van a crear Es OBLIGATORIA volumes -> opcional networks -> opcional version: services: volumes: networks: Un ejemplo con un contenedor de nginx. Si fuera por comandos har\u00edamos docker run -d --name nginx nginx Con docker-compose version: '3' services: web: container_name: nginx1 ports: - \"8080:80\" image: nginx Y para lanzarlo docker-compose up -d Para eliminar todo lo que ha hecho el anterior fichero hacemos docker-compose down","title":"Estructura"},{"location":"code/devops/docker/docker-dockercompose/#services","text":"container_name -> Nombre del contenedor image -> Imagen con la que se va a crear build -> Ruta hasta el Dockerfile usar una imagen propia Versi\u00f3n corta version: '3' services: web: build: . Versi\u00f3n extendida version: '3' services: webapp: build: context: ./dir dockerfile: mi-dockerfile args: buildno: 1 command -> Mandarle un comando, sobreescribiendo el del Dockerfile (si lo hubiera). ports -> Exponer los puertos restart -> Pol\u00edtica de reinicio (informaci\u00f3n aqu\u00ed ) no -> Por defecto. on-failure -> Reiniciar el contenedor si hay un error. always -> Reiniciar si el contenedor se para (si se ha parado a mano, se reiniciar\u00e1 cuando se reinicie el demonio de docker). unless-stopped -> Parecido a always pero no se reinicia cuando se reinicia el demonio de docker.","title":"services"},{"location":"code/devops/docker/docker-dockercompose/#volumes","text":"version: \"3.2\" services: web: image: nginx:alpine volumes: - type: volume source: mydata target: /data volume: nocopy: true - type: bind source: ./static target: /opt/app/static db: image: postgres:latest volumes: - \"/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock\" - \"dbdata:/var/lib/postgresql/data\" volumes: mydata: dbdata:","title":"volumes"},{"location":"code/devops/docker/docker-dockercompose/#networks","text":"version: '3' services: web: networks: - some-network - other-network networks: some-network: other-network:","title":"networks"},{"location":"code/devops/docker/docker-dockerfile/","text":"Dockerfile - Crear imagen desde cero Info oficial -> aqu\u00ed Para poder crear una imagen desde otra con todo lo que necesita, pero de manera m\u00e1s c\u00f3moda, lo que se usan son unos ficheros de texto llamados Dockerfile . Por defecto los ficheros se tienen que llamar as\u00ed, aunque se pueden cambiar. Estructura / Directivas del Dockerfile Este fichero tiene ciertas palabras clave o directivas: FROM Imagen base en la que se va a basar la nueva. FROM <image> [AS <name>] FROM <image>[:<tag>] [AS <name>] FROM <image>[@<digest>] [AS <name>] Es la primera directiva del Dockerfile . Puede haber varias FROM para usar lo que se llama el Multi-Stage-Build . Puede ir precedida de la directiva ARG ARG CODE_VERSION=latest FROM base:${CODE_VERSION} CMD /code/run-app FROM extras:${CODE_VERSION} CMD /code/run-extras LABEL Es para a\u00f1adir metadata a la imagen (autor, mantenedor, versi\u00f3n, etc). LABEL <key>=value<value> LABEL <key1>=<value1> <key2>=<value2> ... Puede haber m\u00e1s de una LABEL por Dockerfile . Consiste en un conjunto de clave-valor, y pueden ir varias por l\u00ednea. MAINTAINER -> Creador de la imagen, pero est\u00e1 deprecated. Usar LABEL . RUN Comandos a ejecutar ANTES de ser creada (por ejemplo, paquetes a instalarle a la imagen base). RUN <command> RUN [\"executable\", \"param1\", \"param2\"] Puede haber varias directivas RUN en un Dockerfile . Se debe usar comillas dobles \" no comillas simples ' . COPY Copia ficheros locales a la imagen. COPY <src> <dest> COPY <src1> <src2> ... <dest> COPY [--chown=<user>:<group>] <src> ... <dest> COPY [--chown=<user>:<group>] [\"<src>\", ... \"<dest>\"] Puede haber varios COPY por Dockerfile . --chown solo se puede usar en Linux (en Windows no). ADD Hace lo mismo que COPY , pero adem\u00e1s solo copia ficheros locales. Puedes copiar contenido desde una URL, o si el fichero est\u00e1 comprimido, al usar ADD lo descomprime. ADD <src> <dest> ADD <src1> <src2> ... <dest> ADD [--chown=<user>:<group>] <src> ... <dest> ADD [--chown=<user>:<group>] [\"<src>\", ... \"<dest>\"] Puede haber varios ADD en el Dockerfile . --chown solo sirve en Linux (en Windows no va). Se pueden usar ciertas reglas en <src> y <dest> como *.py (todos los ficheros que acaben en .py ). ENV Variable de entorno. ENV key value ENV <key1>=<value1> <key2>=<value2> ... Puede haber varias ENV por Dockerfile . Si alguna ENV es igual que alguna ARG , la sobreescribe ( ENV > ARG ). WORKDIR Directorio de trabajo de la imagen. WORKDIR <path> Puede haber varios WORKDIR dentro del Dockerfile (aunque no tiene sentido). Sirve para definir el directorio con las directivas RUN , CMD , ENTRYPOINT , COPY , ADD . Este ejemplo hace que el directorio de trabajo sea /a/b/c WORKDIR /a WORKDIR b WORKDIR c Que se podr\u00eda poner de manera m\u00e1s simple con WORKDIR /a/b/c EXPOSE -> Exponer por defecto un puerto del contenedor. bash EXPOSE <port> [<port>/<protocol> ...] Puede haber varios EXPOSE por Dockerfile . Si no se especifica el protocolo, por defecto toma tcp , pero si quieres udp tienes que especificarlo. Si quisieras que permita los dos protocolos, se debe incluir en dos l\u00edneas. bash EXPOSE 80/tcp EXPOSE 80/udp Con la opci\u00f3n -p se sobreescribe lo del Dockerfile docker run -p 80:80/tcp 80:80/udp ... . Esto se gestiona con docker network . USER -> Sirve para indicar dentro del Dockerfile un usuario. bash USER <user>[:<group>] USER <UID>[:<GID>] Puede haber varios USER dentro del Dockerfile . Son para ejecutar RUN , CMD o ENTRYPOINT con un usuario especifico, en lugar de root. El usuario por defecto de un Dockerfile es root. VOLUME -> Para persistencia de datos, indicamos al contenedor donde almacenar sus datos en un directorio del Docker Host (nuestra m\u00e1quina). bash VOLUME [\"/data\"] Esto es un concepto m\u00e1s avanzado y se ve en su propia secci\u00f3n. ENTRYPOINT -> CMD -> Acci\u00f3n por defecto al crear el contenedor. bash CMD [\"executable\", \"param1\", \"param2\"] CMD [\"param1\", \"param2\"] CMD command param1 param2 Solo puede haber una CMD por Dockerfile . .dockerignore - Descartar ficheros para crear una imagen El .dockerignore equivale al .gitignore de git. Es un fichero donde indicarle al Dockerfile que archivos y/o directorios no cargar en la imagen. docker build - Construir imagen desde el Dockerfile docker build [<opciones>] [<path> | <url> | -] Info oficial -> aqu\u00ed Para crear la imagen con un Dockerfile que se llama Dockerfile se jecuta docker build Si queremos usar otro fichero con otro nombre como Dockerfile hay que usar la opci\u00f3n -f docker build -f <fichero-dockerfile> Se recomienda usar siempre la opci\u00f3n -t para asignarle un nombre y opcionalmente un tag a la imagen. Si no se especifica el tag, docker pone por defecto latest docker build -t <name>[:<tag>] Se le puede indicar el path donde est\u00e1 el Dockerfile , y este path puede ser incluso una url de un repo git. Se recomienda usar docker build -t <nombre>:<tag> <path-absoluto-hasta-el-dockerfile> Dangling images - Im\u00e1genes hu\u00e9rfanas / colgadas Si al construir varias im\u00e1genes del mismo Dockerfile , estas se llaman igual (porque no hemos especificado nombres y tags distintos), solo la m\u00e1s nueva tiene el nombre y todas las dem\u00e1s quedan hu\u00e9rfanas. Al usar docker images vemos come en su REPOSITORY pone <none> y en TAG pasa igual. Por eso HAY QUE USAR TAGS . La forma de ver todas estas im\u00e1genenes colgadas es con docker images -f dangling=true Lo l\u00f3gico es borrar todas estas im\u00e1genes, para ello a\u00f1adimos a la sentencia anterior -q para ver solo los ids y luego usar el comando docker rmi . Una forma autom\u00e1tica de hacer esto es docker images -f dangling=true -q | xargs docker rmi Multi-Stage-Build Es probable que a veces necesitemos usar algo (fichero, carpetas, ...) de alguna imagen para poder usarlo en otra. Tendr\u00edamos dos opciones: Crear una imagen con \"las dos imagenes dentro\", es decir, crear una imagen m\u00e1s pesada. Generar los recursos en una imagen temporal y copiarlos a la imagen final -> Multi-Stage-Build. La forma de hacer el paso 2. consiste en usar varios FROM dentro del Dockerfile . A cada FROM se asigna un alias y para poder llamar algo de esa imagen usamos la opci\u00f3n --from=<alias> . El \u00faltimo FROM es con el que se va a construir la imagen, pero los anteriores los ejecuta y podemos copiar los ficheros en las instrucciones a partir del \u00faltimo FROM . Un ejemplo FROM <imagen-que-genera-fichero> AS <alias-de-ayuda> # Operaciones FROM <imagen-final> COPY --from=<alias-de-ayuda> <fichero-src-en-la-imagen-de-arriba> <fichero-dest-en-mi-imagen-final> La imagen base va a ser <imagen-final> , y todas las dem\u00e1s no entran dentro, pero si se generan para poder hacer el COPY . Buenas pr\u00e1cticas Dockerfile Info oficial -> aqu\u00ed Contenedor ef\u00edmero -> F\u00e1cilmente destruible Un servicio por contenedor Crear un .dockerignore para evitar archivos pesados Cuantas menos capas mejor: Argumentos largos separados con \\ . Varios argumentos en una sola capa (en vez de muchas capas). No instalar paquetes innecesarios (solo el servicio). Usar Multi-Stage-Build. Usar LABEL para documentar (versiones, descripciones, etc).","title":"Dockerfile"},{"location":"code/devops/docker/docker-dockerfile/#dockerfile-crear-imagen-desde-cero","text":"Info oficial -> aqu\u00ed Para poder crear una imagen desde otra con todo lo que necesita, pero de manera m\u00e1s c\u00f3moda, lo que se usan son unos ficheros de texto llamados Dockerfile . Por defecto los ficheros se tienen que llamar as\u00ed, aunque se pueden cambiar.","title":"Dockerfile - Crear imagen desde cero"},{"location":"code/devops/docker/docker-dockerfile/#estructura-directivas-del-dockerfile","text":"Este fichero tiene ciertas palabras clave o directivas:","title":"Estructura / Directivas del Dockerfile"},{"location":"code/devops/docker/docker-dockerfile/#from","text":"Imagen base en la que se va a basar la nueva. FROM <image> [AS <name>] FROM <image>[:<tag>] [AS <name>] FROM <image>[@<digest>] [AS <name>] Es la primera directiva del Dockerfile . Puede haber varias FROM para usar lo que se llama el Multi-Stage-Build . Puede ir precedida de la directiva ARG ARG CODE_VERSION=latest FROM base:${CODE_VERSION} CMD /code/run-app FROM extras:${CODE_VERSION} CMD /code/run-extras","title":"FROM"},{"location":"code/devops/docker/docker-dockerfile/#label","text":"Es para a\u00f1adir metadata a la imagen (autor, mantenedor, versi\u00f3n, etc). LABEL <key>=value<value> LABEL <key1>=<value1> <key2>=<value2> ... Puede haber m\u00e1s de una LABEL por Dockerfile . Consiste en un conjunto de clave-valor, y pueden ir varias por l\u00ednea. MAINTAINER -> Creador de la imagen, pero est\u00e1 deprecated. Usar LABEL .","title":"LABEL"},{"location":"code/devops/docker/docker-dockerfile/#run","text":"Comandos a ejecutar ANTES de ser creada (por ejemplo, paquetes a instalarle a la imagen base). RUN <command> RUN [\"executable\", \"param1\", \"param2\"] Puede haber varias directivas RUN en un Dockerfile . Se debe usar comillas dobles \" no comillas simples ' .","title":"RUN"},{"location":"code/devops/docker/docker-dockerfile/#copy","text":"Copia ficheros locales a la imagen. COPY <src> <dest> COPY <src1> <src2> ... <dest> COPY [--chown=<user>:<group>] <src> ... <dest> COPY [--chown=<user>:<group>] [\"<src>\", ... \"<dest>\"] Puede haber varios COPY por Dockerfile . --chown solo se puede usar en Linux (en Windows no).","title":"COPY"},{"location":"code/devops/docker/docker-dockerfile/#add","text":"Hace lo mismo que COPY , pero adem\u00e1s solo copia ficheros locales. Puedes copiar contenido desde una URL, o si el fichero est\u00e1 comprimido, al usar ADD lo descomprime. ADD <src> <dest> ADD <src1> <src2> ... <dest> ADD [--chown=<user>:<group>] <src> ... <dest> ADD [--chown=<user>:<group>] [\"<src>\", ... \"<dest>\"] Puede haber varios ADD en el Dockerfile . --chown solo sirve en Linux (en Windows no va). Se pueden usar ciertas reglas en <src> y <dest> como *.py (todos los ficheros que acaben en .py ).","title":"ADD"},{"location":"code/devops/docker/docker-dockerfile/#env","text":"Variable de entorno. ENV key value ENV <key1>=<value1> <key2>=<value2> ... Puede haber varias ENV por Dockerfile . Si alguna ENV es igual que alguna ARG , la sobreescribe ( ENV > ARG ).","title":"ENV"},{"location":"code/devops/docker/docker-dockerfile/#workdir","text":"Directorio de trabajo de la imagen. WORKDIR <path> Puede haber varios WORKDIR dentro del Dockerfile (aunque no tiene sentido). Sirve para definir el directorio con las directivas RUN , CMD , ENTRYPOINT , COPY , ADD . Este ejemplo hace que el directorio de trabajo sea /a/b/c WORKDIR /a WORKDIR b WORKDIR c Que se podr\u00eda poner de manera m\u00e1s simple con WORKDIR /a/b/c EXPOSE -> Exponer por defecto un puerto del contenedor. bash EXPOSE <port> [<port>/<protocol> ...] Puede haber varios EXPOSE por Dockerfile . Si no se especifica el protocolo, por defecto toma tcp , pero si quieres udp tienes que especificarlo. Si quisieras que permita los dos protocolos, se debe incluir en dos l\u00edneas. bash EXPOSE 80/tcp EXPOSE 80/udp Con la opci\u00f3n -p se sobreescribe lo del Dockerfile docker run -p 80:80/tcp 80:80/udp ... . Esto se gestiona con docker network . USER -> Sirve para indicar dentro del Dockerfile un usuario. bash USER <user>[:<group>] USER <UID>[:<GID>] Puede haber varios USER dentro del Dockerfile . Son para ejecutar RUN , CMD o ENTRYPOINT con un usuario especifico, en lugar de root. El usuario por defecto de un Dockerfile es root. VOLUME -> Para persistencia de datos, indicamos al contenedor donde almacenar sus datos en un directorio del Docker Host (nuestra m\u00e1quina). bash VOLUME [\"/data\"] Esto es un concepto m\u00e1s avanzado y se ve en su propia secci\u00f3n. ENTRYPOINT -> CMD -> Acci\u00f3n por defecto al crear el contenedor. bash CMD [\"executable\", \"param1\", \"param2\"] CMD [\"param1\", \"param2\"] CMD command param1 param2 Solo puede haber una CMD por Dockerfile .","title":"WORKDIR"},{"location":"code/devops/docker/docker-dockerfile/#dockerignore-descartar-ficheros-para-crear-una-imagen","text":"El .dockerignore equivale al .gitignore de git. Es un fichero donde indicarle al Dockerfile que archivos y/o directorios no cargar en la imagen.","title":".dockerignore - Descartar ficheros para crear una imagen"},{"location":"code/devops/docker/docker-dockerfile/#docker-build-construir-imagen-desde-el-dockerfile","text":"docker build [<opciones>] [<path> | <url> | -] Info oficial -> aqu\u00ed Para crear la imagen con un Dockerfile que se llama Dockerfile se jecuta docker build Si queremos usar otro fichero con otro nombre como Dockerfile hay que usar la opci\u00f3n -f docker build -f <fichero-dockerfile> Se recomienda usar siempre la opci\u00f3n -t para asignarle un nombre y opcionalmente un tag a la imagen. Si no se especifica el tag, docker pone por defecto latest docker build -t <name>[:<tag>] Se le puede indicar el path donde est\u00e1 el Dockerfile , y este path puede ser incluso una url de un repo git. Se recomienda usar docker build -t <nombre>:<tag> <path-absoluto-hasta-el-dockerfile>","title":"docker build - Construir imagen desde el Dockerfile"},{"location":"code/devops/docker/docker-dockerfile/#dangling-images-imagenes-huerfanas-colgadas","text":"Si al construir varias im\u00e1genes del mismo Dockerfile , estas se llaman igual (porque no hemos especificado nombres y tags distintos), solo la m\u00e1s nueva tiene el nombre y todas las dem\u00e1s quedan hu\u00e9rfanas. Al usar docker images vemos come en su REPOSITORY pone <none> y en TAG pasa igual. Por eso HAY QUE USAR TAGS . La forma de ver todas estas im\u00e1genenes colgadas es con docker images -f dangling=true Lo l\u00f3gico es borrar todas estas im\u00e1genes, para ello a\u00f1adimos a la sentencia anterior -q para ver solo los ids y luego usar el comando docker rmi . Una forma autom\u00e1tica de hacer esto es docker images -f dangling=true -q | xargs docker rmi","title":"Dangling images - Im\u00e1genes hu\u00e9rfanas / colgadas"},{"location":"code/devops/docker/docker-dockerfile/#multi-stage-build","text":"Es probable que a veces necesitemos usar algo (fichero, carpetas, ...) de alguna imagen para poder usarlo en otra. Tendr\u00edamos dos opciones: Crear una imagen con \"las dos imagenes dentro\", es decir, crear una imagen m\u00e1s pesada. Generar los recursos en una imagen temporal y copiarlos a la imagen final -> Multi-Stage-Build. La forma de hacer el paso 2. consiste en usar varios FROM dentro del Dockerfile . A cada FROM se asigna un alias y para poder llamar algo de esa imagen usamos la opci\u00f3n --from=<alias> . El \u00faltimo FROM es con el que se va a construir la imagen, pero los anteriores los ejecuta y podemos copiar los ficheros en las instrucciones a partir del \u00faltimo FROM . Un ejemplo FROM <imagen-que-genera-fichero> AS <alias-de-ayuda> # Operaciones FROM <imagen-final> COPY --from=<alias-de-ayuda> <fichero-src-en-la-imagen-de-arriba> <fichero-dest-en-mi-imagen-final> La imagen base va a ser <imagen-final> , y todas las dem\u00e1s no entran dentro, pero si se generan para poder hacer el COPY .","title":"Multi-Stage-Build"},{"location":"code/devops/docker/docker-dockerfile/#buenas-practicas-dockerfile","text":"Info oficial -> aqu\u00ed Contenedor ef\u00edmero -> F\u00e1cilmente destruible Un servicio por contenedor Crear un .dockerignore para evitar archivos pesados Cuantas menos capas mejor: Argumentos largos separados con \\ . Varios argumentos en una sola capa (en vez de muchas capas). No instalar paquetes innecesarios (solo el servicio). Usar Multi-Stage-Build. Usar LABEL para documentar (versiones, descripciones, etc).","title":"Buenas pr\u00e1cticas Dockerfile"},{"location":"code/devops/docker/docker-hub/","text":"Docker Hub Docker Hub es una plataforma online donde se suben y descargan im\u00e1genes docker. Siempre que necesitemos descargar una imagen, lo m\u00e1s seguro es que lo hagamos de aqu\u00ed. Lo primero que se recomienda despu\u00e9s de instalar Docker en nuestro pc, es hacerse una cuenta en Docker Hub. docker login Cuando tengamos una cuenta de Docker Hub, podemos loguearnos desde la terminal con docker login Nos pedir\u00e1 el usuario y contrase\u00f1a.","title":"Docker Hub"},{"location":"code/devops/docker/docker-hub/#docker-hub","text":"Docker Hub es una plataforma online donde se suben y descargan im\u00e1genes docker. Siempre que necesitemos descargar una imagen, lo m\u00e1s seguro es que lo hagamos de aqu\u00ed. Lo primero que se recomienda despu\u00e9s de instalar Docker en nuestro pc, es hacerse una cuenta en Docker Hub.","title":"Docker Hub"},{"location":"code/devops/docker/docker-hub/#docker-login","text":"Cuando tengamos una cuenta de Docker Hub, podemos loguearnos desde la terminal con docker login Nos pedir\u00e1 el usuario y contrase\u00f1a.","title":"docker login"},{"location":"code/devops/docker/docker-imagenes/","text":"Im\u00e1genes Docker TODO Crear im\u00e1genes con docker commit Supongamos que hemos abierto un contenedor, hemos modificado cosas y lo tenemos listo para trabajar. Si queremos crear una imagen as\u00ed para poder usarla, lo que har\u00edamos ser\u00eda docker commit <contenedor-modificado> <imagen-nueva> Podemos adem\u00e1s ejecutar comandos previos al commit para crear la nueva imagen. Por ejemplo, supongamos una imagen de ubuntu que le hemos instalado el servidor Apache2 y hemos lanzado el servicio. Con el siguiente comando exponemos el puerto 85 del contenedor y tenemos el apache2 en primer plano. docker commit --change='CMD [\"apache2ctl\", \"-D FOREGROUND\"]' -c \"EXPOSE 85\" <contenedor> <nueva-imagen>","title":"Im\u00e1genes Docker"},{"location":"code/devops/docker/docker-imagenes/#imagenes-docker","text":"TODO","title":"Im\u00e1genes Docker"},{"location":"code/devops/docker/docker-imagenes/#crear-imagenes-con-docker-commit","text":"Supongamos que hemos abierto un contenedor, hemos modificado cosas y lo tenemos listo para trabajar. Si queremos crear una imagen as\u00ed para poder usarla, lo que har\u00edamos ser\u00eda docker commit <contenedor-modificado> <imagen-nueva> Podemos adem\u00e1s ejecutar comandos previos al commit para crear la nueva imagen. Por ejemplo, supongamos una imagen de ubuntu que le hemos instalado el servidor Apache2 y hemos lanzado el servicio. Con el siguiente comando exponemos el puerto 85 del contenedor y tenemos el apache2 en primer plano. docker commit --change='CMD [\"apache2ctl\", \"-D FOREGROUND\"]' -c \"EXPOSE 85\" <contenedor> <nueva-imagen>","title":"Crear im\u00e1genes con docker commit"},{"location":"code/devops/docker/docker-instalacion/","text":"Instalaci\u00f3n Script para la instalaci\u00f3n de docker -> aqu\u00ed En consola har\u00edamos curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh -y Despu\u00e9s de instalarlo deberemos darle los permisos al usuario docker para no tener que usarlo como root sudo usermod -aG docker $USER Ahora hay que cerrar sesi\u00f3n / logout / reiniciar, y volver a entrar para que los cambios surtan efecto. Una vez hecho esto podemos comprobar que todo funciona correctamente con los siguientes comandos (probarlos todos): docker -v -> Versi\u00f3n instalada en formato corto. docker version -> Versi\u00f3n instalada en formato extendido. docker info -> Informaci\u00f3n detallada del sistema. docker -> Lista todos los comandos de docker.","title":"Instalaci\u00f3n"},{"location":"code/devops/docker/docker-instalacion/#instalacion","text":"Script para la instalaci\u00f3n de docker -> aqu\u00ed En consola har\u00edamos curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh -y Despu\u00e9s de instalarlo deberemos darle los permisos al usuario docker para no tener que usarlo como root sudo usermod -aG docker $USER Ahora hay que cerrar sesi\u00f3n / logout / reiniciar, y volver a entrar para que los cambios surtan efecto. Una vez hecho esto podemos comprobar que todo funciona correctamente con los siguientes comandos (probarlos todos): docker -v -> Versi\u00f3n instalada en formato corto. docker version -> Versi\u00f3n instalada en formato extendido. docker info -> Informaci\u00f3n detallada del sistema. docker -> Lista todos los comandos de docker.","title":"Instalaci\u00f3n"},{"location":"code/devops/docker/docker-network/","text":"Docker Network Informaci\u00f3n oficial -> aqu\u00ed docker network docker network <comando> Tipos de driver de redes: bridge -> Red por defecto en los contenedores. Todos los contenedores de un mismo host est\u00e1n (en principio) conectados a esta red. Pueden comunicarse entre ellos, hacerse ping, etc. host -> Es la red del propio Docker Host. none -> Es para crear contenedor sin red. overlay -> Para conectar distintos docker daemons y permitir a docker Swarm hablar con ellos. macvlan -> Permite asignar una mac a un contenedor. Network Plugins -> aqu\u00ed Crear / Eliminar red # Crear docker network create [-d bridge] [--subnet 172.17.10.0/24] [--gateway 172.17.10.1] [--ip 172.17.10.50] <red> # Eliminar docker network rm <red> [<red2> <red3> ...] Inspeccionar red docker inspect <red> Crear un contenedor conectado a una red definida docker run --network <red> ... Todos los contenedores que esten dentro de una red definida, a la hora de hacer un ping por ejemplo, no necesito poner su ip, con poner su nombre es suficiente (ya que tengo un DNS propio). Esto solo se puede hacer cuando es una red creada por mi, no en la red por defecto de docker. Conectar / desconectar un contenedor a una red definida # Conectar docker network connect [<opciones>] <red> <contenedor> # Desconectar docker network disconnect [<opciones>] <red> <contenedor>","title":"Network"},{"location":"code/devops/docker/docker-network/#docker-network","text":"Informaci\u00f3n oficial -> aqu\u00ed","title":"Docker Network"},{"location":"code/devops/docker/docker-network/#docker-network_1","text":"docker network <comando> Tipos de driver de redes: bridge -> Red por defecto en los contenedores. Todos los contenedores de un mismo host est\u00e1n (en principio) conectados a esta red. Pueden comunicarse entre ellos, hacerse ping, etc. host -> Es la red del propio Docker Host. none -> Es para crear contenedor sin red. overlay -> Para conectar distintos docker daemons y permitir a docker Swarm hablar con ellos. macvlan -> Permite asignar una mac a un contenedor. Network Plugins -> aqu\u00ed","title":"docker network"},{"location":"code/devops/docker/docker-network/#crear-eliminar-red","text":"# Crear docker network create [-d bridge] [--subnet 172.17.10.0/24] [--gateway 172.17.10.1] [--ip 172.17.10.50] <red> # Eliminar docker network rm <red> [<red2> <red3> ...]","title":"Crear / Eliminar red"},{"location":"code/devops/docker/docker-network/#inspeccionar-red","text":"docker inspect <red>","title":"Inspeccionar red"},{"location":"code/devops/docker/docker-network/#crear-un-contenedor-conectado-a-una-red-definida","text":"docker run --network <red> ... Todos los contenedores que esten dentro de una red definida, a la hora de hacer un ping por ejemplo, no necesito poner su ip, con poner su nombre es suficiente (ya que tengo un DNS propio). Esto solo se puede hacer cuando es una red creada por mi, no en la red por defecto de docker.","title":"Crear un contenedor conectado a una red definida"},{"location":"code/devops/docker/docker-network/#conectar-desconectar-un-contenedor-a-una-red-definida","text":"# Conectar docker network connect [<opciones>] <red> <contenedor> # Desconectar docker network disconnect [<opciones>] <red> <contenedor>","title":"Conectar / desconectar un contenedor a una red definida"},{"location":"code/devops/docker/docker-volumes/","text":"Docker Volumes Informaci\u00f3n oficial -> aqu\u00ed Existen 3 tipos de volumenes: Host Volumes -> Una carpeta del Host. Named Volumes -> Un volumen con nombre creado con Docker No deja de ser un Host Volume pero en la carpeta /../docker/volumes/<nombre-volumen> Anonymous Volumes -> Es igual que Named Volumes solo que el nombre es un hash que asigna docker. Manipular (crear, listar, destruir...) volumenes con docker volume # Crear volumen docker volume create <nombre-volumen> # Listar volumenes docker volume ls # Borrar volumen docker volume rm <nombre-volumen> Se recomienda asignar nombre a los vol\u00famenes, ya que sino ser\u00e1n vol\u00famenes an\u00f3nimos y es m\u00e1s complicado nombrarlos (hay que usar su id). Montar volumen con docker run # Ejecutar contenedor con un volumen host montado en el contenedor docker run -v [<directorio-host-o-volumen-definido>:]<directorio-contenedor> -t <nombre-contenedor> # Borrar tanto el contendor como su volumen docker rm -v <nombre-contenedor> OJO -> Si queremos montar una carpeta local espec\u00edfica en un contenedor, solo podemos hacerlo con este comando. No se puede montar una carpeta local espec\u00edfica desde el Dockerfile ya que el path podr\u00eda cambiar. Por ejemplo si queremos montar la propia carpeta en la que estamos har\u00edamos docker run -v $(pwd):<directorio-contenedor> <contenedor> Si no indica el <directorio-host-o-volumen-definido> , se crear\u00e1 un volumen an\u00f3nimo. Montar volumen con Dockerfile Desde el Dockerfile podemos hacer lo mismo, pero solo crea volumenes an\u00f3nimos. Es decir, que no podemos montar una carpeta local espec\u00edfica. VOLUME <directorio-contenedor> Dangling Volumes Si al borrar los contenedores, no especificamos que borre sus volumenes con -v , quedar\u00e1n los llamados Dangling Volumes . Para verlos y borrarlos # Ver todos los volumenes dangling docker volume ls -f dangling=true # Listar todos los ids de los dangling volumes | Borrarlos docker volume ls -f dangling=true -q | xargs docker volume rm","title":"Volumes"},{"location":"code/devops/docker/docker-volumes/#docker-volumes","text":"Informaci\u00f3n oficial -> aqu\u00ed Existen 3 tipos de volumenes: Host Volumes -> Una carpeta del Host. Named Volumes -> Un volumen con nombre creado con Docker No deja de ser un Host Volume pero en la carpeta /../docker/volumes/<nombre-volumen> Anonymous Volumes -> Es igual que Named Volumes solo que el nombre es un hash que asigna docker.","title":"Docker Volumes"},{"location":"code/devops/docker/docker-volumes/#manipular-crear-listar-destruir-volumenes-con-docker-volume","text":"# Crear volumen docker volume create <nombre-volumen> # Listar volumenes docker volume ls # Borrar volumen docker volume rm <nombre-volumen> Se recomienda asignar nombre a los vol\u00famenes, ya que sino ser\u00e1n vol\u00famenes an\u00f3nimos y es m\u00e1s complicado nombrarlos (hay que usar su id).","title":"Manipular (crear, listar, destruir...) volumenes con docker volume"},{"location":"code/devops/docker/docker-volumes/#montar-volumen-con-docker-run","text":"# Ejecutar contenedor con un volumen host montado en el contenedor docker run -v [<directorio-host-o-volumen-definido>:]<directorio-contenedor> -t <nombre-contenedor> # Borrar tanto el contendor como su volumen docker rm -v <nombre-contenedor> OJO -> Si queremos montar una carpeta local espec\u00edfica en un contenedor, solo podemos hacerlo con este comando. No se puede montar una carpeta local espec\u00edfica desde el Dockerfile ya que el path podr\u00eda cambiar. Por ejemplo si queremos montar la propia carpeta en la que estamos har\u00edamos docker run -v $(pwd):<directorio-contenedor> <contenedor> Si no indica el <directorio-host-o-volumen-definido> , se crear\u00e1 un volumen an\u00f3nimo.","title":"Montar volumen con docker run"},{"location":"code/devops/docker/docker-volumes/#montar-volumen-con-dockerfile","text":"Desde el Dockerfile podemos hacer lo mismo, pero solo crea volumenes an\u00f3nimos. Es decir, que no podemos montar una carpeta local espec\u00edfica. VOLUME <directorio-contenedor>","title":"Montar volumen con Dockerfile"},{"location":"code/devops/docker/docker-volumes/#dangling-volumes","text":"Si al borrar los contenedores, no especificamos que borre sus volumenes con -v , quedar\u00e1n los llamados Dangling Volumes . Para verlos y borrarlos # Ver todos los volumenes dangling docker volume ls -f dangling=true # Listar todos los ids de los dangling volumes | Borrarlos docker volume ls -f dangling=true -q | xargs docker volume rm","title":"Dangling Volumes"},{"location":"code/ides/vscode/vscode/","text":"Visual Studio Code Atajos de teclado Ayuda oficial -> Tips & Tricks Hojas de resumen de atajos de teclado: Windows Mac Linux Repo de un curso a Introducci\u00f3n a VSCode -> repo Empezamos con los atajos de teclado / shortcuts: Mover L\u00edneas -> Seleccionar poner el cursor en la o las l\u00edneas y \u2325 \u2193 / \u2325 \u2191 Alt + \u2191 / \u2193 Comentar / descomentar l\u00ednea \u2318 / Ctrl + \\ Comentar texto -> Seleccionar solo el trozo de texto a comentar y \u21e7 \u2325 A Shift + Ctrl + A Creaci\u00f3n r\u00e1pida de archivos -> Si indicamos como fuente un archivo dentro de un directorio, ponemos el cursor sobre este y el atajo crear\u00e1 tanto el directorio como el archivo \u2325 click derecho Ctrl + click derecho Ir a la definici\u00f3n de una funci\u00f3n o variable -> Cursor sobre la funci\u00f3n o variable y \u2325 F12 F12 Borrar l\u00ednea \u21e7 \u2318 K Ctrl + Shift + K Borrar todas las ocurrencias de una selecci\u00f3n (variable/ funcion/...) -> Seleccionar palabra (variable/funcion/...) y # Primero seleccionar \u21e7 \u2318 L Ctrl + Shift + L # Borrar l\u00ednea (atajo del punto anterior) \u21e7 \u2318 K Ctrl + Shift + K Deshacer y Rehacer # Deshacer \u2318 Z Ctrl + Z # Rehacer \u2318 \u21e7 Z Ctrl + Shift + Z Ocultar / Mostrar Sidebar \u2318 B Ctrl + B Modo Zen (entrar y salir) \u2318 K Z Ctrl + K Z Abrir fichero (\u00fatil para el Zen Mode) # Primero teclear \u2318 P Ctrl + P # Luego el nombre del fichero y pulsar enter Mostrar / Ocultar Terminal \u2303 ` Ctrl + ` Encapsular / Wrap c\u00f3digo -> Emmet Wrap # Primero hay que abrir la Paleta de Comandos \u21e7 \u2318 P Ctrl + SHIFT + P # Luego poner wrap with Abbrevation # Poner que queremos que encapsule y c\u00f3digo y darle a enter Cerrar / Reabrir / Cambiar de pesta\u00f1as # Cerrar pesta\u00f1a \u2318 W Ctrl + W # Cerrar todas las pesta\u00f1as \u2318 K \u2318 W Ctrl + K Ctrl + W # Reabrir pesta\u00f1a anterior \u21e7 \u2318 T Ctrl + Shift + T # Cambiar de pesta\u00f1a \u2303 TAB Ctrl + TAB Copiar linea Arriba / Abajo # Copiar abajo \u21e7 \u2325 Down Ctrl + Shift + Alt + \u2193 # Copiar Arriba \u21e7 \u2325 Up Ctrl + Shift + Alt + \u2191 Crear multicursor en cualquier lado / Abajo / Arriba / Siguiente ocurrencia # Para crear m\u00e1s de un cursor en sitio espec\u00edfico \u2325 click Alt + click # Si quiero crear m\u00e1s de un cursor pero seleccionando palabras \u2325 doble click Alt + doble click # Crear cursor abajo \u21e7 \u2325 \u2193 Ctrl + Alt + \u2193 # Crear cursor arriba \u21e7 \u2325 \u2191 Ctrl + Alt + \u2191 # Multiples ocurrencias -> Primero selecciono la palabra y luego \u2318 + D Ctrl + D Lowercase / Uppercase # Seleccionar palabra / palabras # Lowercase \u2303 \u21e7 L Ctrl + Shift + L # Uppercase \u2303 \u21e7 U Ctrl + Shift + U Ver definiciones de clases / funciones / etc, en un fichero # Primero es abrir el menu con \u2318 P Ctrl + P # Luego escribir @ # Si queremos que ordene por tipo (clases, funciones, etc), ponemos @: Ir a una l\u00ednea \u2303 G Ctrl + G Markdown Preview # Abrir vista previa \u2318 \u2303 V Ctrl + Shift + V # Abrir vista previa en el lateral \u2318 K, V Ctrl + K, V # Abrir vista previa fija en el lateral Hay que ejecutarlo desde la paleta de comandos o asignarle un atajo Reemplazar s\u00edmbolo # Poner el cursor sobre el nombre de la clase / funcion / etc y apretar F2 # Escribir el sustituto y presionar ENTER atajo ```bash ```","title":"Visual Studio code"},{"location":"code/ides/vscode/vscode/#visual-studio-code","text":"","title":"Visual Studio Code"},{"location":"code/ides/vscode/vscode/#atajos-de-teclado","text":"Ayuda oficial -> Tips & Tricks Hojas de resumen de atajos de teclado: Windows Mac Linux Repo de un curso a Introducci\u00f3n a VSCode -> repo Empezamos con los atajos de teclado / shortcuts: Mover L\u00edneas -> Seleccionar poner el cursor en la o las l\u00edneas y \u2325 \u2193 / \u2325 \u2191 Alt + \u2191 / \u2193 Comentar / descomentar l\u00ednea \u2318 / Ctrl + \\ Comentar texto -> Seleccionar solo el trozo de texto a comentar y \u21e7 \u2325 A Shift + Ctrl + A Creaci\u00f3n r\u00e1pida de archivos -> Si indicamos como fuente un archivo dentro de un directorio, ponemos el cursor sobre este y el atajo crear\u00e1 tanto el directorio como el archivo \u2325 click derecho Ctrl + click derecho Ir a la definici\u00f3n de una funci\u00f3n o variable -> Cursor sobre la funci\u00f3n o variable y \u2325 F12 F12 Borrar l\u00ednea \u21e7 \u2318 K Ctrl + Shift + K Borrar todas las ocurrencias de una selecci\u00f3n (variable/ funcion/...) -> Seleccionar palabra (variable/funcion/...) y # Primero seleccionar \u21e7 \u2318 L Ctrl + Shift + L # Borrar l\u00ednea (atajo del punto anterior) \u21e7 \u2318 K Ctrl + Shift + K Deshacer y Rehacer # Deshacer \u2318 Z Ctrl + Z # Rehacer \u2318 \u21e7 Z Ctrl + Shift + Z Ocultar / Mostrar Sidebar \u2318 B Ctrl + B Modo Zen (entrar y salir) \u2318 K Z Ctrl + K Z Abrir fichero (\u00fatil para el Zen Mode) # Primero teclear \u2318 P Ctrl + P # Luego el nombre del fichero y pulsar enter Mostrar / Ocultar Terminal \u2303 ` Ctrl + ` Encapsular / Wrap c\u00f3digo -> Emmet Wrap # Primero hay que abrir la Paleta de Comandos \u21e7 \u2318 P Ctrl + SHIFT + P # Luego poner wrap with Abbrevation # Poner que queremos que encapsule y c\u00f3digo y darle a enter Cerrar / Reabrir / Cambiar de pesta\u00f1as # Cerrar pesta\u00f1a \u2318 W Ctrl + W # Cerrar todas las pesta\u00f1as \u2318 K \u2318 W Ctrl + K Ctrl + W # Reabrir pesta\u00f1a anterior \u21e7 \u2318 T Ctrl + Shift + T # Cambiar de pesta\u00f1a \u2303 TAB Ctrl + TAB Copiar linea Arriba / Abajo # Copiar abajo \u21e7 \u2325 Down Ctrl + Shift + Alt + \u2193 # Copiar Arriba \u21e7 \u2325 Up Ctrl + Shift + Alt + \u2191 Crear multicursor en cualquier lado / Abajo / Arriba / Siguiente ocurrencia # Para crear m\u00e1s de un cursor en sitio espec\u00edfico \u2325 click Alt + click # Si quiero crear m\u00e1s de un cursor pero seleccionando palabras \u2325 doble click Alt + doble click # Crear cursor abajo \u21e7 \u2325 \u2193 Ctrl + Alt + \u2193 # Crear cursor arriba \u21e7 \u2325 \u2191 Ctrl + Alt + \u2191 # Multiples ocurrencias -> Primero selecciono la palabra y luego \u2318 + D Ctrl + D Lowercase / Uppercase # Seleccionar palabra / palabras # Lowercase \u2303 \u21e7 L Ctrl + Shift + L # Uppercase \u2303 \u21e7 U Ctrl + Shift + U Ver definiciones de clases / funciones / etc, en un fichero # Primero es abrir el menu con \u2318 P Ctrl + P # Luego escribir @ # Si queremos que ordene por tipo (clases, funciones, etc), ponemos @: Ir a una l\u00ednea \u2303 G Ctrl + G Markdown Preview # Abrir vista previa \u2318 \u2303 V Ctrl + Shift + V # Abrir vista previa en el lateral \u2318 K, V Ctrl + K, V # Abrir vista previa fija en el lateral Hay que ejecutarlo desde la paleta de comandos o asignarle un atajo Reemplazar s\u00edmbolo # Poner el cursor sobre el nombre de la clase / funcion / etc y apretar F2 # Escribir el sustituto y presionar ENTER atajo ```bash ```","title":"Atajos de teclado"},{"location":"code/python/python-pythonpath/","text":"Editar $PYTHONPATH TODO La soluci\u00f3n ha sido obtenida de aqu\u00ed . Supongamos que estuvieramos creando un proyecto python con la siguiente estructura: proj |-src |-foo.py |-examples |-examplebar |- bar.py Y que el fichero bar.py contiene la siguiente l\u00ednea from src import foo Si desde proj ejecutamos python examples/examplebar/bar.py Lo m\u00e1s probable es que la consola nos d\u00e9 un error como ModuleNotFoundError: No module named 'src' Esto es porque proj no est\u00e1 a\u00f1adido a la variable de entorno $PYTHONPATH . Para ver que contiene podemos abrir la consola de python y ejectuar import sys sys.path Podremos comprobar como nuestro directorio no est\u00e1. Para a\u00f1adir el directorio a la variable hay muchas maneras, pero como yo uso virtualenv con virtualenvwrapper (entre otras cosas), soluci\u00f3n es bien sencilla: Desde la terminal nos vamos al directorio proj . Activamos el virtualenv correspondiente workon ... . Escribimos en la terminal add2virtualenv . . Esto a\u00f1adir\u00e1 el actual directorio a la variable $PYTHONPATH. Y ya est\u00e1, ya podremos ejecutar sin problemas nuestros ejemplos. Si quisieramos deshacer lo que hemos hecho, simplemente en el paso 3. de antes ejecutamos add2virtualenv -d . , y con eso ser\u00eda suficiente.","title":"PYTHONPATH"},{"location":"code/python/python-pythonpath/#editar-pythonpath","text":"TODO La soluci\u00f3n ha sido obtenida de aqu\u00ed . Supongamos que estuvieramos creando un proyecto python con la siguiente estructura: proj |-src |-foo.py |-examples |-examplebar |- bar.py Y que el fichero bar.py contiene la siguiente l\u00ednea from src import foo Si desde proj ejecutamos python examples/examplebar/bar.py Lo m\u00e1s probable es que la consola nos d\u00e9 un error como ModuleNotFoundError: No module named 'src' Esto es porque proj no est\u00e1 a\u00f1adido a la variable de entorno $PYTHONPATH . Para ver que contiene podemos abrir la consola de python y ejectuar import sys sys.path Podremos comprobar como nuestro directorio no est\u00e1. Para a\u00f1adir el directorio a la variable hay muchas maneras, pero como yo uso virtualenv con virtualenvwrapper (entre otras cosas), soluci\u00f3n es bien sencilla: Desde la terminal nos vamos al directorio proj . Activamos el virtualenv correspondiente workon ... . Escribimos en la terminal add2virtualenv . . Esto a\u00f1adir\u00e1 el actual directorio a la variable $PYTHONPATH. Y ya est\u00e1, ya podremos ejecutar sin problemas nuestros ejemplos. Si quisieramos deshacer lo que hemos hecho, simplemente en el paso 3. de antes ejecutamos add2virtualenv -d . , y con eso ser\u00eda suficiente.","title":"Editar $PYTHONPATH"},{"location":"code/python/venv/venv-introduccion/","text":"Entornos virtuales Cuando usas Python en tu ordenador, por ejemplo, si estamos en la carpeta /home/manuel/Code y tienes un fichero Python llamado hola.py , para al ejecutarlo desde la consola se pone python3 hola.py . Esta instrucci\u00f3n lo que hace es buscar el programa Python 3 que posiblemente est\u00e9 /usr/bin/python3 , siendo python3 un enlace a una versi\u00f3n de Python 3 de tu sistema (python3.4, python3.5, python3.6...). Si por ejemplo la versi\u00f3n de Python 3 enlazada es la 3.5, hacer python3 hola.py equivale a /usr/bin/python3.5 /home/manuel/hola.py . Adem\u00e1s, por cada versi\u00f3n de Python instalada en nuestro sistema operativo, podemos contar con su gestor de paquetes PIP . \u00bfQue ocurre si quiero probar cosas muy distintas con Python (por ejemplo desarrollo web, matem\u00e1ticas, etc)? Que al final tengo instalado desde pip una cantidad de paquetes \"basura\", que no voy a usar \u00bfY si quiero usar una versi\u00f3n de una librer\u00eda para un proyecto y otra versi\u00f3n para otro? Pues que tendr\u00eda que estar instalando/desinstalando cada vez que tenga que ponerme con un proyecto u otro. Ya se empieza a ver que esto es un engorro, \u00bfverdad?","title":"Introducci\u00f3n"},{"location":"code/python/venv/venv-introduccion/#entornos-virtuales","text":"Cuando usas Python en tu ordenador, por ejemplo, si estamos en la carpeta /home/manuel/Code y tienes un fichero Python llamado hola.py , para al ejecutarlo desde la consola se pone python3 hola.py . Esta instrucci\u00f3n lo que hace es buscar el programa Python 3 que posiblemente est\u00e9 /usr/bin/python3 , siendo python3 un enlace a una versi\u00f3n de Python 3 de tu sistema (python3.4, python3.5, python3.6...). Si por ejemplo la versi\u00f3n de Python 3 enlazada es la 3.5, hacer python3 hola.py equivale a /usr/bin/python3.5 /home/manuel/hola.py . Adem\u00e1s, por cada versi\u00f3n de Python instalada en nuestro sistema operativo, podemos contar con su gestor de paquetes PIP . \u00bfQue ocurre si quiero probar cosas muy distintas con Python (por ejemplo desarrollo web, matem\u00e1ticas, etc)? Que al final tengo instalado desde pip una cantidad de paquetes \"basura\", que no voy a usar \u00bfY si quiero usar una versi\u00f3n de una librer\u00eda para un proyecto y otra versi\u00f3n para otro? Pues que tendr\u00eda que estar instalando/desinstalando cada vez que tenga que ponerme con un proyecto u otro. Ya se empieza a ver que esto es un engorro, \u00bfverdad?","title":"Entornos virtuales"},{"location":"code/python/venv/venv-pipenv/","text":"Pipenv TODO","title":"pipenv"},{"location":"code/python/venv/venv-pipenv/#pipenv","text":"TODO","title":"Pipenv"},{"location":"code/python/venv/venv-pyenv/","text":"Pyenv -> Distintas versiones de Python en tu sistema TODO Esta informaci\u00f3n est\u00e1 sacada de este gran art\u00edculo de david Naranjo . Los pasos son: Instalaci\u00f3n # 1. Instalar dependencias sudo apt-get install -y make build-essential git libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev # 2. Instalar pyenv en tu sistema y a\u00f1adirlo a tu shell (ZSH en mi caso) curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | zsh # 3. Modificar el fichero de configuraci\u00f3n de la shell (.zshrc en mi caso) export PATH=\"$HOME/.pyenv/bin:$PATH\" eval \"$(pyenv init -)\" eval \"$(pyenv virtualenv-init -)\" # 4. Recargar la shell y usarlo source ~/.zshrc Listar Versiones instalables pyenv install -l Mostrar versiones Python instaladas con Pyenv pyenv versions Instalar una version de Python Para instalar la versi\u00f3n x.xx.x de Python, por ejemplo la 3.5.3, har\u00edamos pyenv install 3.5.3 Esto instalar\u00e1 un interprete de Python 3.5.3 en la carpeta ~/.pyenv/versions/ Definir versi\u00f3n global del sistema Supongamos que quisieramos cambiar la versi\u00f3n de Python Global del sistema. Esto se puede hacer como algo temporal, pero NO SE RECOMIENDA DEJAR CAMBIADA LA VERSION DEL SISTEMA . Veamos como cambiar la versi\u00f3n de global de Python del sistema, y como deshacer el entuerto. Supongamos que mi sistema operativo tiene por ejemplo Python 3.6.6 como versi\u00f3n del sistema, y se encuentra su ejecutable en /usr/bin/python3 Si quisiera usar por ejemplo Python 3.5.3 como versi\u00f3n global, har\u00eda lo siguiente bash pyenv global 3.5.3 Si yo ahora en mi terminal hago bash python3 --version Obtendr\u00e9 3.5.3 como respuesta. Pero este Python no se encuentra en /usr/bin/ , sino que se encuentra en ~/.pyenv/versions/3.5.3/bin Si quiero deshacer este entuerno, en la terminal escribo pyenv global system Ahora si hacemos python3 --version veremos como sale por pantalla 3.6.6 . Esto lo podemos ver si ejecutamos el comando pyenv versions Y tendremos algo asi como * system (set by /home/klin/.pyenv/version) 3.5.3 Donde indica como la versi\u00f3n del sistema es la definida en ~/.pyenv/version , que al ser ninguna, es la del sistema.","title":"pyenv"},{"location":"code/python/venv/venv-pyenv/#pyenv-distintas-versiones-de-python-en-tu-sistema","text":"TODO Esta informaci\u00f3n est\u00e1 sacada de este gran art\u00edculo de david Naranjo . Los pasos son:","title":"Pyenv -&gt; Distintas versiones de Python en tu sistema"},{"location":"code/python/venv/venv-pyenv/#instalacion","text":"# 1. Instalar dependencias sudo apt-get install -y make build-essential git libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev # 2. Instalar pyenv en tu sistema y a\u00f1adirlo a tu shell (ZSH en mi caso) curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | zsh # 3. Modificar el fichero de configuraci\u00f3n de la shell (.zshrc en mi caso) export PATH=\"$HOME/.pyenv/bin:$PATH\" eval \"$(pyenv init -)\" eval \"$(pyenv virtualenv-init -)\" # 4. Recargar la shell y usarlo source ~/.zshrc","title":"Instalaci\u00f3n"},{"location":"code/python/venv/venv-pyenv/#listar-versiones-instalables","text":"pyenv install -l","title":"Listar Versiones instalables"},{"location":"code/python/venv/venv-pyenv/#mostrar-versiones-python-instaladas-con-pyenv","text":"pyenv versions","title":"Mostrar versiones Python instaladas con Pyenv"},{"location":"code/python/venv/venv-pyenv/#instalar-una-version-de-python","text":"Para instalar la versi\u00f3n x.xx.x de Python, por ejemplo la 3.5.3, har\u00edamos pyenv install 3.5.3 Esto instalar\u00e1 un interprete de Python 3.5.3 en la carpeta ~/.pyenv/versions/","title":"Instalar una version de Python"},{"location":"code/python/venv/venv-pyenv/#definir-version-global-del-sistema","text":"Supongamos que quisieramos cambiar la versi\u00f3n de Python Global del sistema. Esto se puede hacer como algo temporal, pero NO SE RECOMIENDA DEJAR CAMBIADA LA VERSION DEL SISTEMA . Veamos como cambiar la versi\u00f3n de global de Python del sistema, y como deshacer el entuerto. Supongamos que mi sistema operativo tiene por ejemplo Python 3.6.6 como versi\u00f3n del sistema, y se encuentra su ejecutable en /usr/bin/python3 Si quisiera usar por ejemplo Python 3.5.3 como versi\u00f3n global, har\u00eda lo siguiente bash pyenv global 3.5.3 Si yo ahora en mi terminal hago bash python3 --version Obtendr\u00e9 3.5.3 como respuesta. Pero este Python no se encuentra en /usr/bin/ , sino que se encuentra en ~/.pyenv/versions/3.5.3/bin Si quiero deshacer este entuerno, en la terminal escribo pyenv global system Ahora si hacemos python3 --version veremos como sale por pantalla 3.6.6 . Esto lo podemos ver si ejecutamos el comando pyenv versions Y tendremos algo asi como * system (set by /home/klin/.pyenv/version) 3.5.3 Donde indica como la versi\u00f3n del sistema es la definida en ~/.pyenv/version , que al ser ninguna, es la del sistema.","title":"Definir versi\u00f3n global del sistema"},{"location":"code/python/venv/venv-virtualenv/","text":"Virtualenv Para solucionar todo esto se cre\u00f3 un concepto llamado \"Entorno virtual\" o Virtualenv . Consiste en decir \"venga quiero tener una versi\u00f3n (aislada del sistema operativo) de Python con su pip para poder cacharrear/trabajar, y cuando me harte la borro y listo\" \u00bfPor qu\u00e9 aislada? Porque el sistema operativo usa Python para sus cosas tambi\u00e9n, as\u00ed que es recomendable siempre, en la medida de lo posible, no tocar nunca el Python del sistema. Toda la informaci\u00f3n est\u00e1 en su web -> Virtualenv , y para instalarlo es tan sencillo como ejecutar pip install virtualenv o pip3 install virtualenv . Una vez instalado, generamos un virtualenv nuevo con la instrucci\u00f3n virtualenv <nombre-del-virtualenv> . Supongamos que quiero hacer un virtualenv para probar desarrollo web con Python 3.6 (siempre que tenga Python 3.6 instalado en el sistema). Pues hago virtualenv web --python=python3.6 , esto me crear\u00e1 una carpeta en el directorio donde est\u00e9 que se llamar\u00e1 web . Dentro de esta carpeta tendr\u00e9 un mont\u00f3n de carpetas y con un python3.6 listo para usarse. Para activar el virtualenv tendremos que ejecutar que se llama activate dentro del virtualenv. Imaginemos que el virtualenv web esta en el directorio /home/manuel/ , pues para activarlo desde la terminal ejecuto source /home/manuel/web/bin/activate . Ahora veremos como en el prompt de la consola (la linea donde ponemos los comandos) delante de todo pone (web) . Eso quiere decir que tenemos el virtualenv activado. si ahora ejecutamos python --version y pip --version veremos que est\u00e1 usando el python y el pip del virtualenv. Para poder salir del virtualenv solo tenemos que ejecutar deactivate y veremos como el (web) desaparece del prompt. Si queremos borrar el virtualenv, tenemos que borrar toda la carpeta web . El problema de esto, es que es un poco engorroso tener que estar poniendo la ruta del activate cada vez que quieras acceder al virtualenv. Para hacerlo un poco-bastante m\u00e1s c\u00f3modo, se cre\u00f3 Virtualenvwrapper .","title":"virtualenv"},{"location":"code/python/venv/venv-virtualenv/#virtualenv","text":"Para solucionar todo esto se cre\u00f3 un concepto llamado \"Entorno virtual\" o Virtualenv . Consiste en decir \"venga quiero tener una versi\u00f3n (aislada del sistema operativo) de Python con su pip para poder cacharrear/trabajar, y cuando me harte la borro y listo\" \u00bfPor qu\u00e9 aislada? Porque el sistema operativo usa Python para sus cosas tambi\u00e9n, as\u00ed que es recomendable siempre, en la medida de lo posible, no tocar nunca el Python del sistema. Toda la informaci\u00f3n est\u00e1 en su web -> Virtualenv , y para instalarlo es tan sencillo como ejecutar pip install virtualenv o pip3 install virtualenv . Una vez instalado, generamos un virtualenv nuevo con la instrucci\u00f3n virtualenv <nombre-del-virtualenv> . Supongamos que quiero hacer un virtualenv para probar desarrollo web con Python 3.6 (siempre que tenga Python 3.6 instalado en el sistema). Pues hago virtualenv web --python=python3.6 , esto me crear\u00e1 una carpeta en el directorio donde est\u00e9 que se llamar\u00e1 web . Dentro de esta carpeta tendr\u00e9 un mont\u00f3n de carpetas y con un python3.6 listo para usarse. Para activar el virtualenv tendremos que ejecutar que se llama activate dentro del virtualenv. Imaginemos que el virtualenv web esta en el directorio /home/manuel/ , pues para activarlo desde la terminal ejecuto source /home/manuel/web/bin/activate . Ahora veremos como en el prompt de la consola (la linea donde ponemos los comandos) delante de todo pone (web) . Eso quiere decir que tenemos el virtualenv activado. si ahora ejecutamos python --version y pip --version veremos que est\u00e1 usando el python y el pip del virtualenv. Para poder salir del virtualenv solo tenemos que ejecutar deactivate y veremos como el (web) desaparece del prompt. Si queremos borrar el virtualenv, tenemos que borrar toda la carpeta web . El problema de esto, es que es un poco engorroso tener que estar poniendo la ruta del activate cada vez que quieras acceder al virtualenv. Para hacerlo un poco-bastante m\u00e1s c\u00f3modo, se cre\u00f3 Virtualenvwrapper .","title":"Virtualenv"},{"location":"code/python/venv/venv-virtualenvwrapper/","text":"Virtualenvwrapper Es una utilidad montada sobre virtualenv que permite trabajar con entornos virtuales de manera mucho m\u00e1s c\u00f3moda. Para instalarlo solo tenemos que hacer pip install virtualenvwrapper o pip3 install virtualenvwrapper con el pip del sistema. Una vez instalado, tenemos que configurarle un par de cosillas m\u00e1s. Dentro del script que usa nuestra terminal .bashrc o .zshrc (est\u00e1 en el directorio home), hay que a\u00f1adir al menos 3 l\u00edneas: Hay que indicarle en que directorio se van a guardar todos los virtualenvs. Por lo general se suele poner la carpeta .virtualenvs en el home. Opcionalmente se le puede indicar en que carpeta vas a tener los programas/c\u00f3digos/proyectos. As\u00ed cuando actives un virtualenv, directamente te va a abrir esa carpeta (lo cual es mucho m\u00e1s c\u00f3modo). Yo por ejemplo voy a usar la carpeta Code . Hay que indicarle donde se encuentra el script de virtualenvwrapper, que se llama virtualenvwrapper.sh . Una manera de saber donde se encuentra en nuestro sistema es ejecutar. Supongamos que lo ha encontrado en la carpeta /usr/local/bin/ . As\u00ed que al final de nuestro fichero /home/manuel/.bashrc o /home/manuel/.zshrc a\u00f1adimos export WORKON_HOME=$HOME/.virtualenvs export PROJECT_HOME=$HOME/Code source /usr/local/bin/virtualenvwrapper.sh Y lo cargamos con source ~/.bashrc o source ~/.zshrc . Una vez lo tengamos cargado, ya podemos trabajar con virtualenvwrapper. Con el comando mkvirtualenv podemos crear un entorno virtualenv de manera m\u00e1s c\u00f3moda. Si quisiera crear el entorno virtual de antes ejecutar\u00edamos mkvirtualenv -p python3.6 web . Esto no solo nos crea el virtualenv web con Python 3.6 sino que adem\u00e1s nos lo abre. Si queremos cerrar el virtualenv usamos deactivate . Para poder ver que entornos virtuales tenemos en el sistema ejecutamos workon . Y si queremos abrir uno en concreto, por ejemplo web , ejecutamos workon web . Si tenemos otro virtualenv que se llame kivy por ejemplo, podemos abrirlo desde el virtualenv web sin problemas. Al hacer workon kivy desde web , esto cerrar\u00e1 el virtualenv web y abrir\u00e1 el de kivy . Cuando queramos borrar un virtualenv usaremos el comando rmvirtualenv . As\u00ed para borrar el virtualenv web hacemos rmvirtualenv web .","title":"virtualenvwrapper"},{"location":"code/python/venv/venv-virtualenvwrapper/#virtualenvwrapper","text":"Es una utilidad montada sobre virtualenv que permite trabajar con entornos virtuales de manera mucho m\u00e1s c\u00f3moda. Para instalarlo solo tenemos que hacer pip install virtualenvwrapper o pip3 install virtualenvwrapper con el pip del sistema. Una vez instalado, tenemos que configurarle un par de cosillas m\u00e1s. Dentro del script que usa nuestra terminal .bashrc o .zshrc (est\u00e1 en el directorio home), hay que a\u00f1adir al menos 3 l\u00edneas: Hay que indicarle en que directorio se van a guardar todos los virtualenvs. Por lo general se suele poner la carpeta .virtualenvs en el home. Opcionalmente se le puede indicar en que carpeta vas a tener los programas/c\u00f3digos/proyectos. As\u00ed cuando actives un virtualenv, directamente te va a abrir esa carpeta (lo cual es mucho m\u00e1s c\u00f3modo). Yo por ejemplo voy a usar la carpeta Code . Hay que indicarle donde se encuentra el script de virtualenvwrapper, que se llama virtualenvwrapper.sh . Una manera de saber donde se encuentra en nuestro sistema es ejecutar. Supongamos que lo ha encontrado en la carpeta /usr/local/bin/ . As\u00ed que al final de nuestro fichero /home/manuel/.bashrc o /home/manuel/.zshrc a\u00f1adimos export WORKON_HOME=$HOME/.virtualenvs export PROJECT_HOME=$HOME/Code source /usr/local/bin/virtualenvwrapper.sh Y lo cargamos con source ~/.bashrc o source ~/.zshrc . Una vez lo tengamos cargado, ya podemos trabajar con virtualenvwrapper. Con el comando mkvirtualenv podemos crear un entorno virtualenv de manera m\u00e1s c\u00f3moda. Si quisiera crear el entorno virtual de antes ejecutar\u00edamos mkvirtualenv -p python3.6 web . Esto no solo nos crea el virtualenv web con Python 3.6 sino que adem\u00e1s nos lo abre. Si queremos cerrar el virtualenv usamos deactivate . Para poder ver que entornos virtuales tenemos en el sistema ejecutamos workon . Y si queremos abrir uno en concreto, por ejemplo web , ejecutamos workon web . Si tenemos otro virtualenv que se llame kivy por ejemplo, podemos abrirlo desde el virtualenv web sin problemas. Al hacer workon kivy desde web , esto cerrar\u00e1 el virtualenv web y abrir\u00e1 el de kivy . Cuando queramos borrar un virtualenv usaremos el comando rmvirtualenv . As\u00ed para borrar el virtualenv web hacemos rmvirtualenv web .","title":"Virtualenvwrapper"},{"location":"code/web/backend/django/django-intermedio/","text":"Django Intermedio TODO Relaci\u00f3n entre modelos Los modelos se pueden conectar, a trav\u00e9s de las claves for\u00e1neas, con dos tipos de relaciones: One-To-Many -> Uno a muchos Relacionas un campo de una tabla con varias tablas. Many-To-Many -> Machos a muchos Relacionas varios campos de una tabla con varias tablas. Ejemplo de una one-to-many con el proyecto anterior. Creamos una app blog que va a contener dos modelos, uno categor\u00eda y otro post: Cada post solo tiene un autor, pero cada autor (usuario) puede tener varias entradas (one-to-many). Si se elimina a un autor, se deben de eliminar todos sus post (en cascada). Cuando la relaci\u00f3n es one-to-many se usa un campo ForeignKey (clave for\u00e1nea). La relaci\u00f3n one-to-many es User - Post . Cada post podr\u00e1 tener varias categor\u00edas, y cada categor\u00eda puede estar en varios post (many-to-many). Cuando la relaci\u00f3n es many-to-many se usa un campo ManyToManyField La relaci\u00f3n many-to-many es Category - Post . As\u00ed que el models.py quedar\u00eda from django.db import models from django.utils.timezone import now from django.contrib.auth.models import User # Create your models here. class Category(models.Model): name = models.CharField(max_length=100, verbose_name='Nombre') created = models.DateTimeField(auto_now_add=True, verbose_name='Creado') updated = models.DateTimeField(auto_now=True, verbose_name='Actualizado') class Meta: verbose_name = 'categor\u00eda' verbose_name_plural = 'categorias' ordering = ['-created'] def __str__(self): return self.name class Post(models.Model): title = models.CharField(max_length=200, verbose_name='T\u00edtulo') content = models.TextField(verbose_name='Contenido') published = models.DateTimeField(default=now, verbose_name='Publicado') image = models.ImageField(upload_to='blog', null=True, blank=True, verbose_name='Imagen') author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='Autor') categories = models.ManyToManyField(Category, related_name='get_posts', verbose_name='Categor\u00edas') created = models.DateTimeField(auto_now_add=True, verbose_name='Creado') updated = models.DateTimeField(auto_now=True, verbose_name='Actualizado') class Meta: verbose_name = 'entrada' verbose_name_plural = 'entradas' ordering = ['-created'] def __str__(self): return self.title Personalizar el Admin El Admin permite ser customizado, para poder tener una mejor UX. Todos los cambios para que surtan efecto tendr\u00e1n que estar hechos en el admin.py , ya sea del proyecto o de cada apps. A\u00f1adir m\u00e1s columnas Igual que ten\u00edamos el campo readonly_fields para mostrar campos ocultos, existe otro comando list_display , al cual se le pasa una tupla con todos las columnas/campos que queremos tener. Ordenar columnas Para poder ordenador columnas se usa ordering , donde se le pasa una tupla donde se ordena en funci\u00f3n de izquierda a derecha (por ejemplo, primero por autor, luego por fecha de publicaci\u00f3n, etc). Formulario de b\u00fasqueda Con search_fields y una tupla con los campos. Hay que tener cuidado porque por ejemplo, si un campo en realidad se busca por subcampos que tiene dentro, hay que especificarlo y sino dar\u00e1 error. Por ejemplo, si quiero buscar por autor, en realidad quiero buscar por su usuario. O si quiero buscar por categor\u00edas, lo que quiero encontrar es el nombre de la catego\u0155ia. La nomemclatura es <campos>__<subcampo> (2 barras bajas). Por ejemplo: ordering =('author__username', 'categories__name') Campos con fechas Para los campos datetime y similares, hay que definir una jerarqu\u00eda de fechas con date_hierarchy y la tupla con los campos. Filtros de b\u00fasqueda Para filtrar por campos se usa list_filter seguida de la tupla de campos. Crear campos propios para los filtros Hay campos que pueden dar problemas, por ejemplo los many-to-many. Para eso, se crea una funci\u00f3n auxiliar que devuelva lo que realmente quiero. Luego reescribo el m\u00e9todo short_description pas\u00e1ndole el nombre del nuevo campo. En la siguiente secci\u00f3n hay un ejemplo final donde se ve esto en el post_categories() . Ejemplo con todo Ejemplo en el admin.py de un blog: from django.contrib import admin from .models import Category, Post # Register your models here. class CategoryAdmin(admin.ModelAdmin): readonly_fields = ('created', 'updated') class PostAdmin(admin.ModelAdmin): readonly_fields = ('created', 'updated') list_display = ('title', 'author', 'published', 'post_categories') ordering = ('author', 'published') search_fields = ('title', 'content', 'author__username', 'categories__name') date_hierarchy = 'published' list_filter = ('author__username', 'categories__name',) def post_categories(self, obj): return ', '.join( [c.name for c in obj.categories.all().order_by('name')]) post_categories.short_description = 'Categorias' admin.site.register(Category, CategoryAdmin) admin.site.register(Post, PostAdmin) Filtros / opciones en los template tags En los template tags se le pueden a\u00f1adir funcionalidades a las variables que se ponen, la forma es {{<mivariable>|<filtro>}} Formatear fechas Por ejemplo para poner un campo fecha en format DD/MM/YYYY podr\u00edamos hacer {{post.published|date:\"SHORT_DATE_FORMAT\"}} A\u00f1adir saltos de l\u00ednea {{post.content|linebreaks}} Bucles for - primera y \u00faltima iteraci\u00f3n Supongamos que queremos sacar todas las catergor\u00edas de un post. Esto es una relaci\u00f3n many-to-many. Si uso {{post.categories}} Devuelve None , porque la query no se ejecuta. Para que esto no pase har\u00edamos {{post.categories.all}} Pero esto devuele algo que no es legible, lo l\u00f3gico ser\u00eda usar un bucle for as\u00ed {% for category in post.categories.all %} {{category.name}} {% endfor %} Lo que pasa que esto no los pone separados por coma. Y si pongo la coma en el bucle, tambi\u00e9n la va a poner en el \u00faltimo elemento. Para que eso no pase existe un campo forloop , que cuenta entre otras cosas con dos variables forloop.first y forloop.last . As\u00ed que ahora podr\u00edamos hacer {% for category in post.categories.all %} {{category.name}}{% if not forloop.last %}, {% end if%} {% endfor %} Pasar par\u00e1metros a las vistas Todos los par\u00e1metros que se pasan en la url, se toman como string , pero se pueden formatear. Si se manda un par\u00e1metro que no existe, debemos lanzar un 404 . Ejemplo: En el urls.py ```python from django.urls import path from . import views urlpatterns = [ path('', views.blog, name='blog'), path('category/ ', views.category, name='category'), ] ``` En el views.py ```python from django.shortcuts import render, get_object_or_404 from .models import Post, Category # Create your views here. def blog(request): template = 'blog/blog.html' context = {'posts': Post.objects.all()} return render(request, template, context) def category(request, category_id): template = 'blog/category.html' category = get_object_or_404(Category, id=category_id) context = {'category': category} return render(request, template, context) ``` Buscar inversamente en relaciones Cuando se tiene una relaci\u00f3n entre campos, se puede buscar tanto en un sentido como en otro. Ve\u00e1moslo con un ejemplo: Tenemos Post relacionado many-to-many con Category . Si quiera buscar todos los post que hay en una categoria podr\u00eda Buscar por cada post y filtrar por categor\u00eda. Buscar por categor\u00eda y sacar todos los posts La segunda opci\u00f3n de b\u00fasqueda es m\u00e1s eficiente y para hacerla tendr\u00eda que hacer html {{category.post_set.all}} Pero esta forma queda bastante poco intuitiva. Para customizar esto usamos el campo related_name en el modelo del models.py python class Post(models.Model): categories = models.ManyToManyField(Category, related_name=\"get_posts\") Y ahora en el template html {{category.get_posts.all}} Procesador de contexto El contexto en programaci\u00f3n se refiere al estado de variables, objetos, etc, y su estado, que hay en un momento concreto. Cuando procesamos una vista, hasta ahora lo que devolvemos es la funci\u00f3n render a la que se le pasa: La request -> Que no deja de ser un objeto / variable que contiene informaci\u00f3n sobre la petici\u00f3n http. El template -> El html (y css+js+media) que tiene que cargar. El contexto -> Es un diccionario con variables que le pasamos para que puedan ser usadas en el template. Hay veces en las que se necesita informaci\u00f3n de una app en distintas apps. Una buena manera es extender el contexto, a\u00f1adiendo esa info de una app para poder ser consumida en las dem\u00e1s. Para hacer eso, usamos lo que se llama el Procesador de contexto . Para crear uno hacemos: En la app de la que queremos compartir su informaci\u00f3n, creamos un archivo llamado processors.py . Creamos dentro una funci\u00f3n, a la que se le pasa la request como par\u00e1metro. Dentro creamos un diccionario con informaci\u00f3n. Devolvemos ese diccionario. En el settings.py debemos de darlo de alta. Vamos a la secci\u00f3n TEMPLATES . Dentro de est\u00e1 OPTIONS , y dentro de esta se encuentra context_processors . A\u00f1adimos lo siguiente '<app>.processors.<funcion>' . Esto se ve m\u00e1s f\u00e1cil con un ejemplo, donde vamos a a\u00f1adir las RRSS a una web. Todas las RRSS est\u00e1n en una app social Crear app social y darla de alta en el settings.py Modificar su models.py . ```python from django.db import models # Create your models here. class Link(models.Model): key = models.SlugField(verbose_name='Nombre clave', max_length=100, unique=True) name = models.CharField(verbose_name='Red social', max_length=200) url = models.URLField(verbose_name='Enlace', max_length=200, null=True, blank=True) created = models.DateTimeField(auto_now_add=True, verbose_name='Creado') updated = models.DateTimeField(auto_now=True, verbose_name='Actualizado') class Meta: verbose_name = 'enlace' verbose_name_plural = 'enlaces' ordering = ['name'] def __str__(self): return self.name ``` Modificar el admin.py , hacer las migraciones y migrarlas ```python from django.contrib import admin from .models import Link # Register your models here. class LinkAdmin(admin.ModelAdmin): readonly_fields = ('created', 'updated') admin.site.register(Link, LinkAdmin) ``` Como no hay vista, ni template pasamos directamente a la fase de procesador de contexto. Crear el processor.py ```python from .models import Link def ctx_dict(request): ctx = {} for link in Link.objects.all(): ctx[link.key] = link.url return ctx ``` Darlo de alta en el settings.py Arrancar el server, entrar al Admin y crear un par de objetos con por ejemplo las claves LINK_FACEBOOK, LINK_TWITTER y LINK_INSTAGRAM. Modificar el base.html html <!-- Pi\u00e9 de p\u00e1gina --> <footer class=\"footer text-faded text-center py-5\"> <div class=\"container\"> <p class=\"m-0\"> {% if LINK_TWITTER %} <a href=\"{{LINK_TWITTER}}\" class=\"link\"> <span class=\"fa-stack fa-lg\"> <i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-twitter fa-stack-1x fa-inverse\"></i> </span> </a> {% endif %} {% if LINK_FACEBOOK %} <a href=\"{{LINK_FACEBOOK}}\" class=\"link\"> <span class=\"fa-stack fa-lg\"> <i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-facebook fa-stack-1x fa-inverse\"></i> </span> </a> {% endif %} {% if LINK_INSTAGRAM %} <a href=\"{{LINK_INSTAGRAM}}\" class=\"link\"> <span class=\"fa-stack fa-lg\"> <i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-instagram fa-stack-1x fa-inverse\"></i> </span> </a> {% endif %} </p> <p class=\"m-0 mbt\"> <a href=\"{% url 'sample' %}\" class=\"link\">Pol\u00edtica de privacidad</a> \u00b7 <a href=\"{% url 'sample' %}\" class=\"link\">Aviso legal</a> \u00b7 <a href=\"{% url 'sample' %}\" class=\"link\">Cookies</a> </p> <p class=\"m-0 mbt1\">&copy; La Caffettiera 2018</p> </div> </footer> Template Tags propios Es una alternativa al Procesador de Contexto m\u00e1s flexible, pero tambi\u00e9n consume m\u00e1s recursos: En la app que su informaci\u00f3n sea compartida hay que crear: Carpeta templatetags Dentro un __init__.py Un fichero python, ficherotags.py , para los template tags . El ficherotags.py debe contener los template de django y el modelo de p\u00e1ginas python from django import template from page.models import Page Luego hay que crear un registro de la librer\u00eda de templates python register = template.Library() Ahora creamos una funci\u00f3n, <nuevotag> , con el decorador @register.simple_tag . En esa funci\u00f3n vamos a poder jugar con las p\u00e1ginas, con por ejemplo Page.objects.all() Para poder usar <nuevotag> en un template hay que cargar el fichero ficherotags.py . Ejemplo: Tenemos los t\u00edpicos links en el footer sobre las cookies y dem\u00e1s. Creamos una app pages models.py ```python from django.db import models # Create your models here. class Page(models.Model): title = models.CharField(verbose_name='T\u00edtulo', max_length=200) content = models.TextField(verbose_name='Contenido') created = models.DateTimeField(auto_now_add=True, verbose_name='Creado') updated = models.DateTimeField(auto_now=True, verbose_name='Actualizado') class Meta: verbose_name = 'p\u00e1gina' verbose_name_plural = 'p\u00e1ginas' ordering = ['title'] def __str__(self): return self.title ``` views.py ```python from django.shortcuts import render, get_object_or_404 from .models import Page # Create your views here. def page(request, page_id): page = get_object_or_404(Page, id=page_id) template = 'pages/sample.html' context = {'page': page} return render(request, template, context) ``` urls.py Proyecto ```python from django.urls import path, include urlpatterns = [ ... # Path del pages path('page/', include('pages.urls')), ... ] ``` App pages ```python from django.urls import path from . import views urlpatterns = [ ... path(' /', views.page, name='page'), ... ] ``` pages/templatetags/pages_extra.py ```python from django import template from pages.models import Page register = template.Library() @register.simple_tag def get_page_list(): pages = Page.objects.all() return pages ``` core/templates/core/base.html html {% load pages_extras %} {% get_page_list as page_list %} {% for page in page_list %} <a href=\"{% url 'page' page.id %}\" class=\"link\">{{page.title}}</a> {% if not forloop.last %}.{% endif %} {% endfor %} Ordenaci\u00f3n directa de p\u00e1ginas Si quisiera dar cierto orden a un tipo de elementos de una app, debemos de: En el models.py a\u00f1adir un campo por ejemplo ```python class Page(models.Model): ... order = models.SmallIntegerField(verbose_name='Orden', default=0) class Meta: ordering = ['order'] ``` En el admin.py python class PageAdmin(models.ModelAdmin): ... list_display('order') Ahora en el Admin puedo administrar pesos para obtener esa ordenaci\u00f3n. Edici\u00f3n directa de p\u00e1ginas En el propio procesador de contexto contamos con el usuario de la sesi\u00f3n en django.contrib.auth.context_processors.auth . As\u00ed que si queremos que ciertas partes aparezcan si un usuario est\u00e1 autenticado, podemos hacer en el template base {% if user.is_authenticated %} <p><a href=\"{% url 'admin:<app>_<modelo>_<accion>' <objeto-id>%}\">Editar</a></p> {% endif %} Con el ejemplo anterior ser\u00eda base.html {% if user.is_authenticated %} <p><a href=\"{% url 'admin:pages_page_change' page.id %}\">Editar</a></p> {% endif %} Editor WYSIWYG en el Admin Para a\u00f1adir un editor wysiswyg en el Admin podemos usar el ckeditor Instalar ckeditor bash pip install django-ckeditor A\u00f1adirlo en las apps instaladas -> settings.py ```python INSTALLED_APPS = [ ... 'ckeditor', ] 3. En el `models.py` de la app donde queremos tener el campo con el editor: 1. Importamos `ckeditor.fields.RichTextField` 2. Modificamos el campo deseado 3. Hacemos las migraciones ```python ... from ckeditor.fields import RichTextField class Page(models.Model): ... content = RichTextField(verbose_name='Contenido') ``` Si queremos redefinir la barra del editor, en el `settings.py` al final a\u00f1adimos ```python # Ckeditor CKEDITOR_CONFIGS = { 'default': { 'toolbar': 'Basic', } } El modo 'Basic' es el m\u00e1s simple, pero podemos poner None si queremos tener todas las opciones. Repo Oficial -> aqu\u00ed Docu Oficial -> aqu\u00ed En su repo nos viene de ejemplo esto CKEDITOR_CONFIGS = { 'default': { 'toolbar': 'Custom', 'toolbar_Custom': [ ['Bold', 'Italic', 'Underline'], ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'], ['Link', 'Unlink'], ['RemoveFormat', 'Source'] ] } } Para que el contenido creado en el editor se vea sin problemas en el template, tenemos que ponerle el filtro safe al tag donde est\u00e9 este contenido. En el ejemplo anterior en miproyecto/pages/templates/pages/sample.html {{page.content|safe}} Formularios Para usar formularios en una app: Crear en la app forms.py Al igual que con los modelos: Importamos el \"modelo\" -> from django import forms Creamos una clase que herede del \"modelo\" -> class MiClaseForm(forms.Form): Generamos los campos del formulario, por ejemplo python name = forms.CharField(label='Nombre', required=True) email = forms.EmailField(label='Email', required=True) content = forms.CharField(label='Contenido', required=True, widget=forms.Textarea) En el views.py importamos el o los formularios, y los a\u00f1adimos al contexto de la vista. ```python from django.shortcuts import render from .forms import MiClaseForm def mivista(request): template = 'miapp/miapp.html' context = { 'form': MiClaseForm(), } return render(request, template, context) 4. En el template lo dibujamos: * Simplemente con `{{form}}` ya lo saca, pero totalmente desformateado. * Podemos darle un formato m\u00e1s como p\u00e1rrafos `{{form.as_p}}`. * Como si fuera una lista ```html <ul> {{form.as_ul}} </ul> ``` * Como una tabla ```html <table> {{form.as_table}} </table> ``` 5. Para a\u00f1adirle el bot\u00f3n de enviar: 1. Metemos el formulario dentro de un `<form>` 2. En el par\u00e1metro `action` ser\u00e1 la web donde ir / acci\u00f3n a hacer cuando se env\u00ede el formulario 3. En el `method` el m\u00e9todo para enviar el formulario: * `POST` es el m\u00e1s recomendado. * `GET` no se recomienda. 4. Dentro introducimos: 1. Al principio `{% csrf_token %}` por motivos de seguridad. 2. Al final un `<input>`: * Con `type=\"submit\"` * Y un texto a mostrar `value=\"Enviar\"`. 6. Validar si el formulario es correcto: 1. En la misma vista del `views.py` miramos si accedemos con POST con `request.method == 'POST'` 2. Recupero el formulario con `mi_formulario = MiClaseForm(data=request.POST)` 3. Compruebo si es valido con `mi_forumulario.is_valid()` 4. Formateo los valores por defecto si alguno est\u00e1 vac\u00edo 5. Hago una redirecci\u00f3n con la funci\u00f3n `django.shortcuts.redirect` * Se recomiendo usar la funci\u00f3n `django.urls.reverse` para la redirecci\u00f3n Ejemplo de la app `contact`: * `forms.py` ```python from django import forms class ContactForm(forms.Form): name = forms.CharField(label='Nombre', required=True) email = forms.EmailField(label='Email', required=True) content = forms.CharField(label='Contenido', required=True, widget=forms.Textarea) ``` * `views.py` ```python from django.shortcuts import render, redirect from django.urls import reverse from .forms import ContactForm # Create your views here. def contact(request): if request.method == 'POST': contact_form = ContactForm(data=request.POST) if contact_form.is_valid(): name = request.POST.get('name', '') email = request.POST.get('email', '') content = request.POST.get('content', '') return redirect(reverse('contact') + '?OK') template = 'contact/contact.html' context = { 'form': ContactForm(), } return render(request, template, context) ``` * `contact.html` ```html <!-- Formulario de contacto --> {% if 'OK' in request.GET %} <p><strong>Su mensaje se ha reenviado correctamente</strong></p> {% endif %} <form action=\"\" method=\"POST\"> {% csrf_token %} <table> {{form.as_table}} </table> <input type=\"submit\" value=\"Enviar\"> </form> ``` ### Maquetar formulario Para poder dar un aspecto visual propio a un formulario es muy sencillo: 1. Tenemos que volver a tener en nuestro `form`: 1. Sus par\u00e1metros `action` + `method` 2. El `{% csrf_token %}` al principio 3. El `<input type='submit' value='Enviar'>` al final 2. En cada campo: 1. Poner el campo del formulario 2. A\u00f1adirle despues al final el `{{form.<campo>.errors}}` 3. Modificar los estilos de cada campo en el `forms.py`: * Dentro de cada campo modificamos el par\u00e1metro `widget`. * A este se le pasa un tipo de campo * Dentro de este tipo, generamos los elementos CSS dentro del diccionario `attrs`. * Podemos ajustar tambi\u00e9n el tama\u00f1o con `min_length` o `max_length`. Ejemplo * `contact.html` app contact ```html <!-- Formulario de contacto --> {% if 'OK' in request.GET %} <p><strong>Su mensaje se ha reenviado correctamente</strong></p> {% endif %} <form action=\"\" method=\"POST\"> {% csrf_token %} <div class=\"form-group\"> <label>Nombre *</label> <div class=\"input-group\"> {{form.name}} </div> {{form.name.errors}} </div> <div class=\"form-group\"> <label>Email *</label> <div class=\"input-group\"> {{form.email}} </div> {{form.email.errors}} </div> <div class=\"form-group\"> <label>Mensaje *</label> <div class=\"input-group\"> {{form.content}} </div> {{form.content.errors}} </div> <div class=\"text-center\"> <input type=\"submit\" class=\"btn btn-primary btn-block py-2\" value=\"Enviar\"> </div> </form> ``` * `forms.py` app contact ```python from django import forms class ContactForm(forms.Form): name = forms.CharField(label='Nombre', required=True, widget=forms.TextInput( attrs={ 'class': 'form-control', 'placeholder': 'Escribe tu nombre' } ), min_length=3, max_length=100) email = forms.EmailField(label='Email', required=True, widget=forms.EmailInput( attrs={ 'class': 'form-control', 'placeholder': 'Escribe tu email' } ), min_length=3, max_length=100) content = forms.CharField(label='Contenido', required=True, widget=forms.Textarea( attrs={ 'class': 'form-control', 'rows': 3, 'placeholder': 'Escribe tu mensaje' } ), min_length=10, max_length=1000) ``` ## Enviar emails Para poder enviar emails hay configurar el correo, y existen muchas opciones. En este ejemplo para pruebas uso [mailtrap.io](mailtrap.io). Dentro de la `demo_inbox` podemos buscar la configuraci\u00f3n para Django. La copiamos y la pegamos al final del `settings.py` ```python # Email config EMAIL_HOST = 'smtp.mailtrap.io' EMAIL_HOST_USER = '9e9652ad27c050' EMAIL_HOST_PASSWORD = 'a4e2f4e19b02dc' EMAIL_PORT = '2525' Para enviar el correo, el views.py de la app correspondiente: Importamos la django.core.mail.EmailMessage Dentro de esta tenemos que poner: Asunto Cuerpo Email de origen Email de destino reply_to=[<objeto-EmailMessage>] Ejemplo con views.py de la app Contact anterior from django.shortcuts import render, redirect from django.urls import reverse from django.core.mail import EmailMessage from .forms import ContactForm # Create your views here. def contact(request): if request.method == 'POST': contact_form = ContactForm(data=request.POST) if contact_form.is_valid(): name = request.POST.get('name', '') email = request.POST.get('email', '') content = request.POST.get('content', '') mail = EmailMessage( 'MiAppDjango: Hola', f'De {name} <{email}>\\n\\nEscribio:\\n\\n{content}', 'noreply@inbox.mailtrap.io', ['tuemail@email.com'], reply_to=[email] ) try: mail.send() except: return redirect(reverse('contact') + '?FAIL') else: return redirect(reverse('contact') + '?OK') template = 'contact/contact.html' context = { 'form': ContactForm(), } return render(request, template, context) Grupos, Usuarios y permisos Todo se hace desde el Admin y es muy intuitivo. Lo l\u00f3gico es crear primero un grupo con unos permisos concretos (app que puede ver, editar, borrar). Luego se crea un usuario con su nombre y contrase\u00f1a. Si queremos que pueda acceder al admin debemos a\u00f1adirlo como staff . Por \u00faltimo para ver si todo funciona, accedemos al admin con el nuevo usuario. Si hay campos que queremos que aparezcan como solo lectura para cierto grupo, podemos editar el admin.py de la app con: Creamos el m\u00e9todo def get_readonly_fields(self, request, obj=None) Dentro filtramos si el usuario pertenece a un grupo o no Si pertenece a un grupo devolvemos unos readonly Si no pertenece devolvemos otros Ejemplo: Para una app social hemos creado un grupo llamado Personal . No queremos que pueda editar los campos key y name que usaremos para las RRSS. Su admin.py queda como ```python from django.contrib import admin from .models import Link # Register your models here. class LinkAdmin(admin.ModelAdmin): readonly_fields = ('created', 'updated') def get_readonly_fields(self, request, obj=None): if request.user.groups.filter(name='Personal').exists(): return ('created', 'updated', 'key', 'name') else: return ('created', 'updated') admin.site.register(Link, LinkAdmin) ``` Hacemos las migraciones.","title":"Intermedio"},{"location":"code/web/backend/django/django-intermedio/#django-intermedio","text":"TODO","title":"Django Intermedio"},{"location":"code/web/backend/django/django-intermedio/#relacion-entre-modelos","text":"Los modelos se pueden conectar, a trav\u00e9s de las claves for\u00e1neas, con dos tipos de relaciones: One-To-Many -> Uno a muchos Relacionas un campo de una tabla con varias tablas. Many-To-Many -> Machos a muchos Relacionas varios campos de una tabla con varias tablas. Ejemplo de una one-to-many con el proyecto anterior. Creamos una app blog que va a contener dos modelos, uno categor\u00eda y otro post: Cada post solo tiene un autor, pero cada autor (usuario) puede tener varias entradas (one-to-many). Si se elimina a un autor, se deben de eliminar todos sus post (en cascada). Cuando la relaci\u00f3n es one-to-many se usa un campo ForeignKey (clave for\u00e1nea). La relaci\u00f3n one-to-many es User - Post . Cada post podr\u00e1 tener varias categor\u00edas, y cada categor\u00eda puede estar en varios post (many-to-many). Cuando la relaci\u00f3n es many-to-many se usa un campo ManyToManyField La relaci\u00f3n many-to-many es Category - Post . As\u00ed que el models.py quedar\u00eda from django.db import models from django.utils.timezone import now from django.contrib.auth.models import User # Create your models here. class Category(models.Model): name = models.CharField(max_length=100, verbose_name='Nombre') created = models.DateTimeField(auto_now_add=True, verbose_name='Creado') updated = models.DateTimeField(auto_now=True, verbose_name='Actualizado') class Meta: verbose_name = 'categor\u00eda' verbose_name_plural = 'categorias' ordering = ['-created'] def __str__(self): return self.name class Post(models.Model): title = models.CharField(max_length=200, verbose_name='T\u00edtulo') content = models.TextField(verbose_name='Contenido') published = models.DateTimeField(default=now, verbose_name='Publicado') image = models.ImageField(upload_to='blog', null=True, blank=True, verbose_name='Imagen') author = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='Autor') categories = models.ManyToManyField(Category, related_name='get_posts', verbose_name='Categor\u00edas') created = models.DateTimeField(auto_now_add=True, verbose_name='Creado') updated = models.DateTimeField(auto_now=True, verbose_name='Actualizado') class Meta: verbose_name = 'entrada' verbose_name_plural = 'entradas' ordering = ['-created'] def __str__(self): return self.title","title":"Relaci\u00f3n entre modelos"},{"location":"code/web/backend/django/django-intermedio/#personalizar-el-admin","text":"El Admin permite ser customizado, para poder tener una mejor UX. Todos los cambios para que surtan efecto tendr\u00e1n que estar hechos en el admin.py , ya sea del proyecto o de cada apps.","title":"Personalizar el Admin"},{"location":"code/web/backend/django/django-intermedio/#anadir-mas-columnas","text":"Igual que ten\u00edamos el campo readonly_fields para mostrar campos ocultos, existe otro comando list_display , al cual se le pasa una tupla con todos las columnas/campos que queremos tener.","title":"A\u00f1adir m\u00e1s columnas"},{"location":"code/web/backend/django/django-intermedio/#ordenar-columnas","text":"Para poder ordenador columnas se usa ordering , donde se le pasa una tupla donde se ordena en funci\u00f3n de izquierda a derecha (por ejemplo, primero por autor, luego por fecha de publicaci\u00f3n, etc).","title":"Ordenar columnas"},{"location":"code/web/backend/django/django-intermedio/#formulario-de-busqueda","text":"Con search_fields y una tupla con los campos. Hay que tener cuidado porque por ejemplo, si un campo en realidad se busca por subcampos que tiene dentro, hay que especificarlo y sino dar\u00e1 error. Por ejemplo, si quiero buscar por autor, en realidad quiero buscar por su usuario. O si quiero buscar por categor\u00edas, lo que quiero encontrar es el nombre de la catego\u0155ia. La nomemclatura es <campos>__<subcampo> (2 barras bajas). Por ejemplo: ordering =('author__username', 'categories__name')","title":"Formulario de b\u00fasqueda"},{"location":"code/web/backend/django/django-intermedio/#campos-con-fechas","text":"Para los campos datetime y similares, hay que definir una jerarqu\u00eda de fechas con date_hierarchy y la tupla con los campos.","title":"Campos con fechas"},{"location":"code/web/backend/django/django-intermedio/#filtros-de-busqueda","text":"Para filtrar por campos se usa list_filter seguida de la tupla de campos.","title":"Filtros de b\u00fasqueda"},{"location":"code/web/backend/django/django-intermedio/#crear-campos-propios-para-los-filtros","text":"Hay campos que pueden dar problemas, por ejemplo los many-to-many. Para eso, se crea una funci\u00f3n auxiliar que devuelva lo que realmente quiero. Luego reescribo el m\u00e9todo short_description pas\u00e1ndole el nombre del nuevo campo. En la siguiente secci\u00f3n hay un ejemplo final donde se ve esto en el post_categories() .","title":"Crear campos propios para los filtros"},{"location":"code/web/backend/django/django-intermedio/#ejemplo-con-todo","text":"Ejemplo en el admin.py de un blog: from django.contrib import admin from .models import Category, Post # Register your models here. class CategoryAdmin(admin.ModelAdmin): readonly_fields = ('created', 'updated') class PostAdmin(admin.ModelAdmin): readonly_fields = ('created', 'updated') list_display = ('title', 'author', 'published', 'post_categories') ordering = ('author', 'published') search_fields = ('title', 'content', 'author__username', 'categories__name') date_hierarchy = 'published' list_filter = ('author__username', 'categories__name',) def post_categories(self, obj): return ', '.join( [c.name for c in obj.categories.all().order_by('name')]) post_categories.short_description = 'Categorias' admin.site.register(Category, CategoryAdmin) admin.site.register(Post, PostAdmin)","title":"Ejemplo con todo"},{"location":"code/web/backend/django/django-intermedio/#filtros-opciones-en-los-template-tags","text":"En los template tags se le pueden a\u00f1adir funcionalidades a las variables que se ponen, la forma es {{<mivariable>|<filtro>}}","title":"Filtros / opciones en los template tags"},{"location":"code/web/backend/django/django-intermedio/#formatear-fechas","text":"Por ejemplo para poner un campo fecha en format DD/MM/YYYY podr\u00edamos hacer {{post.published|date:\"SHORT_DATE_FORMAT\"}}","title":"Formatear fechas"},{"location":"code/web/backend/django/django-intermedio/#anadir-saltos-de-linea","text":"{{post.content|linebreaks}}","title":"A\u00f1adir saltos de l\u00ednea"},{"location":"code/web/backend/django/django-intermedio/#bucles-for-primera-y-ultima-iteracion","text":"Supongamos que queremos sacar todas las catergor\u00edas de un post. Esto es una relaci\u00f3n many-to-many. Si uso {{post.categories}} Devuelve None , porque la query no se ejecuta. Para que esto no pase har\u00edamos {{post.categories.all}} Pero esto devuele algo que no es legible, lo l\u00f3gico ser\u00eda usar un bucle for as\u00ed {% for category in post.categories.all %} {{category.name}} {% endfor %} Lo que pasa que esto no los pone separados por coma. Y si pongo la coma en el bucle, tambi\u00e9n la va a poner en el \u00faltimo elemento. Para que eso no pase existe un campo forloop , que cuenta entre otras cosas con dos variables forloop.first y forloop.last . As\u00ed que ahora podr\u00edamos hacer {% for category in post.categories.all %} {{category.name}}{% if not forloop.last %}, {% end if%} {% endfor %}","title":"Bucles for - primera y \u00faltima iteraci\u00f3n"},{"location":"code/web/backend/django/django-intermedio/#pasar-parametros-a-las-vistas","text":"Todos los par\u00e1metros que se pasan en la url, se toman como string , pero se pueden formatear. Si se manda un par\u00e1metro que no existe, debemos lanzar un 404 . Ejemplo: En el urls.py ```python from django.urls import path from . import views urlpatterns = [ path('', views.blog, name='blog'), path('category/ ', views.category, name='category'), ] ``` En el views.py ```python from django.shortcuts import render, get_object_or_404 from .models import Post, Category # Create your views here. def blog(request): template = 'blog/blog.html' context = {'posts': Post.objects.all()} return render(request, template, context) def category(request, category_id): template = 'blog/category.html' category = get_object_or_404(Category, id=category_id) context = {'category': category} return render(request, template, context) ```","title":"Pasar par\u00e1metros a las vistas"},{"location":"code/web/backend/django/django-intermedio/#buscar-inversamente-en-relaciones","text":"Cuando se tiene una relaci\u00f3n entre campos, se puede buscar tanto en un sentido como en otro. Ve\u00e1moslo con un ejemplo: Tenemos Post relacionado many-to-many con Category . Si quiera buscar todos los post que hay en una categoria podr\u00eda Buscar por cada post y filtrar por categor\u00eda. Buscar por categor\u00eda y sacar todos los posts La segunda opci\u00f3n de b\u00fasqueda es m\u00e1s eficiente y para hacerla tendr\u00eda que hacer html {{category.post_set.all}} Pero esta forma queda bastante poco intuitiva. Para customizar esto usamos el campo related_name en el modelo del models.py python class Post(models.Model): categories = models.ManyToManyField(Category, related_name=\"get_posts\") Y ahora en el template html {{category.get_posts.all}}","title":"Buscar inversamente en relaciones"},{"location":"code/web/backend/django/django-intermedio/#procesador-de-contexto","text":"El contexto en programaci\u00f3n se refiere al estado de variables, objetos, etc, y su estado, que hay en un momento concreto. Cuando procesamos una vista, hasta ahora lo que devolvemos es la funci\u00f3n render a la que se le pasa: La request -> Que no deja de ser un objeto / variable que contiene informaci\u00f3n sobre la petici\u00f3n http. El template -> El html (y css+js+media) que tiene que cargar. El contexto -> Es un diccionario con variables que le pasamos para que puedan ser usadas en el template. Hay veces en las que se necesita informaci\u00f3n de una app en distintas apps. Una buena manera es extender el contexto, a\u00f1adiendo esa info de una app para poder ser consumida en las dem\u00e1s. Para hacer eso, usamos lo que se llama el Procesador de contexto . Para crear uno hacemos: En la app de la que queremos compartir su informaci\u00f3n, creamos un archivo llamado processors.py . Creamos dentro una funci\u00f3n, a la que se le pasa la request como par\u00e1metro. Dentro creamos un diccionario con informaci\u00f3n. Devolvemos ese diccionario. En el settings.py debemos de darlo de alta. Vamos a la secci\u00f3n TEMPLATES . Dentro de est\u00e1 OPTIONS , y dentro de esta se encuentra context_processors . A\u00f1adimos lo siguiente '<app>.processors.<funcion>' . Esto se ve m\u00e1s f\u00e1cil con un ejemplo, donde vamos a a\u00f1adir las RRSS a una web. Todas las RRSS est\u00e1n en una app social Crear app social y darla de alta en el settings.py Modificar su models.py . ```python from django.db import models # Create your models here. class Link(models.Model): key = models.SlugField(verbose_name='Nombre clave', max_length=100, unique=True) name = models.CharField(verbose_name='Red social', max_length=200) url = models.URLField(verbose_name='Enlace', max_length=200, null=True, blank=True) created = models.DateTimeField(auto_now_add=True, verbose_name='Creado') updated = models.DateTimeField(auto_now=True, verbose_name='Actualizado') class Meta: verbose_name = 'enlace' verbose_name_plural = 'enlaces' ordering = ['name'] def __str__(self): return self.name ``` Modificar el admin.py , hacer las migraciones y migrarlas ```python from django.contrib import admin from .models import Link # Register your models here. class LinkAdmin(admin.ModelAdmin): readonly_fields = ('created', 'updated') admin.site.register(Link, LinkAdmin) ``` Como no hay vista, ni template pasamos directamente a la fase de procesador de contexto. Crear el processor.py ```python from .models import Link def ctx_dict(request): ctx = {} for link in Link.objects.all(): ctx[link.key] = link.url return ctx ``` Darlo de alta en el settings.py Arrancar el server, entrar al Admin y crear un par de objetos con por ejemplo las claves LINK_FACEBOOK, LINK_TWITTER y LINK_INSTAGRAM. Modificar el base.html html <!-- Pi\u00e9 de p\u00e1gina --> <footer class=\"footer text-faded text-center py-5\"> <div class=\"container\"> <p class=\"m-0\"> {% if LINK_TWITTER %} <a href=\"{{LINK_TWITTER}}\" class=\"link\"> <span class=\"fa-stack fa-lg\"> <i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-twitter fa-stack-1x fa-inverse\"></i> </span> </a> {% endif %} {% if LINK_FACEBOOK %} <a href=\"{{LINK_FACEBOOK}}\" class=\"link\"> <span class=\"fa-stack fa-lg\"> <i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-facebook fa-stack-1x fa-inverse\"></i> </span> </a> {% endif %} {% if LINK_INSTAGRAM %} <a href=\"{{LINK_INSTAGRAM}}\" class=\"link\"> <span class=\"fa-stack fa-lg\"> <i class=\"fa fa-circle fa-stack-2x\"></i> <i class=\"fa fa-instagram fa-stack-1x fa-inverse\"></i> </span> </a> {% endif %} </p> <p class=\"m-0 mbt\"> <a href=\"{% url 'sample' %}\" class=\"link\">Pol\u00edtica de privacidad</a> \u00b7 <a href=\"{% url 'sample' %}\" class=\"link\">Aviso legal</a> \u00b7 <a href=\"{% url 'sample' %}\" class=\"link\">Cookies</a> </p> <p class=\"m-0 mbt1\">&copy; La Caffettiera 2018</p> </div> </footer>","title":"Procesador de contexto"},{"location":"code/web/backend/django/django-intermedio/#template-tags-propios","text":"Es una alternativa al Procesador de Contexto m\u00e1s flexible, pero tambi\u00e9n consume m\u00e1s recursos: En la app que su informaci\u00f3n sea compartida hay que crear: Carpeta templatetags Dentro un __init__.py Un fichero python, ficherotags.py , para los template tags . El ficherotags.py debe contener los template de django y el modelo de p\u00e1ginas python from django import template from page.models import Page Luego hay que crear un registro de la librer\u00eda de templates python register = template.Library() Ahora creamos una funci\u00f3n, <nuevotag> , con el decorador @register.simple_tag . En esa funci\u00f3n vamos a poder jugar con las p\u00e1ginas, con por ejemplo Page.objects.all() Para poder usar <nuevotag> en un template hay que cargar el fichero ficherotags.py . Ejemplo: Tenemos los t\u00edpicos links en el footer sobre las cookies y dem\u00e1s. Creamos una app pages models.py ```python from django.db import models # Create your models here. class Page(models.Model): title = models.CharField(verbose_name='T\u00edtulo', max_length=200) content = models.TextField(verbose_name='Contenido') created = models.DateTimeField(auto_now_add=True, verbose_name='Creado') updated = models.DateTimeField(auto_now=True, verbose_name='Actualizado') class Meta: verbose_name = 'p\u00e1gina' verbose_name_plural = 'p\u00e1ginas' ordering = ['title'] def __str__(self): return self.title ``` views.py ```python from django.shortcuts import render, get_object_or_404 from .models import Page # Create your views here. def page(request, page_id): page = get_object_or_404(Page, id=page_id) template = 'pages/sample.html' context = {'page': page} return render(request, template, context) ``` urls.py Proyecto ```python from django.urls import path, include urlpatterns = [ ... # Path del pages path('page/', include('pages.urls')), ... ] ``` App pages ```python from django.urls import path from . import views urlpatterns = [ ... path(' /', views.page, name='page'), ... ] ``` pages/templatetags/pages_extra.py ```python from django import template from pages.models import Page register = template.Library() @register.simple_tag def get_page_list(): pages = Page.objects.all() return pages ``` core/templates/core/base.html html {% load pages_extras %} {% get_page_list as page_list %} {% for page in page_list %} <a href=\"{% url 'page' page.id %}\" class=\"link\">{{page.title}}</a> {% if not forloop.last %}.{% endif %} {% endfor %}","title":"Template Tags propios"},{"location":"code/web/backend/django/django-intermedio/#ordenacion-directa-de-paginas","text":"Si quisiera dar cierto orden a un tipo de elementos de una app, debemos de: En el models.py a\u00f1adir un campo por ejemplo ```python class Page(models.Model): ... order = models.SmallIntegerField(verbose_name='Orden', default=0) class Meta: ordering = ['order'] ``` En el admin.py python class PageAdmin(models.ModelAdmin): ... list_display('order') Ahora en el Admin puedo administrar pesos para obtener esa ordenaci\u00f3n.","title":"Ordenaci\u00f3n directa de p\u00e1ginas"},{"location":"code/web/backend/django/django-intermedio/#edicion-directa-de-paginas","text":"En el propio procesador de contexto contamos con el usuario de la sesi\u00f3n en django.contrib.auth.context_processors.auth . As\u00ed que si queremos que ciertas partes aparezcan si un usuario est\u00e1 autenticado, podemos hacer en el template base {% if user.is_authenticated %} <p><a href=\"{% url 'admin:<app>_<modelo>_<accion>' <objeto-id>%}\">Editar</a></p> {% endif %} Con el ejemplo anterior ser\u00eda base.html {% if user.is_authenticated %} <p><a href=\"{% url 'admin:pages_page_change' page.id %}\">Editar</a></p> {% endif %}","title":"Edici\u00f3n directa de p\u00e1ginas"},{"location":"code/web/backend/django/django-intermedio/#editor-wysiwyg-en-el-admin","text":"Para a\u00f1adir un editor wysiswyg en el Admin podemos usar el ckeditor Instalar ckeditor bash pip install django-ckeditor A\u00f1adirlo en las apps instaladas -> settings.py ```python INSTALLED_APPS = [ ... 'ckeditor', ] 3. En el `models.py` de la app donde queremos tener el campo con el editor: 1. Importamos `ckeditor.fields.RichTextField` 2. Modificamos el campo deseado 3. Hacemos las migraciones ```python ... from ckeditor.fields import RichTextField class Page(models.Model): ... content = RichTextField(verbose_name='Contenido') ``` Si queremos redefinir la barra del editor, en el `settings.py` al final a\u00f1adimos ```python # Ckeditor CKEDITOR_CONFIGS = { 'default': { 'toolbar': 'Basic', } } El modo 'Basic' es el m\u00e1s simple, pero podemos poner None si queremos tener todas las opciones. Repo Oficial -> aqu\u00ed Docu Oficial -> aqu\u00ed En su repo nos viene de ejemplo esto CKEDITOR_CONFIGS = { 'default': { 'toolbar': 'Custom', 'toolbar_Custom': [ ['Bold', 'Italic', 'Underline'], ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'], ['Link', 'Unlink'], ['RemoveFormat', 'Source'] ] } } Para que el contenido creado en el editor se vea sin problemas en el template, tenemos que ponerle el filtro safe al tag donde est\u00e9 este contenido. En el ejemplo anterior en miproyecto/pages/templates/pages/sample.html {{page.content|safe}}","title":"Editor WYSIWYG en el Admin"},{"location":"code/web/backend/django/django-intermedio/#formularios","text":"Para usar formularios en una app: Crear en la app forms.py Al igual que con los modelos: Importamos el \"modelo\" -> from django import forms Creamos una clase que herede del \"modelo\" -> class MiClaseForm(forms.Form): Generamos los campos del formulario, por ejemplo python name = forms.CharField(label='Nombre', required=True) email = forms.EmailField(label='Email', required=True) content = forms.CharField(label='Contenido', required=True, widget=forms.Textarea) En el views.py importamos el o los formularios, y los a\u00f1adimos al contexto de la vista. ```python from django.shortcuts import render from .forms import MiClaseForm def mivista(request): template = 'miapp/miapp.html' context = { 'form': MiClaseForm(), } return render(request, template, context) 4. En el template lo dibujamos: * Simplemente con `{{form}}` ya lo saca, pero totalmente desformateado. * Podemos darle un formato m\u00e1s como p\u00e1rrafos `{{form.as_p}}`. * Como si fuera una lista ```html <ul> {{form.as_ul}} </ul> ``` * Como una tabla ```html <table> {{form.as_table}} </table> ``` 5. Para a\u00f1adirle el bot\u00f3n de enviar: 1. Metemos el formulario dentro de un `<form>` 2. En el par\u00e1metro `action` ser\u00e1 la web donde ir / acci\u00f3n a hacer cuando se env\u00ede el formulario 3. En el `method` el m\u00e9todo para enviar el formulario: * `POST` es el m\u00e1s recomendado. * `GET` no se recomienda. 4. Dentro introducimos: 1. Al principio `{% csrf_token %}` por motivos de seguridad. 2. Al final un `<input>`: * Con `type=\"submit\"` * Y un texto a mostrar `value=\"Enviar\"`. 6. Validar si el formulario es correcto: 1. En la misma vista del `views.py` miramos si accedemos con POST con `request.method == 'POST'` 2. Recupero el formulario con `mi_formulario = MiClaseForm(data=request.POST)` 3. Compruebo si es valido con `mi_forumulario.is_valid()` 4. Formateo los valores por defecto si alguno est\u00e1 vac\u00edo 5. Hago una redirecci\u00f3n con la funci\u00f3n `django.shortcuts.redirect` * Se recomiendo usar la funci\u00f3n `django.urls.reverse` para la redirecci\u00f3n Ejemplo de la app `contact`: * `forms.py` ```python from django import forms class ContactForm(forms.Form): name = forms.CharField(label='Nombre', required=True) email = forms.EmailField(label='Email', required=True) content = forms.CharField(label='Contenido', required=True, widget=forms.Textarea) ``` * `views.py` ```python from django.shortcuts import render, redirect from django.urls import reverse from .forms import ContactForm # Create your views here. def contact(request): if request.method == 'POST': contact_form = ContactForm(data=request.POST) if contact_form.is_valid(): name = request.POST.get('name', '') email = request.POST.get('email', '') content = request.POST.get('content', '') return redirect(reverse('contact') + '?OK') template = 'contact/contact.html' context = { 'form': ContactForm(), } return render(request, template, context) ``` * `contact.html` ```html <!-- Formulario de contacto --> {% if 'OK' in request.GET %} <p><strong>Su mensaje se ha reenviado correctamente</strong></p> {% endif %} <form action=\"\" method=\"POST\"> {% csrf_token %} <table> {{form.as_table}} </table> <input type=\"submit\" value=\"Enviar\"> </form> ``` ### Maquetar formulario Para poder dar un aspecto visual propio a un formulario es muy sencillo: 1. Tenemos que volver a tener en nuestro `form`: 1. Sus par\u00e1metros `action` + `method` 2. El `{% csrf_token %}` al principio 3. El `<input type='submit' value='Enviar'>` al final 2. En cada campo: 1. Poner el campo del formulario 2. A\u00f1adirle despues al final el `{{form.<campo>.errors}}` 3. Modificar los estilos de cada campo en el `forms.py`: * Dentro de cada campo modificamos el par\u00e1metro `widget`. * A este se le pasa un tipo de campo * Dentro de este tipo, generamos los elementos CSS dentro del diccionario `attrs`. * Podemos ajustar tambi\u00e9n el tama\u00f1o con `min_length` o `max_length`. Ejemplo * `contact.html` app contact ```html <!-- Formulario de contacto --> {% if 'OK' in request.GET %} <p><strong>Su mensaje se ha reenviado correctamente</strong></p> {% endif %} <form action=\"\" method=\"POST\"> {% csrf_token %} <div class=\"form-group\"> <label>Nombre *</label> <div class=\"input-group\"> {{form.name}} </div> {{form.name.errors}} </div> <div class=\"form-group\"> <label>Email *</label> <div class=\"input-group\"> {{form.email}} </div> {{form.email.errors}} </div> <div class=\"form-group\"> <label>Mensaje *</label> <div class=\"input-group\"> {{form.content}} </div> {{form.content.errors}} </div> <div class=\"text-center\"> <input type=\"submit\" class=\"btn btn-primary btn-block py-2\" value=\"Enviar\"> </div> </form> ``` * `forms.py` app contact ```python from django import forms class ContactForm(forms.Form): name = forms.CharField(label='Nombre', required=True, widget=forms.TextInput( attrs={ 'class': 'form-control', 'placeholder': 'Escribe tu nombre' } ), min_length=3, max_length=100) email = forms.EmailField(label='Email', required=True, widget=forms.EmailInput( attrs={ 'class': 'form-control', 'placeholder': 'Escribe tu email' } ), min_length=3, max_length=100) content = forms.CharField(label='Contenido', required=True, widget=forms.Textarea( attrs={ 'class': 'form-control', 'rows': 3, 'placeholder': 'Escribe tu mensaje' } ), min_length=10, max_length=1000) ``` ## Enviar emails Para poder enviar emails hay configurar el correo, y existen muchas opciones. En este ejemplo para pruebas uso [mailtrap.io](mailtrap.io). Dentro de la `demo_inbox` podemos buscar la configuraci\u00f3n para Django. La copiamos y la pegamos al final del `settings.py` ```python # Email config EMAIL_HOST = 'smtp.mailtrap.io' EMAIL_HOST_USER = '9e9652ad27c050' EMAIL_HOST_PASSWORD = 'a4e2f4e19b02dc' EMAIL_PORT = '2525' Para enviar el correo, el views.py de la app correspondiente: Importamos la django.core.mail.EmailMessage Dentro de esta tenemos que poner: Asunto Cuerpo Email de origen Email de destino reply_to=[<objeto-EmailMessage>] Ejemplo con views.py de la app Contact anterior from django.shortcuts import render, redirect from django.urls import reverse from django.core.mail import EmailMessage from .forms import ContactForm # Create your views here. def contact(request): if request.method == 'POST': contact_form = ContactForm(data=request.POST) if contact_form.is_valid(): name = request.POST.get('name', '') email = request.POST.get('email', '') content = request.POST.get('content', '') mail = EmailMessage( 'MiAppDjango: Hola', f'De {name} <{email}>\\n\\nEscribio:\\n\\n{content}', 'noreply@inbox.mailtrap.io', ['tuemail@email.com'], reply_to=[email] ) try: mail.send() except: return redirect(reverse('contact') + '?FAIL') else: return redirect(reverse('contact') + '?OK') template = 'contact/contact.html' context = { 'form': ContactForm(), } return render(request, template, context)","title":"Formularios"},{"location":"code/web/backend/django/django-intermedio/#grupos-usuarios-y-permisos","text":"Todo se hace desde el Admin y es muy intuitivo. Lo l\u00f3gico es crear primero un grupo con unos permisos concretos (app que puede ver, editar, borrar). Luego se crea un usuario con su nombre y contrase\u00f1a. Si queremos que pueda acceder al admin debemos a\u00f1adirlo como staff . Por \u00faltimo para ver si todo funciona, accedemos al admin con el nuevo usuario. Si hay campos que queremos que aparezcan como solo lectura para cierto grupo, podemos editar el admin.py de la app con: Creamos el m\u00e9todo def get_readonly_fields(self, request, obj=None) Dentro filtramos si el usuario pertenece a un grupo o no Si pertenece a un grupo devolvemos unos readonly Si no pertenece devolvemos otros Ejemplo: Para una app social hemos creado un grupo llamado Personal . No queremos que pueda editar los campos key y name que usaremos para las RRSS. Su admin.py queda como ```python from django.contrib import admin from .models import Link # Register your models here. class LinkAdmin(admin.ModelAdmin): readonly_fields = ('created', 'updated') def get_readonly_fields(self, request, obj=None): if request.user.groups.filter(name='Personal').exists(): return ('created', 'updated', 'key', 'name') else: return ('created', 'updated') admin.site.register(Link, LinkAdmin) ``` Hacemos las migraciones.","title":"Grupos, Usuarios y permisos"},{"location":"code/web/backend/django/django-principiante/","text":"Django Principiante TODO Vamos a ver como empezar con Django a trav\u00e9s de un mini ejemplo. Crear proyecto Django Instalamor Django pip install django Django CLI Django tiene un CLI (menu de comandos) llamado django-admin que es con el que se trabaja. Desde una terminal donde este Django instalado lo ejecutamos y salen todas las opciones que tiene django-admin Crear Proyecto Para crear nuestro primer proyecto hacemos django-admin startproject <proyecto> Veremos que se ha generado una con la siguiente estructura (supongamos que he llamado al proyecto miproyecto ): miproyecto -> Proyecto Django miproyecto -> App principal del proyecto, contiene configuracion inicial y despliegue. init .py -> Para inicializar el proyecto e indicar que es un paquete. settings.py -> Toda la configuraci\u00f3n del proyecto Django. urls.py -> Punto de entrada de todas nuestras peticiones http (ver una web, consumir un webservice, etc). wsgi.py -> Encargado del despliegue (implementar el protocolo WSGI que usan todas las apps webs hechas en Python). manage.py -> Script para gestionar el proyecto desde la terminal. El otro CLI con el que cuenta Django es ese \u00faltimo fichero llamado manage.py . Si lo ejecutamos en la terminal tal cual, veremos todas las opciones que tiene (ordenadas ademas por tem\u00e1ticas). Lanzar servidor Si ejecutamos ahora el comando python manage.py runserver Veremos como ha arrancado un servidor de pruebas para poder ver desde el navegador (http://127.0.0.1:8000) nuestro proyecto Django. Para pararlo es tan f\u00e1cil como usar Ctrl+C Sincronizar BBDD -> Migraciones Una vez arrancado, necesitamos generar las bases de datos y dem\u00e1s. Paramos el servidor y hacemos python manage.py migrate Primera app -> Core Un proyecto Django est\u00e1 compuesto por muchas apps. Todas estas apps son independientes y pueden compartir recursos. Aparte de la app principal, la que se llama igual que el proyecto, se suele crear otra \"central\" llamada CORE . Para crear una app se hace python manage.py startapp <app> En este caso creamos core , y al hacerlo se crea una carpeta core con los siguientes ficheros: core migrations -> Carpeta donde se guardan los cambios del modelo de la bbdd init .py -> Definir paquete admin.py -> Fichero encargado de la configuracion de la app en el Django Admin apps.py -> Configuracion de la app. models.py -> Es donde se definen el modelo de la bbdd para la app. tests.py -> Fichero de pruebas. views.py -> Es donde se definen las Vistas (las funciones / clases que se ejecutan cuando se accede a una url). Vistas Cada vez que marca una url en el navegador, el proceso que sigue Django para ofrecer la web es el siguiente: Se entra al fichero urls.py de la app principal del proyecto (la que se llama como el propio proyecto). En ese fichero se busca en que vista despacha esa url. Puede haber una vista definida. Puede haber una redicci\u00f3n a otro fichero urls.py de la app encargada de despachar esa vista. Dentro del urls.py final se indica que vista del views.py de la app ejecuta. En el views.py de la app se ejecuta la vista correspondiente y se devuelve la respuesta para el navegador. Existen 2 tipos de vistas: Function views -> El encargado de generar la vista es una funci\u00f3n. Son para vistas que apenas tienen operaciones, m\u00e1s simples. Class-based views -> El encargado de generar la vista es una clase. Son para vistas mas complejas. Son las m\u00e1s usadas. Ejemplo de como se carga una vista en el navegador Un ejemplo donde se pasa por urls.py de miproyecto que redirecciona al urls.py de core y despacha la function view home : miproyecto -> urls.py from django.urls import path, include urlpatterns = [ # Path del core path('', include('core.urls')), ] core -> urls.py from django.urls import path from core import views urlpatterns = [ path('', views.home, name='home'), ] core -> views.py from django.shortcuts import HttpResponse def home(request): return HttpResponse('<h1>Vista home</h1>') Templates En el ejemplo anterior pon\u00edamos c\u00f3digo HTML, a pelo , para generar las vistas. Esto no es ni \u00f3ptimo ni escalable. Lo normal es usar plantillas HTML / templates, que son ficheros HTML que se van a usar para generar cada vista. Para usar templates en una app hay que crear dentro de la app: Carpeta templates . Dentro de esta otra carpeta que se llama igual que la app. Es decir que en core tendr\u00edamos miproyecto core templates core Esto se hace as\u00ed porque Django cuando se despliega el proyecto, busca todas las carpetas templates dentro de cada app y mete lo que haya dentro en una carpeta templates gen\u00e9rica para \u00e9l. Supongamos que hemos creado el fichero home.html en el directorio miproyecto/core/templates/core , la forma de despacharlo en views.py de core se hace: Poner la app core en el settings.py del proyecto Django ```python # Application definition INSTALLED_APPS = [ 'core.apps.CoreConfig', 'portfolio.apps.PortfolioConfig', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ``` Modificar el views.py con ```python from django.shortcuts import render def home(request): # Template -> fichero html para devolver template = 'core/home.html' # Context -> diccionario con variables para el html context = {mivariable: 'Hola home'} return render(request, template, context) ``` Herencia La gracia de las plantillas es poder reutilizar c\u00f3digo html. Lo normal es definir una plantilla base, base.html , o varias, y reusarla en las dem\u00e1s. Creo un fichero base.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"> <title>{% block title %}{% endblock %}</title> </head> <body> <!-- Cabecera --> {% block header %}{% endblock %} <!-- Contenido --> {% block content %}{% endblock %} <!-- Pie de p\u00e1gina --> {% block footer %}{% endblock %} </body> </html> Las partes que van entre {% block <bloque> %}{% endblock %} , ser\u00e1n las partes que se har\u00e1n en cada fichero a parte. Todo lo dem\u00e1s es com\u00fan. Ahora en el home.html har\u00edamos lo siguiente {% extends 'core/base.html' %} {% block title %}Home{% endblock %} {% block header %} <h1>HOME</h1> {% endblock %} {% block content %} <h2>{{ mivariable }}</h2> {% endblock %} {% block footer %} <p>Footer de la home</p> {% endblock %} Extendemos la plantilla base Generamos el contenido de cada bloque Si se pasa alguna variable en el context de la vista, podemos ponerla con {{ <variable> }} Enlaces relativos Si queremos enlazar entre secciones de nuestra web, la manera de hacerlo es usando {% url <vista> %} Por ejemplo {% url 'home' %} . El nombre de la vista, es decir, <vista> lo hemos definido en el urls.py anteriormente. Cargas ficheros est\u00e1ticos (CSS, JS, img, media...) Para poder cargar los estilos, im\u00e1genes, scripts JS, etc, primero hay que crear una carpeta donde los contenga. Esta carpeta va a seguir el mismo princpio que la carpeta templates , pero se va a llamar static . Es decir, que dentro de cada app que tenga ficheros est\u00e1ticos tendremos: static Ya que luego Django recolectar\u00e1 todas las carpetas static en una static com\u00fan. En nuestro ejemplo tendr\u00edamos miproyecto/core/static/core/ . Una vez hecho esto, lo siguiente ser\u00e1 en el base.html y cada plantilla poner lo siguiente: {% load static %} Tanto en el <head></head> del base.html . Como en cada plantilla, solo se debe poner una vez : Puede ser al principio, despues del {% entends '<app>/base.html' %} . Como dentro de un {% block <bloque> %}{% endblock %} . Luego en cada enlace hacia el fichero est\u00e1tico, ponemos \"{% static '<app>/<path-al-estatico>' %}\" . Un ejemplo podr\u00eda ser <head> <!-- Estilos y fuentes --> {% load static %} <link href=\"{% static 'core/bootstrap/css/bootstrap.min.css' %}\" rel=\"stylesheet\"> </head> <body> <script src=\"{% static 'core/jquery/jquery.min.js' %}\"></script> </body> Templates tags Dentro de este sistema de plantillas lo que hemos estado usando se llaman Template Tags -> informaci\u00f3n oficial aqu\u00ed Existen muchos, como por ejemplo el {% block <bloque> %}{% endblock %} , o cuando queremos referirnos a una variable del contexto que usamos {{ variable }} . Django permite muchos y muy diversos, como por ejemplo el t\u00edpico if , for , y dem\u00e1s. Tambi\u00e9n hay una variable de la propia web que es request y esta a su vez contiene m\u00e1s variables e informaci\u00f3n, como request.path , que indica en que path tenemos en la url. Por ejemplo, supongamos que queremos ver un salto de l\u00ednea en cierto sitio, si y solo si, si estoy en la home. La forma de hacerlo ser\u00eda, en el <body> del base.html : {% if request.path != \"/home/\" %}<hr>{% endif %} Modelos Django cuenta con su propio ORM para trabajar con las BBDD y trabaja siguiendo el paradigma MVT (Modelo Vista Template). Cada modelo es una clase heredar\u00e1 de una clase Modelo especifica. Por ejemplo supongamos que queremos tener una secci\u00f3n que va a ser un proyecto, y cada proyecto contiene un t\u00edtulo, una descripci\u00f3n y una imagen. Esto lo modelar\u00edamos en bbdd de la siguiente manera from django.db import models class Project(models.Model): title = models.CharField(max_length=200) description = models.TextField() image = models.ImageField() link = models.UrlField(null=True, blank=True) # null para permitir nulo en bbdd, blank para permitir vac\u00edo en html created = models.DateTimeField(auto_now_add=True) updated = models.DateTimeField(auto_now=True) Se han a\u00f1adido dos campos para poder tener un control de cuando se cre\u00f3, created , y cuando se ha actualizado, updated . Para aplicar estos cambios a la bbdd tenemos que hacer python manage.py makemigrations [<app>] Si queremos ponemos la app especifica, o sino no ponemos nada y har\u00e1 todas las apps. Despu\u00e9s de hacer las migraciones, tenemos que aplicarlas, para ello python manage.py migrate [<app>] Django Admin En el urls.py del proyecto tenemos una redirecci\u00f3n a una cosa llamada admin path('admin/', admin.site.urls), Si en el navegador lo abrimos, veremos que sale un login. Esto es una herramienta potent\u00edsima que tiene Django, el Panel de Administrador . Crear superusuario Para poder acceder a \u00e9l necesitamos crear primero el superusuario del proyecto python manage.py createsuperuser Completamos el registro y volvemos a acceder al Django Admin con este usuario nuevo creado. Habilitar Modelo Para poder trabajar con un modelo de una app debemos hacer lo siguiente en el fichero admin.py de la app correspondiente. Por ejemplo para el /miproyecto/core/admin.py tengo que poner from django.contrib import admin from .models import Project admin.site.register(Project) Ahora podremos manipular el modelo desde el Admin. Tunear el Admin Cambiar nombre de la app En el fichero apps.py de la app, debemos de a\u00f1adir el campo verbose_name con el nombre que queramos. Por ejemplo a la app core la voy a llamar principal, as\u00ed que el /miproyecto/core/apps.py debe quedar as\u00ed from django.apps import AppConfig class CoreConfig(AppConfig): name = 'core' vebose_name = 'Principal' Recordemos que en el /miproyecto/miproyecto/settings.py en la parte de apps instaladas debe aparecer INSTALLED_APPS = [ 'core.apps.CoreConfig', ... ] Cambiar nombre del modelo Dentro de la clase del modelo, debemos crear una subclase llamada Meta (para metadata) y debe contener el atributo verbose_name . Si queremos que luego cada objeto de ese modelo tenga un nombre m\u00e1s f\u00e1cil de leer, debemos a\u00f1adir el m\u00e9todo __str__ a la clase del modelo. Por \u00faltimo, para que cada campo aparezca con el nombre que queramos, le a\u00f1adimos el par\u00e1metro verbose_name a cada campo del modelo. Siguiendo con el ejemplo, en /miproyecto/core/models.py pondremos al modelo Project el nombre Proyecto . Adem\u00e1s le vamos a a\u00f1adir el plural, y vamos a permitir que se ordene por fecha de creaci\u00f3n m\u00e1s nueva a m\u00e1s vieja (con -created , si hubieramos puesto solo created ser\u00eda de m\u00e1s antiguo al m\u00e1s nuevo). Para el nombre de cada proyecto le vamos a poner su t\u00edtulo: from django.db import models class Project(models.Model): title = models.CharField(max_length=200, verbose_name='Titulo') description = models.TextField(verbose_name='Descripci\u00f3n') image = models.ImageField(verbose_name='Imagen') created = models.DateTimeField(auto_now_add=True, verbose_name='Creado') updated = models.DateTimeField(auto_now=True, verbose_name='Actualizado') class Meta: verbose_name = 'proyecto' verbose_name_plural = 'proyectos' ordering = ['-created'] def __str__(self): return self.title Los campos created y updated Django los oculta por defecto, ya que son de solo lectura. Para hacer que aparecan debemos de Modificar el admin.py de la app Creando un modelo extendido para el Admin Pas\u00e1ndole una tupla con los campos de solo lectura. A\u00f1adiendo el modelo extendido al admin. /miproyecto/ /admin.py from django.contrib import admin from .models import <Modelo> class <Modelo>Admin(admin.ModelAdmin): readonly_fields = ('<campo1>', '<campo2>') admin.site.register(<Modelo>, <Modelo>Admin) Lo vemos m\u00e1s f\u00e1cil con el ejemplo que estamos haciendo, el /miproyecto/core/admin.py tiene que quedar as\u00ed from django.contrib import admin from .models import Project class ProjectAdmin(admin.ModelAdmin): readonly_fields = ('created', 'updated') admin.site.register(Project, ProjectAdmin) Servir ficheros multimedia Django por defecto no puede servir ficheros multimedia (im\u00e1genes, v\u00eddeos, etc). Los pasos para habilitarlos son Crear una carpeta com\u00fan llamada media por ejemplo, y estar\u00eda al mismo nivel que las apps, es decir /media. En el settings.py ( / /settings.py) del proyecto debemos de indicarle donde est\u00e1 la carpeta de estos archivos con python # Media files MEDIA_URL = '/media/' # Ruta del navegador para encontrarlos MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Ruta para encontrarlos dentro del Django Si en el modelo tenemos alg\u00fan formulario donde los usuarios pueden subir este tipo de ficheros, debemos a\u00f1adirle el par\u00e1metro upload_to con el nombre del directorio que tendr\u00e1 dentro de la carpeta media Por ejemplo en el /miproyecto/core/models.py hacemos que las im\u00e1genes de los proyectos las guarde en la carpeta /miproyecto/media/projects que Django generar\u00e1 autom\u00e1ticamente con python class Project(models.Model): ... image = models.ImageField(verbose_name='Imagen', upload_to='projects') Ahora tenemos que habilitar una url para el directorio media , pero que solo sea accesible cuando estamos en modo debug . Modificar el urls.py del proyecto ( / /urls.py) con ```python from django.conf import settings urlpatterns = [...] if settings.DEBUG: from django.conf.urls.static import static urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) ``` MVT Modelo-Vista-Template Django se basa en el paradigma MVT, que est\u00e1 basado en el MVC (Modelo-Vista-Controlador). Estos paradigmas indican b\u00e1sicamente como es el flujo de trabajo y a la vez permiten desacoplar las distintas partes del proyecto. Es un poco lioso al principio si vienes del MVC. En el MVC tienes: Modelo -> Como est\u00e1 creada y almacenada la informaci\u00f3n (BBDD). Vista -> Es la parte encargada de la interfaz visual (Frontend). Controlador -> Como se manipula y trabaja con la informaci\u00f3n detr\u00e1s de la interfaz (Backend). En el MVT hay: Modelo -> Igual que el anterior (BBDD). Vista -> Equivale en realidad al Controlador (Backend). Por eso dec\u00eda que es lioso, porque al Controlador en Django se le llama Vista. Y a la Vista se le llama Template. Template -> Equivale a la Vista (Frontend). Hay que tener en cuenta que MVT define el flujo de desarrollo . En el MVT nosotros desarrollamos siguiendo estos pasos: MODELO models.py -> Creamos / modificamos el Modelo (BBDD). admin.py -> Habilitamos las opciones que sean necesarias en el Admin. VISTA views.py -> Creamos / modificamos la Vista (Backend). urls.py -> Habilitamos el acceso a trav\u00e9s de la web a esa vista. TEMPLATE templates/<app>/ -> Creamos / modificamos la Template (Frontend). static/<app>/ -> Creamos / modificamos los est\u00e1ticos (CSS's, JS's). NOTA : Un mnem\u00f3nico para recordar esto es MAVUTS -> Models.py Admin.py Views.py Urls.py Templates Static. Pero el flujo que sigue Django para servir una web en un enlace concreto es: El navegador hace una petici\u00f3n a una url concreta. Eso entra por el urls.py del proyecto y se redirecciona hasta llegar al urls.py de la app concreta. De ah\u00ed se pasa a la vista, views.py . El views.py interactua con la bbdd gracias al models.py . Despu\u00e9s computar toda la info, devuelve la template espec\u00edfica, <app>/templates/<app>/<vista>.html , ya formateada (con los tags sustituidos por su valor final). El navegador renderiza el fichero y sirve la web. Ejemplo pr\u00e1ctico Para que tu editor no te de problemas, se recomienda instalar el linter pylint-django . Para activarlo hay que hacer: Editar los pylintArgs con --errors-only --load-plugins pytlint_django Supongamos que vamos a querer tener una secci\u00f3n portfolio en esta web, llena de los proyectos. Lo primero ser\u00e1 crear la app portfolio python manage.py startapp portfolio Tendremos nuestra nueva app portfolio junto con core y miproyecto . Una vez creada, damos de alta la app en el settings.py del proyecto python INSTALLED_APPS = [ 'portfolio.apps.PortfolioConfig', ] Modelo -> models.py : Quitamos Projects del modelo de core (en su models.py ) y nos lo llevamos al models.py de portfolio . Hacemos las migraciones en la base de datos con bash python manage.py makemigrations python manage.py migrate Admin -> admin.py : Quitamos el Projects de core del Admin en su admin.py . Damos de alta Projects de portfolio en el Admin con su admin.py . Vista -> views.py : Creamos la vista portfolio en el views.py . Podemmos usar el modelo en la vista de la siguiente manera ```python from django.shortcuts import render from .models import Project def portfolio(request): template = 'portfolio/portfolio.html' projects = Project.objects.all() context = {'projects': projects} return render(request, template, context) ``` Urls -> urls.py : En el urls.py del proyecto redireccionamos al urls.py de portfolio ```python from django.urls import path, include urlpatterns = [ path('portfolio/', include('portfolio.urls')), ] ``` En el urls.py de portfolio enlazamos la vista creada. ```python from django.urls import path from . import views urlpatterns = [ path('', views.portfolio, name='portfolio'), ] ``` Template -> miproyecto/portfolio/templates/portfolio/<plantilla>.html Creamos el template miproyecto/portfolio/templates/portfolio/portfolio.html . Dentro de esta template, heredamos del base.html del templates de core . Un ejemplo de como podr\u00edamos usar el modelo dentro de la plantilla podria ser un template-tag {% for %} , ya que le hemos pasado todos los proyectos. html {% extends 'core/base.html' %} {% load static %} {% block title%}Portfolio{% endblock%} ... {% block content%} <ul> {% for project in projects %} <li> T\u00edtulo: {{project.title}} Descripci\u00f3n: {{project.description}} Imagen: {{project.image.url}} </li> {% endfor %} </ul> {% endblock } Static -> miproyecto/portfolio/static/portfolio/<archivos> si necesito cualquier est\u00e1tico lo uso en portfolio.html con html {% static 'portfolio/<fichero-estatico>' %}","title":"Principiante"},{"location":"code/web/backend/django/django-principiante/#django-principiante","text":"TODO Vamos a ver como empezar con Django a trav\u00e9s de un mini ejemplo.","title":"Django Principiante"},{"location":"code/web/backend/django/django-principiante/#crear-proyecto-django","text":"Instalamor Django pip install django","title":"Crear proyecto Django"},{"location":"code/web/backend/django/django-principiante/#django-cli","text":"Django tiene un CLI (menu de comandos) llamado django-admin que es con el que se trabaja. Desde una terminal donde este Django instalado lo ejecutamos y salen todas las opciones que tiene django-admin","title":"Django CLI"},{"location":"code/web/backend/django/django-principiante/#crear-proyecto","text":"Para crear nuestro primer proyecto hacemos django-admin startproject <proyecto> Veremos que se ha generado una con la siguiente estructura (supongamos que he llamado al proyecto miproyecto ): miproyecto -> Proyecto Django miproyecto -> App principal del proyecto, contiene configuracion inicial y despliegue. init .py -> Para inicializar el proyecto e indicar que es un paquete. settings.py -> Toda la configuraci\u00f3n del proyecto Django. urls.py -> Punto de entrada de todas nuestras peticiones http (ver una web, consumir un webservice, etc). wsgi.py -> Encargado del despliegue (implementar el protocolo WSGI que usan todas las apps webs hechas en Python). manage.py -> Script para gestionar el proyecto desde la terminal. El otro CLI con el que cuenta Django es ese \u00faltimo fichero llamado manage.py . Si lo ejecutamos en la terminal tal cual, veremos todas las opciones que tiene (ordenadas ademas por tem\u00e1ticas).","title":"Crear Proyecto"},{"location":"code/web/backend/django/django-principiante/#lanzar-servidor","text":"Si ejecutamos ahora el comando python manage.py runserver Veremos como ha arrancado un servidor de pruebas para poder ver desde el navegador (http://127.0.0.1:8000) nuestro proyecto Django. Para pararlo es tan f\u00e1cil como usar Ctrl+C","title":"Lanzar servidor"},{"location":"code/web/backend/django/django-principiante/#sincronizar-bbdd-migraciones","text":"Una vez arrancado, necesitamos generar las bases de datos y dem\u00e1s. Paramos el servidor y hacemos python manage.py migrate","title":"Sincronizar BBDD -&gt; Migraciones"},{"location":"code/web/backend/django/django-principiante/#primera-app-core","text":"Un proyecto Django est\u00e1 compuesto por muchas apps. Todas estas apps son independientes y pueden compartir recursos. Aparte de la app principal, la que se llama igual que el proyecto, se suele crear otra \"central\" llamada CORE . Para crear una app se hace python manage.py startapp <app> En este caso creamos core , y al hacerlo se crea una carpeta core con los siguientes ficheros: core migrations -> Carpeta donde se guardan los cambios del modelo de la bbdd init .py -> Definir paquete admin.py -> Fichero encargado de la configuracion de la app en el Django Admin apps.py -> Configuracion de la app. models.py -> Es donde se definen el modelo de la bbdd para la app. tests.py -> Fichero de pruebas. views.py -> Es donde se definen las Vistas (las funciones / clases que se ejecutan cuando se accede a una url).","title":"Primera app -&gt; Core"},{"location":"code/web/backend/django/django-principiante/#vistas","text":"Cada vez que marca una url en el navegador, el proceso que sigue Django para ofrecer la web es el siguiente: Se entra al fichero urls.py de la app principal del proyecto (la que se llama como el propio proyecto). En ese fichero se busca en que vista despacha esa url. Puede haber una vista definida. Puede haber una redicci\u00f3n a otro fichero urls.py de la app encargada de despachar esa vista. Dentro del urls.py final se indica que vista del views.py de la app ejecuta. En el views.py de la app se ejecuta la vista correspondiente y se devuelve la respuesta para el navegador. Existen 2 tipos de vistas: Function views -> El encargado de generar la vista es una funci\u00f3n. Son para vistas que apenas tienen operaciones, m\u00e1s simples. Class-based views -> El encargado de generar la vista es una clase. Son para vistas mas complejas. Son las m\u00e1s usadas.","title":"Vistas"},{"location":"code/web/backend/django/django-principiante/#ejemplo-de-como-se-carga-una-vista-en-el-navegador","text":"Un ejemplo donde se pasa por urls.py de miproyecto que redirecciona al urls.py de core y despacha la function view home : miproyecto -> urls.py from django.urls import path, include urlpatterns = [ # Path del core path('', include('core.urls')), ] core -> urls.py from django.urls import path from core import views urlpatterns = [ path('', views.home, name='home'), ] core -> views.py from django.shortcuts import HttpResponse def home(request): return HttpResponse('<h1>Vista home</h1>')","title":"Ejemplo de como se carga una vista en el navegador"},{"location":"code/web/backend/django/django-principiante/#templates","text":"En el ejemplo anterior pon\u00edamos c\u00f3digo HTML, a pelo , para generar las vistas. Esto no es ni \u00f3ptimo ni escalable. Lo normal es usar plantillas HTML / templates, que son ficheros HTML que se van a usar para generar cada vista. Para usar templates en una app hay que crear dentro de la app: Carpeta templates . Dentro de esta otra carpeta que se llama igual que la app. Es decir que en core tendr\u00edamos miproyecto core templates core Esto se hace as\u00ed porque Django cuando se despliega el proyecto, busca todas las carpetas templates dentro de cada app y mete lo que haya dentro en una carpeta templates gen\u00e9rica para \u00e9l. Supongamos que hemos creado el fichero home.html en el directorio miproyecto/core/templates/core , la forma de despacharlo en views.py de core se hace: Poner la app core en el settings.py del proyecto Django ```python # Application definition INSTALLED_APPS = [ 'core.apps.CoreConfig', 'portfolio.apps.PortfolioConfig', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', ] ``` Modificar el views.py con ```python from django.shortcuts import render def home(request): # Template -> fichero html para devolver template = 'core/home.html' # Context -> diccionario con variables para el html context = {mivariable: 'Hola home'} return render(request, template, context) ```","title":"Templates"},{"location":"code/web/backend/django/django-principiante/#herencia","text":"La gracia de las plantillas es poder reutilizar c\u00f3digo html. Lo normal es definir una plantilla base, base.html , o varias, y reusarla en las dem\u00e1s. Creo un fichero base.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"> <title>{% block title %}{% endblock %}</title> </head> <body> <!-- Cabecera --> {% block header %}{% endblock %} <!-- Contenido --> {% block content %}{% endblock %} <!-- Pie de p\u00e1gina --> {% block footer %}{% endblock %} </body> </html> Las partes que van entre {% block <bloque> %}{% endblock %} , ser\u00e1n las partes que se har\u00e1n en cada fichero a parte. Todo lo dem\u00e1s es com\u00fan. Ahora en el home.html har\u00edamos lo siguiente {% extends 'core/base.html' %} {% block title %}Home{% endblock %} {% block header %} <h1>HOME</h1> {% endblock %} {% block content %} <h2>{{ mivariable }}</h2> {% endblock %} {% block footer %} <p>Footer de la home</p> {% endblock %} Extendemos la plantilla base Generamos el contenido de cada bloque Si se pasa alguna variable en el context de la vista, podemos ponerla con {{ <variable> }}","title":"Herencia"},{"location":"code/web/backend/django/django-principiante/#enlaces-relativos","text":"Si queremos enlazar entre secciones de nuestra web, la manera de hacerlo es usando {% url <vista> %} Por ejemplo {% url 'home' %} . El nombre de la vista, es decir, <vista> lo hemos definido en el urls.py anteriormente.","title":"Enlaces relativos"},{"location":"code/web/backend/django/django-principiante/#cargas-ficheros-estaticos-css-js-img-media","text":"Para poder cargar los estilos, im\u00e1genes, scripts JS, etc, primero hay que crear una carpeta donde los contenga. Esta carpeta va a seguir el mismo princpio que la carpeta templates , pero se va a llamar static . Es decir, que dentro de cada app que tenga ficheros est\u00e1ticos tendremos: static Ya que luego Django recolectar\u00e1 todas las carpetas static en una static com\u00fan. En nuestro ejemplo tendr\u00edamos miproyecto/core/static/core/ . Una vez hecho esto, lo siguiente ser\u00e1 en el base.html y cada plantilla poner lo siguiente: {% load static %} Tanto en el <head></head> del base.html . Como en cada plantilla, solo se debe poner una vez : Puede ser al principio, despues del {% entends '<app>/base.html' %} . Como dentro de un {% block <bloque> %}{% endblock %} . Luego en cada enlace hacia el fichero est\u00e1tico, ponemos \"{% static '<app>/<path-al-estatico>' %}\" . Un ejemplo podr\u00eda ser <head> <!-- Estilos y fuentes --> {% load static %} <link href=\"{% static 'core/bootstrap/css/bootstrap.min.css' %}\" rel=\"stylesheet\"> </head> <body> <script src=\"{% static 'core/jquery/jquery.min.js' %}\"></script> </body>","title":"Cargas ficheros est\u00e1ticos (CSS, JS, img, media...)"},{"location":"code/web/backend/django/django-principiante/#templates-tags","text":"Dentro de este sistema de plantillas lo que hemos estado usando se llaman Template Tags -> informaci\u00f3n oficial aqu\u00ed Existen muchos, como por ejemplo el {% block <bloque> %}{% endblock %} , o cuando queremos referirnos a una variable del contexto que usamos {{ variable }} . Django permite muchos y muy diversos, como por ejemplo el t\u00edpico if , for , y dem\u00e1s. Tambi\u00e9n hay una variable de la propia web que es request y esta a su vez contiene m\u00e1s variables e informaci\u00f3n, como request.path , que indica en que path tenemos en la url. Por ejemplo, supongamos que queremos ver un salto de l\u00ednea en cierto sitio, si y solo si, si estoy en la home. La forma de hacerlo ser\u00eda, en el <body> del base.html : {% if request.path != \"/home/\" %}<hr>{% endif %}","title":"Templates tags"},{"location":"code/web/backend/django/django-principiante/#modelos","text":"Django cuenta con su propio ORM para trabajar con las BBDD y trabaja siguiendo el paradigma MVT (Modelo Vista Template). Cada modelo es una clase heredar\u00e1 de una clase Modelo especifica. Por ejemplo supongamos que queremos tener una secci\u00f3n que va a ser un proyecto, y cada proyecto contiene un t\u00edtulo, una descripci\u00f3n y una imagen. Esto lo modelar\u00edamos en bbdd de la siguiente manera from django.db import models class Project(models.Model): title = models.CharField(max_length=200) description = models.TextField() image = models.ImageField() link = models.UrlField(null=True, blank=True) # null para permitir nulo en bbdd, blank para permitir vac\u00edo en html created = models.DateTimeField(auto_now_add=True) updated = models.DateTimeField(auto_now=True) Se han a\u00f1adido dos campos para poder tener un control de cuando se cre\u00f3, created , y cuando se ha actualizado, updated . Para aplicar estos cambios a la bbdd tenemos que hacer python manage.py makemigrations [<app>] Si queremos ponemos la app especifica, o sino no ponemos nada y har\u00e1 todas las apps. Despu\u00e9s de hacer las migraciones, tenemos que aplicarlas, para ello python manage.py migrate [<app>]","title":"Modelos"},{"location":"code/web/backend/django/django-principiante/#django-admin","text":"En el urls.py del proyecto tenemos una redirecci\u00f3n a una cosa llamada admin path('admin/', admin.site.urls), Si en el navegador lo abrimos, veremos que sale un login. Esto es una herramienta potent\u00edsima que tiene Django, el Panel de Administrador .","title":"Django Admin"},{"location":"code/web/backend/django/django-principiante/#crear-superusuario","text":"Para poder acceder a \u00e9l necesitamos crear primero el superusuario del proyecto python manage.py createsuperuser Completamos el registro y volvemos a acceder al Django Admin con este usuario nuevo creado.","title":"Crear superusuario"},{"location":"code/web/backend/django/django-principiante/#habilitar-modelo","text":"Para poder trabajar con un modelo de una app debemos hacer lo siguiente en el fichero admin.py de la app correspondiente. Por ejemplo para el /miproyecto/core/admin.py tengo que poner from django.contrib import admin from .models import Project admin.site.register(Project) Ahora podremos manipular el modelo desde el Admin.","title":"Habilitar Modelo"},{"location":"code/web/backend/django/django-principiante/#tunear-el-admin","text":"","title":"Tunear el Admin"},{"location":"code/web/backend/django/django-principiante/#cambiar-nombre-de-la-app","text":"En el fichero apps.py de la app, debemos de a\u00f1adir el campo verbose_name con el nombre que queramos. Por ejemplo a la app core la voy a llamar principal, as\u00ed que el /miproyecto/core/apps.py debe quedar as\u00ed from django.apps import AppConfig class CoreConfig(AppConfig): name = 'core' vebose_name = 'Principal' Recordemos que en el /miproyecto/miproyecto/settings.py en la parte de apps instaladas debe aparecer INSTALLED_APPS = [ 'core.apps.CoreConfig', ... ]","title":"Cambiar nombre de la app"},{"location":"code/web/backend/django/django-principiante/#cambiar-nombre-del-modelo","text":"Dentro de la clase del modelo, debemos crear una subclase llamada Meta (para metadata) y debe contener el atributo verbose_name . Si queremos que luego cada objeto de ese modelo tenga un nombre m\u00e1s f\u00e1cil de leer, debemos a\u00f1adir el m\u00e9todo __str__ a la clase del modelo. Por \u00faltimo, para que cada campo aparezca con el nombre que queramos, le a\u00f1adimos el par\u00e1metro verbose_name a cada campo del modelo. Siguiendo con el ejemplo, en /miproyecto/core/models.py pondremos al modelo Project el nombre Proyecto . Adem\u00e1s le vamos a a\u00f1adir el plural, y vamos a permitir que se ordene por fecha de creaci\u00f3n m\u00e1s nueva a m\u00e1s vieja (con -created , si hubieramos puesto solo created ser\u00eda de m\u00e1s antiguo al m\u00e1s nuevo). Para el nombre de cada proyecto le vamos a poner su t\u00edtulo: from django.db import models class Project(models.Model): title = models.CharField(max_length=200, verbose_name='Titulo') description = models.TextField(verbose_name='Descripci\u00f3n') image = models.ImageField(verbose_name='Imagen') created = models.DateTimeField(auto_now_add=True, verbose_name='Creado') updated = models.DateTimeField(auto_now=True, verbose_name='Actualizado') class Meta: verbose_name = 'proyecto' verbose_name_plural = 'proyectos' ordering = ['-created'] def __str__(self): return self.title Los campos created y updated Django los oculta por defecto, ya que son de solo lectura. Para hacer que aparecan debemos de Modificar el admin.py de la app Creando un modelo extendido para el Admin Pas\u00e1ndole una tupla con los campos de solo lectura. A\u00f1adiendo el modelo extendido al admin. /miproyecto/ /admin.py from django.contrib import admin from .models import <Modelo> class <Modelo>Admin(admin.ModelAdmin): readonly_fields = ('<campo1>', '<campo2>') admin.site.register(<Modelo>, <Modelo>Admin) Lo vemos m\u00e1s f\u00e1cil con el ejemplo que estamos haciendo, el /miproyecto/core/admin.py tiene que quedar as\u00ed from django.contrib import admin from .models import Project class ProjectAdmin(admin.ModelAdmin): readonly_fields = ('created', 'updated') admin.site.register(Project, ProjectAdmin)","title":"Cambiar nombre del modelo"},{"location":"code/web/backend/django/django-principiante/#servir-ficheros-multimedia","text":"Django por defecto no puede servir ficheros multimedia (im\u00e1genes, v\u00eddeos, etc). Los pasos para habilitarlos son Crear una carpeta com\u00fan llamada media por ejemplo, y estar\u00eda al mismo nivel que las apps, es decir /media. En el settings.py ( / /settings.py) del proyecto debemos de indicarle donde est\u00e1 la carpeta de estos archivos con python # Media files MEDIA_URL = '/media/' # Ruta del navegador para encontrarlos MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Ruta para encontrarlos dentro del Django Si en el modelo tenemos alg\u00fan formulario donde los usuarios pueden subir este tipo de ficheros, debemos a\u00f1adirle el par\u00e1metro upload_to con el nombre del directorio que tendr\u00e1 dentro de la carpeta media Por ejemplo en el /miproyecto/core/models.py hacemos que las im\u00e1genes de los proyectos las guarde en la carpeta /miproyecto/media/projects que Django generar\u00e1 autom\u00e1ticamente con python class Project(models.Model): ... image = models.ImageField(verbose_name='Imagen', upload_to='projects') Ahora tenemos que habilitar una url para el directorio media , pero que solo sea accesible cuando estamos en modo debug . Modificar el urls.py del proyecto ( / /urls.py) con ```python from django.conf import settings urlpatterns = [...] if settings.DEBUG: from django.conf.urls.static import static urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) ```","title":"Servir ficheros multimedia"},{"location":"code/web/backend/django/django-principiante/#mvt-modelo-vista-template","text":"Django se basa en el paradigma MVT, que est\u00e1 basado en el MVC (Modelo-Vista-Controlador). Estos paradigmas indican b\u00e1sicamente como es el flujo de trabajo y a la vez permiten desacoplar las distintas partes del proyecto. Es un poco lioso al principio si vienes del MVC. En el MVC tienes: Modelo -> Como est\u00e1 creada y almacenada la informaci\u00f3n (BBDD). Vista -> Es la parte encargada de la interfaz visual (Frontend). Controlador -> Como se manipula y trabaja con la informaci\u00f3n detr\u00e1s de la interfaz (Backend). En el MVT hay: Modelo -> Igual que el anterior (BBDD). Vista -> Equivale en realidad al Controlador (Backend). Por eso dec\u00eda que es lioso, porque al Controlador en Django se le llama Vista. Y a la Vista se le llama Template. Template -> Equivale a la Vista (Frontend). Hay que tener en cuenta que MVT define el flujo de desarrollo . En el MVT nosotros desarrollamos siguiendo estos pasos: MODELO models.py -> Creamos / modificamos el Modelo (BBDD). admin.py -> Habilitamos las opciones que sean necesarias en el Admin. VISTA views.py -> Creamos / modificamos la Vista (Backend). urls.py -> Habilitamos el acceso a trav\u00e9s de la web a esa vista. TEMPLATE templates/<app>/ -> Creamos / modificamos la Template (Frontend). static/<app>/ -> Creamos / modificamos los est\u00e1ticos (CSS's, JS's). NOTA : Un mnem\u00f3nico para recordar esto es MAVUTS -> Models.py Admin.py Views.py Urls.py Templates Static. Pero el flujo que sigue Django para servir una web en un enlace concreto es: El navegador hace una petici\u00f3n a una url concreta. Eso entra por el urls.py del proyecto y se redirecciona hasta llegar al urls.py de la app concreta. De ah\u00ed se pasa a la vista, views.py . El views.py interactua con la bbdd gracias al models.py . Despu\u00e9s computar toda la info, devuelve la template espec\u00edfica, <app>/templates/<app>/<vista>.html , ya formateada (con los tags sustituidos por su valor final). El navegador renderiza el fichero y sirve la web.","title":"MVT Modelo-Vista-Template"},{"location":"code/web/backend/django/django-principiante/#ejemplo-practico","text":"Para que tu editor no te de problemas, se recomienda instalar el linter pylint-django . Para activarlo hay que hacer: Editar los pylintArgs con --errors-only --load-plugins pytlint_django Supongamos que vamos a querer tener una secci\u00f3n portfolio en esta web, llena de los proyectos. Lo primero ser\u00e1 crear la app portfolio python manage.py startapp portfolio Tendremos nuestra nueva app portfolio junto con core y miproyecto . Una vez creada, damos de alta la app en el settings.py del proyecto python INSTALLED_APPS = [ 'portfolio.apps.PortfolioConfig', ] Modelo -> models.py : Quitamos Projects del modelo de core (en su models.py ) y nos lo llevamos al models.py de portfolio . Hacemos las migraciones en la base de datos con bash python manage.py makemigrations python manage.py migrate Admin -> admin.py : Quitamos el Projects de core del Admin en su admin.py . Damos de alta Projects de portfolio en el Admin con su admin.py . Vista -> views.py : Creamos la vista portfolio en el views.py . Podemmos usar el modelo en la vista de la siguiente manera ```python from django.shortcuts import render from .models import Project def portfolio(request): template = 'portfolio/portfolio.html' projects = Project.objects.all() context = {'projects': projects} return render(request, template, context) ``` Urls -> urls.py : En el urls.py del proyecto redireccionamos al urls.py de portfolio ```python from django.urls import path, include urlpatterns = [ path('portfolio/', include('portfolio.urls')), ] ``` En el urls.py de portfolio enlazamos la vista creada. ```python from django.urls import path from . import views urlpatterns = [ path('', views.portfolio, name='portfolio'), ] ``` Template -> miproyecto/portfolio/templates/portfolio/<plantilla>.html Creamos el template miproyecto/portfolio/templates/portfolio/portfolio.html . Dentro de esta template, heredamos del base.html del templates de core . Un ejemplo de como podr\u00edamos usar el modelo dentro de la plantilla podria ser un template-tag {% for %} , ya que le hemos pasado todos los proyectos. html {% extends 'core/base.html' %} {% load static %} {% block title%}Portfolio{% endblock%} ... {% block content%} <ul> {% for project in projects %} <li> T\u00edtulo: {{project.title}} Descripci\u00f3n: {{project.description}} Imagen: {{project.image.url}} </li> {% endfor %} </ul> {% endblock } Static -> miproyecto/portfolio/static/portfolio/<archivos> si necesito cualquier est\u00e1tico lo uso en portfolio.html con html {% static 'portfolio/<fichero-estatico>' %}","title":"Ejemplo pr\u00e1ctico"},{"location":"code/web/backend/django/django/","text":"Django TODO Django es (quiz\u00e1s) el mayor framework web usado en Python. Se usa para crear el backend (lo que no se ve) de una web. Crear un proyecto seccion seccion seccion seccion seccion seccion seccion seccion","title":"Django"},{"location":"code/web/backend/django/django/#django","text":"TODO Django es (quiz\u00e1s) el mayor framework web usado en Python. Se usa para crear el backend (lo que no se ve) de una web. Crear un proyecto seccion seccion seccion seccion seccion seccion seccion seccion","title":"Django"},{"location":"code/web/frontend/css/css-plugins/","text":"Plugins para VSCODE auto close tag auto rename tag intellisense for css prettier - code formatter gitlens","title":"Plugins"},{"location":"code/web/frontend/css/css-plugins/#plugins-para-vscode","text":"auto close tag auto rename tag intellisense for css prettier - code formatter gitlens","title":"Plugins para VSCODE"},{"location":"code/web/frontend/html/html-indice/","text":"HTML5 TODO","title":"HTML"},{"location":"code/web/frontend/html/html-indice/#html5","text":"TODO","title":"HTML5"},{"location":"code/web/frontend/js/js-indice/","text":"JavaScript TODO","title":"JS"},{"location":"code/web/frontend/js/js-indice/#javascript","text":"TODO","title":"JavaScript"},{"location":"hw/pio/pio-informacion/","text":"Platformio TODO Crear c\u00f3digo para hardware embebido no es sumamente complicado. El problema mayor que hay es programar / cargar el programa en los chips: Necesitas ciertas configuraciones para cada chip. Unas herramientas que por lo general son de cada fabricante, cerradas, y que suelen dejar bastante que desear. Depende tambi\u00e9n de la placa que use el chip. Etc Platformio es un ecosistema Open Source, multiplataforma, pensado para evitar todo esto. Con \u00e9l podremos programar desde un Arduino, a un ARM, o alguna de las much\u00edsimas placas que soporta. Lo \u00fanico que necesita para funcionar es tener instalado Python 2 en el ordenador. Documentaci\u00f3n Oficial de Platformio -> aqu\u00ed Instalaci\u00f3n Platformio tiene varias herramientas, pero para nosotros, las podemos dividir en dos: Platformio Core (CLI) Es el n\u00facleo de todo. Con esto gestionamos y cargamos nuestro c\u00f3digo en los chips. Tiene una herramienta de comandos (CLI) muy \u00fatil. Platformio IDE Es una extensi\u00f3n / plugin que se le pone a entornos gr\u00e1ficos para poder usar Platformio Core de manera m\u00e1s sencilla. El IDE \"por defecto\" donde usarlo es Visual Studio Code. Documentaci\u00f3n oficial para su instalaci\u00f3n -> aqu\u00ed Nota: Si usas Linux, debes instalar las 99-platformio-udev.rules para que vaya mejor la detecci\u00f3n de placas. A partir de ahora nos referiremos a Platformio tambi\u00e9n como PIO, para abreviar. Si solo vamos a usar PIO Core, desde Python 2.7 hacemos pip install platformio Si quisieramos el PIO Ide, buscamos la extensi\u00f3n Platformio IDE en las extensiones de VSCode e instalar\u00e1 tanto el IDE como el Core. Estructura proyecto Cuando creamos un proyecto, podemos hacerlo por el IDE o con el CLI a trav\u00e9s de platformio init Se puede usar pio en lugar de platformio pio init Una vez tenemos el proyecto generado, tiene la siguiente estructura: .pioenvs -> Directorio que no se debe de tocar donde PIO guarda los build . include -> Directorio donde van los headers ( .h , .hpp ) del c\u00f3digo (si los hubiera). lib -> Directorio donde van las librer\u00edas privadas del proyecto (si las hubiera). src -> Directorio donde va o van los source ( .c , .cpp ) del c\u00f3digo. .gitignore -> Fichero .gitignore con la plantilla de PIO. .travis.yml -> Fichero para CI (Integraci\u00f3n Continua), es para usuarios avanzados. platformio.ini -> Fichero INI donde va la configuraci\u00f3n del proyecto. Ejemplo Blink Si hicieramos el t\u00edpico blink de Arduino, tendr\u00edamos que hacer en el IDE: Elegir nombre del proyecto Seleccionar la placa (Arduino UNO R3) Seleccionar el framework (Arduino) Desde el CLI har\u00edamos pio init --board uno El fichero platformio.ini tiene [env:uno] platform = atmelavr board = uno framework = arduino Solo debemos crear un fichero main.cpp dntro de src , con el c\u00f3digo #include \"Arduino.h\" // Set LED_BUILTIN if it is not defined by Arduino framework // #define LED_BUILTIN 13 void setup() { // initialize LED digital pin as an output. pinMode(LED_BUILTIN, OUTPUT); } void loop() { // turn the LED on (HIGH is the voltage level) digitalWrite(LED_BUILTIN, HIGH); // wait for a second delay(1000); // turn the LED off by making the voltage LOW digitalWrite(LED_BUILTIN, LOW); // wait for a second delay(1000); } Primero lo compilamos para ver si tiene alg\u00fan error: IDE -> Con el bot\u00f3n de PlatformIO: Build CLI -> Con el comando pio run Conectamos la placa y le subimos el programa con: IDE -> Con el bot\u00f3n PlatformIO: Upload CLI -> Con el comando pio run -t upload platformio.ini","title":"Platformio"},{"location":"hw/pio/pio-informacion/#platformio","text":"TODO Crear c\u00f3digo para hardware embebido no es sumamente complicado. El problema mayor que hay es programar / cargar el programa en los chips: Necesitas ciertas configuraciones para cada chip. Unas herramientas que por lo general son de cada fabricante, cerradas, y que suelen dejar bastante que desear. Depende tambi\u00e9n de la placa que use el chip. Etc Platformio es un ecosistema Open Source, multiplataforma, pensado para evitar todo esto. Con \u00e9l podremos programar desde un Arduino, a un ARM, o alguna de las much\u00edsimas placas que soporta. Lo \u00fanico que necesita para funcionar es tener instalado Python 2 en el ordenador. Documentaci\u00f3n Oficial de Platformio -> aqu\u00ed","title":"Platformio"},{"location":"hw/pio/pio-informacion/#instalacion","text":"Platformio tiene varias herramientas, pero para nosotros, las podemos dividir en dos: Platformio Core (CLI) Es el n\u00facleo de todo. Con esto gestionamos y cargamos nuestro c\u00f3digo en los chips. Tiene una herramienta de comandos (CLI) muy \u00fatil. Platformio IDE Es una extensi\u00f3n / plugin que se le pone a entornos gr\u00e1ficos para poder usar Platformio Core de manera m\u00e1s sencilla. El IDE \"por defecto\" donde usarlo es Visual Studio Code. Documentaci\u00f3n oficial para su instalaci\u00f3n -> aqu\u00ed Nota: Si usas Linux, debes instalar las 99-platformio-udev.rules para que vaya mejor la detecci\u00f3n de placas. A partir de ahora nos referiremos a Platformio tambi\u00e9n como PIO, para abreviar. Si solo vamos a usar PIO Core, desde Python 2.7 hacemos pip install platformio Si quisieramos el PIO Ide, buscamos la extensi\u00f3n Platformio IDE en las extensiones de VSCode e instalar\u00e1 tanto el IDE como el Core.","title":"Instalaci\u00f3n"},{"location":"hw/pio/pio-informacion/#estructura-proyecto","text":"Cuando creamos un proyecto, podemos hacerlo por el IDE o con el CLI a trav\u00e9s de platformio init Se puede usar pio en lugar de platformio pio init Una vez tenemos el proyecto generado, tiene la siguiente estructura: .pioenvs -> Directorio que no se debe de tocar donde PIO guarda los build . include -> Directorio donde van los headers ( .h , .hpp ) del c\u00f3digo (si los hubiera). lib -> Directorio donde van las librer\u00edas privadas del proyecto (si las hubiera). src -> Directorio donde va o van los source ( .c , .cpp ) del c\u00f3digo. .gitignore -> Fichero .gitignore con la plantilla de PIO. .travis.yml -> Fichero para CI (Integraci\u00f3n Continua), es para usuarios avanzados. platformio.ini -> Fichero INI donde va la configuraci\u00f3n del proyecto.","title":"Estructura proyecto"},{"location":"hw/pio/pio-informacion/#ejemplo-blink","text":"Si hicieramos el t\u00edpico blink de Arduino, tendr\u00edamos que hacer en el IDE: Elegir nombre del proyecto Seleccionar la placa (Arduino UNO R3) Seleccionar el framework (Arduino) Desde el CLI har\u00edamos pio init --board uno El fichero platformio.ini tiene [env:uno] platform = atmelavr board = uno framework = arduino Solo debemos crear un fichero main.cpp dntro de src , con el c\u00f3digo #include \"Arduino.h\" // Set LED_BUILTIN if it is not defined by Arduino framework // #define LED_BUILTIN 13 void setup() { // initialize LED digital pin as an output. pinMode(LED_BUILTIN, OUTPUT); } void loop() { // turn the LED on (HIGH is the voltage level) digitalWrite(LED_BUILTIN, HIGH); // wait for a second delay(1000); // turn the LED off by making the voltage LOW digitalWrite(LED_BUILTIN, LOW); // wait for a second delay(1000); } Primero lo compilamos para ver si tiene alg\u00fan error: IDE -> Con el bot\u00f3n de PlatformIO: Build CLI -> Con el comando pio run Conectamos la placa y le subimos el programa con: IDE -> Con el bot\u00f3n PlatformIO: Upload CLI -> Con el comando pio run -t upload","title":"Ejemplo Blink"},{"location":"hw/pio/pio-informacion/#platformioini","text":"","title":"platformio.ini"},{"location":"hw/upython/upython-informacion/","text":"Micropython La informaci\u00f3n oficial de Micropython est\u00e1 en su web -> Documentaci\u00f3n Oficial Preparar placa ESP8266 con Micropython Enlaces de ayuda: El tutorial oficial (en ingl\u00e9s) est\u00e1 -> aqu\u00ed . Se recomienda el tutorial en espa\u00f1ol de Python Canarias -> aqu\u00ed . Para instalar micropython en nuestra placa hay que seguir los siguientes pasos: Instalar esptool en Python (se recomienda usar un virtualenv). bash pip install esptool Con el comando esptool.py --help podemos ver todas las opciones. NOTA : Si estas en Windows o Mac , tienes que instalar los drivers del chip CH340 / CH341 (son los que permiten la comunicaci\u00f3n por el USB). Windows -> aqu\u00ed Mac -> aqu\u00ed Descargar el firmware (se recomienda el \u00faltimo estable) -> aqu\u00ed . Conectar la placa por el USB y descubrir en que puerto est\u00e1 conectada. Borrar la flash de la placa con el comando bash esptool.py --port <puerto> erase_flash Por ejemplo bash esptool.py --port /dev/ttyUSB0 erase_flash Flashear la placa con el firmware bash esptool.py --port <port> --baud <baudios> write_flash --flash_size=detect 0 <fichero-de-firmware> Por ejemplo bash esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash --flash_size=detect 0 esp8266-20190125-v1.10.bin En algunas placas es probable que d\u00e9 error y haya que a\u00f1adir la opci\u00f3n -fm dio , ejemplo bash esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash --flash_size=detect -fm dio 0 esp8266-20190125-v1.10.bin Preparar placa ESP32 con Micropython Enlaces de ayuda: El tutorial oficial (en ingl\u00e9s) -> aqu\u00ed . Tutorial espa\u00f1ol de Zerasul -> aqu\u00ed . Para instalar micropython en nuestra placa hay que seguir los siguientes pasos: Instalar esptool en Python (se recomienda usar un virtualenv). bash pip install esptool Con el comando esptool.py --help podemos ver todas las opciones. Descargar el firmware (se recomienda el \u00faltimo estable) -> aqu\u00ed . Conectar la placa por el USB y descubrir en que puerto est\u00e1 conectada. Borrar la flash de la placa con el comando bash esptool.py --port <puerto> erase_flash Por ejemplo bash esptool.py --port /dev/ttyUSB0 erase_flash Flashear la placa con el firmware bash esptool.py --chip esp32 --port <port> --baud <baudios> write_flash -z 0x1000 <fichero-de-firmware> Por ejemplo bash esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 115200 write_flash -z 0x1000 esp32-20190125-v1.10.bin En algunas placas es probable que d\u00e9 error y haya que a\u00f1adir la opci\u00f3n -fm dio , ejemplo bash esptool.py --chip esp32 --port /dev/ttyUSB0 write_flash --baud 115200 -z 0x1000 -fm dio esp32-20190125-v1.10.bin Acceso a la placa + REPL A la placa se puede acceder por dos medios: Serial Web Una vez se accede a la placa, estamos en el REPL (Read-Eval-Print-Loop) de esta. A efectos pr\u00e1cticos es un interprete de Python y adem\u00e1s cuenta con autocompletado. Para ver todas las opciones con las que cuenta escribimos help() Veremos todos los comandos y una peque\u00f1a ayuda. Los comandos m\u00e1s importantes son: Barra espaciadora -> Sirve para el autocompletado. Ctrl+C -> Para cerrar alg\u00fan script que hayamos abierto dentro de la placa. Ctrl+D -> Para hacer un reset por software (soft reset). Ctrl+E -> Modo pegar (de copia-pega). Tambi\u00e9n podremos usar esta funci\u00f3n para ver con que variables/constantes + funciones cuenta cada m\u00f3dulo. Por ejemplo importamos el m\u00f3dulo esp y vemos todo lo que tiene import esp help(esp) Para ver todos los m\u00f3dulos disponibles en la placa se hace help('modules') Comunicaci\u00f3n con la placa por serial -> SerialREPL Para poder entrar dentro de la placa, estas normalmente traen una UART (interfaz serie, como un USB dentro) accesible por los pines TX y RX. As\u00ed que con el cable usb y un programa que permita conexi\u00f3n serial podemos acceder a la placa. Programas con serial hay muchos, tanto con interfaz gr\u00e1fica (GUI) como por terminal: Windows MobaXterm PuTTY CoolTerm Mac CoolTerm Screen Linux PuTTY GTKTerm GNU screen Picocom CoolTerm Comunicaci\u00f3n con la placa por WiFi -> WebREPL Tambi\u00e9n se puede acceder al REPL de la placa a trav\u00e9s de una utilidad web, WebREPL, pero para ello debemos seguir los siguientes pasos: Abrir la utilidad WebREPL en un navegador web. Acceder a la placa por serial. Configurar la WiFi en modo AP (Punto de Acceso). Se adjunta peque\u00f1o script de ayuda python import network # Primero activamos el interfaz AP de la placa my_wifi = 'nombre-para-la-wifi' my_password = 'contrase\u00f1a-para-la-wifi' # Debe tener al menos 8 caracteres ap_lan = network.WLAN(network.AP_IF) ap_lan.active(True) # Devuelte True si la interfaz AP est\u00e1 activa ap_lan.config(essid=my_wifi, password=my_password) # Despues activamos el webrepl import webrepl_setup Despu\u00e9s debemos configurar el WebREPL con python import webrepl_setup Nos saldran las instrucciones para activar el WebREPL (activarlo), hay que ponerle una contrase\u00f1a de entre 4-9 caracteres y por \u00faltimo reiniciarlo. Conectarse a la WiFi de la placa. Ir a la web de WebREPL que est\u00e1 abierta en el navegador y darle al bot\u00f3n Connect (pedir\u00e1 el password puesto en el paso 4.). Primeros pasos Filesystem y sistema de ejecuci\u00f3n Cuando la placa arranca, se ejecuta un fichero interno, _boot.py , que monta todo el sistema de ficheros (filesystem). Una vez el sistema est\u00e1 montado, se ejecutan dos ficheros secuencialmente (si existen): boot.py -> Equivale al setup() de Arduino. main.py -> Equivale al loop() de Arduino. Configurar WiFi Las placas ESPx cuentan con dos interfaces de red: Station Interface -> Es para conectarse a una red WiFi. Access Point Interface -> Es para crear una red WiFi propia. Las dos interfaces pueden funcionar a la vez, es decir, que estar conectada la placa a una red WiFi y a la vez generar su propia red WiFi. Para poder configurarlos necesitamos trabajar con el m\u00f3dulo network . Conectarse a una red WiFi: ```python import network red = 'nombre-de-la-red-wifi' contrasena = 'pass-de-la-wifi' sta_if = network.WLAN(network.STA_IF) sta_if.active(True) sta_if.connect(red, contrasena) ``` Crear una red WiFi: ```python import network red = 'nombre-para-la-wifi' contrasena = 'contrasena-para-la-wifi' ap_if = network.WLAN(network.AP_IF) ap_if.active(True) ap_if.config(red, contrasena) ```","title":"Micropython"},{"location":"hw/upython/upython-informacion/#micropython","text":"La informaci\u00f3n oficial de Micropython est\u00e1 en su web -> Documentaci\u00f3n Oficial","title":"Micropython"},{"location":"hw/upython/upython-informacion/#preparar-placa-esp8266-con-micropython","text":"Enlaces de ayuda: El tutorial oficial (en ingl\u00e9s) est\u00e1 -> aqu\u00ed . Se recomienda el tutorial en espa\u00f1ol de Python Canarias -> aqu\u00ed . Para instalar micropython en nuestra placa hay que seguir los siguientes pasos: Instalar esptool en Python (se recomienda usar un virtualenv). bash pip install esptool Con el comando esptool.py --help podemos ver todas las opciones. NOTA : Si estas en Windows o Mac , tienes que instalar los drivers del chip CH340 / CH341 (son los que permiten la comunicaci\u00f3n por el USB). Windows -> aqu\u00ed Mac -> aqu\u00ed Descargar el firmware (se recomienda el \u00faltimo estable) -> aqu\u00ed . Conectar la placa por el USB y descubrir en que puerto est\u00e1 conectada. Borrar la flash de la placa con el comando bash esptool.py --port <puerto> erase_flash Por ejemplo bash esptool.py --port /dev/ttyUSB0 erase_flash Flashear la placa con el firmware bash esptool.py --port <port> --baud <baudios> write_flash --flash_size=detect 0 <fichero-de-firmware> Por ejemplo bash esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash --flash_size=detect 0 esp8266-20190125-v1.10.bin En algunas placas es probable que d\u00e9 error y haya que a\u00f1adir la opci\u00f3n -fm dio , ejemplo bash esptool.py --port /dev/ttyUSB0 --baud 115200 write_flash --flash_size=detect -fm dio 0 esp8266-20190125-v1.10.bin","title":"Preparar placa ESP8266 con Micropython"},{"location":"hw/upython/upython-informacion/#preparar-placa-esp32-con-micropython","text":"Enlaces de ayuda: El tutorial oficial (en ingl\u00e9s) -> aqu\u00ed . Tutorial espa\u00f1ol de Zerasul -> aqu\u00ed . Para instalar micropython en nuestra placa hay que seguir los siguientes pasos: Instalar esptool en Python (se recomienda usar un virtualenv). bash pip install esptool Con el comando esptool.py --help podemos ver todas las opciones. Descargar el firmware (se recomienda el \u00faltimo estable) -> aqu\u00ed . Conectar la placa por el USB y descubrir en que puerto est\u00e1 conectada. Borrar la flash de la placa con el comando bash esptool.py --port <puerto> erase_flash Por ejemplo bash esptool.py --port /dev/ttyUSB0 erase_flash Flashear la placa con el firmware bash esptool.py --chip esp32 --port <port> --baud <baudios> write_flash -z 0x1000 <fichero-de-firmware> Por ejemplo bash esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 115200 write_flash -z 0x1000 esp32-20190125-v1.10.bin En algunas placas es probable que d\u00e9 error y haya que a\u00f1adir la opci\u00f3n -fm dio , ejemplo bash esptool.py --chip esp32 --port /dev/ttyUSB0 write_flash --baud 115200 -z 0x1000 -fm dio esp32-20190125-v1.10.bin","title":"Preparar placa ESP32 con Micropython"},{"location":"hw/upython/upython-informacion/#acceso-a-la-placa-repl","text":"A la placa se puede acceder por dos medios: Serial Web Una vez se accede a la placa, estamos en el REPL (Read-Eval-Print-Loop) de esta. A efectos pr\u00e1cticos es un interprete de Python y adem\u00e1s cuenta con autocompletado. Para ver todas las opciones con las que cuenta escribimos help() Veremos todos los comandos y una peque\u00f1a ayuda. Los comandos m\u00e1s importantes son: Barra espaciadora -> Sirve para el autocompletado. Ctrl+C -> Para cerrar alg\u00fan script que hayamos abierto dentro de la placa. Ctrl+D -> Para hacer un reset por software (soft reset). Ctrl+E -> Modo pegar (de copia-pega). Tambi\u00e9n podremos usar esta funci\u00f3n para ver con que variables/constantes + funciones cuenta cada m\u00f3dulo. Por ejemplo importamos el m\u00f3dulo esp y vemos todo lo que tiene import esp help(esp) Para ver todos los m\u00f3dulos disponibles en la placa se hace help('modules')","title":"Acceso a la placa + REPL"},{"location":"hw/upython/upython-informacion/#comunicacion-con-la-placa-por-serial-serialrepl","text":"Para poder entrar dentro de la placa, estas normalmente traen una UART (interfaz serie, como un USB dentro) accesible por los pines TX y RX. As\u00ed que con el cable usb y un programa que permita conexi\u00f3n serial podemos acceder a la placa. Programas con serial hay muchos, tanto con interfaz gr\u00e1fica (GUI) como por terminal: Windows MobaXterm PuTTY CoolTerm Mac CoolTerm Screen Linux PuTTY GTKTerm GNU screen Picocom CoolTerm","title":"Comunicaci\u00f3n con la placa por serial -&gt; SerialREPL"},{"location":"hw/upython/upython-informacion/#comunicacion-con-la-placa-por-wifi-webrepl","text":"Tambi\u00e9n se puede acceder al REPL de la placa a trav\u00e9s de una utilidad web, WebREPL, pero para ello debemos seguir los siguientes pasos: Abrir la utilidad WebREPL en un navegador web. Acceder a la placa por serial. Configurar la WiFi en modo AP (Punto de Acceso). Se adjunta peque\u00f1o script de ayuda python import network # Primero activamos el interfaz AP de la placa my_wifi = 'nombre-para-la-wifi' my_password = 'contrase\u00f1a-para-la-wifi' # Debe tener al menos 8 caracteres ap_lan = network.WLAN(network.AP_IF) ap_lan.active(True) # Devuelte True si la interfaz AP est\u00e1 activa ap_lan.config(essid=my_wifi, password=my_password) # Despues activamos el webrepl import webrepl_setup Despu\u00e9s debemos configurar el WebREPL con python import webrepl_setup Nos saldran las instrucciones para activar el WebREPL (activarlo), hay que ponerle una contrase\u00f1a de entre 4-9 caracteres y por \u00faltimo reiniciarlo. Conectarse a la WiFi de la placa. Ir a la web de WebREPL que est\u00e1 abierta en el navegador y darle al bot\u00f3n Connect (pedir\u00e1 el password puesto en el paso 4.).","title":"Comunicaci\u00f3n con la placa por WiFi -&gt; WebREPL"},{"location":"hw/upython/upython-informacion/#primeros-pasos","text":"","title":"Primeros pasos"},{"location":"hw/upython/upython-informacion/#filesystem-y-sistema-de-ejecucion","text":"Cuando la placa arranca, se ejecuta un fichero interno, _boot.py , que monta todo el sistema de ficheros (filesystem). Una vez el sistema est\u00e1 montado, se ejecutan dos ficheros secuencialmente (si existen): boot.py -> Equivale al setup() de Arduino. main.py -> Equivale al loop() de Arduino.","title":"Filesystem y sistema de ejecuci\u00f3n"},{"location":"hw/upython/upython-informacion/#configurar-wifi","text":"Las placas ESPx cuentan con dos interfaces de red: Station Interface -> Es para conectarse a una red WiFi. Access Point Interface -> Es para crear una red WiFi propia. Las dos interfaces pueden funcionar a la vez, es decir, que estar conectada la placa a una red WiFi y a la vez generar su propia red WiFi. Para poder configurarlos necesitamos trabajar con el m\u00f3dulo network . Conectarse a una red WiFi: ```python import network red = 'nombre-de-la-red-wifi' contrasena = 'pass-de-la-wifi' sta_if = network.WLAN(network.STA_IF) sta_if.active(True) sta_if.connect(red, contrasena) ``` Crear una red WiFi: ```python import network red = 'nombre-para-la-wifi' contrasena = 'contrasena-para-la-wifi' ap_if = network.WLAN(network.AP_IF) ap_if.active(True) ap_if.config(red, contrasena) ```","title":"Configurar WiFi"},{"location":"sw/linux/linux-fecha-hora/","text":"Fecha y Hora Para ajustar la fecha usamos el comando date Fecha sudo date +%Y%m%d -s \"20170628\" Hora (formato 24 horas) sudo date +%T -s \"12:47:24\" Hora (formato 12 horas) sudo date +%T%p -s \"12:47:24AM\" sudo date +%T%p -s \"12:47:24PM\" Para m\u00e1s info mirar siempre la ayuda date --help Referencias Fecha y Hora en la terminal","title":"Fecha y Hora"},{"location":"sw/linux/linux-fecha-hora/#fecha-y-hora","text":"Para ajustar la fecha usamos el comando date","title":"Fecha y Hora"},{"location":"sw/linux/linux-fecha-hora/#fecha","text":"sudo date +%Y%m%d -s \"20170628\"","title":"Fecha"},{"location":"sw/linux/linux-fecha-hora/#hora-formato-24-horas","text":"sudo date +%T -s \"12:47:24\"","title":"Hora (formato 24 horas)"},{"location":"sw/linux/linux-fecha-hora/#hora-formato-12-horas","text":"sudo date +%T%p -s \"12:47:24AM\" sudo date +%T%p -s \"12:47:24PM\"","title":"Hora (formato 12 horas)"},{"location":"sw/linux/linux-fecha-hora/#para-mas-info-mirar-siempre-la-ayuda","text":"date --help","title":"Para m\u00e1s info mirar siempre la ayuda"},{"location":"sw/linux/linux-fecha-hora/#referencias","text":"Fecha y Hora en la terminal","title":"Referencias"},{"location":"sw/linux/linux-ficheros/","text":"Encontrar un fichero Supongamos que quiero encontrar el fichero config.ini y por ejemplo queremos buscarlo en el directorio home (~/). Desde la terminal pondr\u00eda find ~/ -type f -name \"config.ini\" La versi\u00f3n Python de esto se explica aqu\u00ed -> Python version Aqu\u00ed por ejemplo buscamos todos los ficheros .txt en el directorio home import os, fnmatch def find(pattern, path): result = [] for root, dirs, files in os.walk(path): for name in files: if fnmatch.fnmatch(name, pattern): result.append(os.path.join(root, name)) return result find('*.txt', '/home') Referencias Link de ayuda","title":"Ficheros"},{"location":"sw/linux/linux-ficheros/#encontrar-un-fichero","text":"Supongamos que quiero encontrar el fichero config.ini y por ejemplo queremos buscarlo en el directorio home (~/). Desde la terminal pondr\u00eda find ~/ -type f -name \"config.ini\" La versi\u00f3n Python de esto se explica aqu\u00ed -> Python version Aqu\u00ed por ejemplo buscamos todos los ficheros .txt en el directorio home import os, fnmatch def find(pattern, path): result = [] for root, dirs, files in os.walk(path): for name in files: if fnmatch.fnmatch(name, pattern): result.append(os.path.join(root, name)) return result find('*.txt', '/home')","title":"Encontrar un fichero"},{"location":"sw/linux/linux-ficheros/#referencias","text":"Link de ayuda","title":"Referencias"},{"location":"sw/redes/redes-iptables/","text":"iptables TODO","title":"iptables"},{"location":"sw/redes/redes-iptables/#iptables","text":"TODO","title":"iptables"},{"location":"sw/redes/redes-ipv6/","text":"IPv6 TODO","title":"IPv6"},{"location":"sw/redes/redes-ipv6/#ipv6","text":"TODO","title":"IPv6"},{"location":"sw/redes/redes-linux/","text":"REDES Redes WiFi's Para ver las redes WiFi disponibles usamos el comando sudo iw dev wlan0 scan | grep SSID Escanear dispositivos dentro de una red Primero instalamos nmap sudo apt install nmap Despu\u00e9s comprobamos con ifconfig que IP tenemos y que m\u00e1scara de red sudo ifconfig Mi IP es 192.168.1.132 y la m\u00e1scara de red es 255.255.255.0 (24 bits). Luego uso este comando para ver los dispositivos en mi red sudo nmap -sP 192.168.1.0/24 Redireccionamiento del Tr\u00e1fico -> IPTables","title":"Linux"},{"location":"sw/redes/redes-linux/#redes","text":"","title":"REDES"},{"location":"sw/redes/redes-linux/#redes-wifis","text":"Para ver las redes WiFi disponibles usamos el comando sudo iw dev wlan0 scan | grep SSID","title":"Redes WiFi's"},{"location":"sw/redes/redes-linux/#escanear-dispositivos-dentro-de-una-red","text":"Primero instalamos nmap sudo apt install nmap Despu\u00e9s comprobamos con ifconfig que IP tenemos y que m\u00e1scara de red sudo ifconfig Mi IP es 192.168.1.132 y la m\u00e1scara de red es 255.255.255.0 (24 bits). Luego uso este comando para ver los dispositivos en mi red sudo nmap -sP 192.168.1.0/24","title":"Escanear dispositivos dentro de una red"},{"location":"sw/redes/redes-linux/#redireccionamiento-del-trafico-iptables","text":"","title":"Redireccionamiento del Tr\u00e1fico -&gt; IPTables"},{"location":"sw/redes/redes-ssh/","text":"SSH Instalaci\u00f3n y configuraci\u00f3n Servidor Instalaci\u00f3n sudo apt install openssh-server Esto genera 4 pares de ficheros de clave p\u00fablica-privada en el servidor con 4 algoritmos de cifrado: Algoritmo Fichero Clave Privada Fichero Clave P\u00fablica DSA ssh_host_dsa_key ssh_host_dsa_key.pub ECDSA ssh_host_ecdsa_key ssh_host_ecdsa_key.pub ED25519 ssh_host_ed25519_key ssh_host_ed25519_key.pub RSA ssh_host_rsa_key ssh_host_rsa_key.pub Configuraci\u00f3n en /etc/ssh/sshd_config . Una buena pr\u00e1ctica es configurar que el acceso por root solo se haga a trav\u00e9s de clave p\u00fablica con PermitRootLogin without-password Cliente Instalaci\u00f3n sudo apt install openssh-client Configuraci\u00f3n en /etc/ssh/ssh_config Acceso con usuario-contrase\u00f1a Lo t\u00edpico para iniciar sesi\u00f3n en SSH es usar las credenciales del usuario y contrase\u00f1a ssh <usuario>@<ip> O tambi\u00e9n se puede usar ssh -l <usuarios> <ip> Luego nos pedir\u00e1 la contrase\u00f1a, y la primera vez nos pedir\u00e1 aceptar la conexi\u00f3n. Ejecutar comandos sin abrir una terminal remota Tambi\u00e9n se pueden ejecutar comandos o scripts sin abrir una consola remota ssh <user>@<ip> <comando> ssh <user>@<ip> '<script>' Acceso con par clave p\u00fablico-privada sin passphrase Lo l\u00f3gico en SSH es usar el par claves p\u00fablico-privada para acceder por SSH, y no tener que estar poniendo usuario-contrase\u00f1a cada vez que queremos acceder (a parte de que es menos inseguro). Crear par de clave privada-p\u00fablica (en el equipo local): Para crear el par de claves usamos el comando bash ssh-keygen -t <algoritmo> <algortimo> -> dsa | ed25519 | rsa | rsa1 Saldr\u00e1 un di\u00e1logo y nos pedir\u00e1 el nombre para el fichero. Tambi\u00e9n nos pedir\u00e1 un passphrase (frase de paso), que es opcional, lo dejamos en blanco. Esto lo vemos en la siguiente secci\u00f3n. Esto generar\u00e1 dos ficheros, por ejemplo si usamos rsa y el nombre por defecto, tendremos: En ~/.ssh/ los ficheros de claves. id_rsa clave privada. id_rsa.pub clave p\u00fablica. Copiar clave p\u00fablica (en el equipo remoto): Para poder acceder con este m\u00e9todo, hay que \"publicar\" la clave p\u00fablica en el equipo remoto. Esto consiste en meter la clave p\u00fablica en el fichero ~/.ssh/authorized_keys del equipo remoto. Hay varios m\u00e9todos pero el m\u00e1s sencillo es con el comando bash ssh-copy-id -i <ruta al fichero de clave privada> <usuario>@<ip> Por ejemplo, si queremos copiar nuestra rsa clave que est\u00e1 en ~/.ssh/ en el equipo con usuario pepe con la ip 192.168.1.13 haremos bash ssh-copy-id -i ~/.ssh/id_rsa pepe@192.168.1.13 Ahora para acceder no nos pedir\u00e1 contrase\u00f1a. Ventajas: Es m\u00e1s seguro Si se cambia el password del usuario, nosotros no necesitaremos saberlo (no nos afecta). Acceso con par p\u00fablico-privada con passphrase El passphrase es un second factor authentication. Si a\u00f1adimos una passphrase a nuestro par de claves, al acceder por ssh nos la pedir\u00e1, como cuando accedemos por usuario y la contrase\u00f1a. Ventajas: Es m\u00e1s seguro. Si alguien nos roba la clave privada, no podr\u00e1 usarla si no sabe la passphrase. Para que sea m\u00e1s c\u00f3modo esto, usamos el programa ssh-agent , y as\u00ed solo tendremos que poner el passphrase la primera vez y ya est\u00e1. ssh-agent El programa / servicio ssh-agent nos permite no tener que estar introduciendo la passphrase cada vez que nos conectemos. Lo ponemos una vez y listo. Los pasos para que todo esto funcionen son: Comprobamos que est\u00e9 ejecutando ssh-agent bash ps aux | grep ssh-agent Si no se est\u00e1 ejecutando lo activamos con bash ssh-agent /bin/bash Una vez se est\u00e1 ejecutando, se a\u00f1ade la clave privada bash ssh-add <ruta fichero clave privada> Por ejemplo bash ssh-add ~/.ssh/id_rsa Utilidades de ssh-agent : Ver las claves cargadas bash ssh-add -L Ver sus huellas bash ssh-add -l Para eliminar una clave bash ssh-add -d <fichero-clave-privada> Eliminar todas las claves bash ssh-add -D Crear clave p\u00fablica (si no existe) desde la clave privada Supongamos que por lo que sea solo tenemos una clave privada y queremos generar la p\u00fablica bash ssh-keygen -y -f <fichero clave privada> >> <fichero clave p\u00fablica> * Por ejemplo ```bash ssh-keygen -y -f id_rsa >> id_rsa.pub ``` El proceso inverso, sacar la privada de la p\u00fablica, no es posible. authorized_keys -> Gestionar accesos a mi equipo El servidor SSH guarda las claves p\u00fablicas autorizadas para que puedan en el fichero ~/.ssh/authorized_keys . Si quisiera que una clave p\u00fablica no se pudiera usar para acceder en mi servidor, la borro de ese fichero. El formato que tiene cada l\u00ednea es <tipo-clave> <clave-p\u00fablica-cliente> <comentario> El <tipo-clave> me dice el algoritmo con el que se ha creado. La <clave-publica-cliente> es la clave del cliente que se va a conectar a mi equipo. El <comentario> suele ser el <usuario>@<equipo> . known_hosts -> Gestionar equipos a los que accedo El cliente tiene un control de todos los servidores SSH a los que se conecta. Esto lo hace guardando las claves p\u00fablicas de los servidores en el fichero ~/.ssh/known_hosts . Tiene 3 campos <hash-ip-equipo-remoto> <tipo-clave> <clave-publica-servidor> Problemas con acceso a la misma ip pero distintos hosts Supongamos que yo ten\u00eda un pc al que acced\u00eda con la ip 192.168.1.120 . Por lo que sea, he formateado y trato de volver a acceder a esa m\u00e1quina formateada. Lo m\u00e1s seguro es que me salga un mensaje de error diciendome que el remote host ha cambiado (del que yo ten\u00eda guardado), y puedo sufrir un ataque man-in-the-middle . Si estamos completamente seguros que no hay nadie en medio, y accedo directamente a mi m\u00e1quina, l que debemos hacer es borrar el known_hosts el anterior equipo. Tranquilos, que el propio comando te lo dan en el mensaje de ayuda, solo hay que hacer copia-pega. El comando es as\u00ed: ssh-keygen [-f \"<path-to-known_hosts>\"] -R <ip> En nuestro caso ser\u00eda ssh-keygen -f \"~/.ssh/known_hosts\" -R 192.168.1.120 . La parte de -f \"~/.ssh/known_hosts\" es opcional, podr\u00edamos hacer ssh-keygen -R 192.168.1.120 y ser\u00eda totalmente v\u00e1lido. Forwarding Esta t\u00e9cnica permite reenviar \"algo\", desde un equipo al otro, pasando por otro. Agent Forwarding Imaginemos que existen 3 m\u00e1quinas, A, B, C, y tenemos el siguiente problema: A <-> B = A y B se pueden comunicar por SSH. B <-> C = B y C se pueden comunicar por SSH. A C = A y C no se pueden comunicar por SSH. Agent forwarding nos permite que A <-> C a trav\u00e9s de B, es decir A <-B-> C. Esto es posible haciendo: Activando en el servidor de B /etc/ssh/sshd_config la opci\u00f3n bash AllowAgentForwarding yes Activando en el agente / cliente de B /etc/ssh/ssh_config la opci\u00f3n bash ForwardAgent yes As\u00ed ahora, para hacer A <-> C, lo que har\u00eda es: Accedo desde A por SSH a B = A -> B. Accedo desde B por SSH a C = B -> C. Y ahora en la shell ver\u00e9 que estoy en C. Parece obvio, pero si estas opciones no est\u00e1n activadas, no se podr\u00eda hacer. La idea al final de todo esto, es que si tengo muchas m\u00e1quinas C's: C1, C2, C3, etc. Es recomendable que no est\u00e9n expuestas al exterior. Lo mejor es tener un \"basti\u00f3n\", es decir, una m\u00e1quina B, que est\u00e1 autenticada con claves publico-privada + passphrase con cada Cx, y yo desde A solo tengo acceso a B. X11 Forwarding Si accedo por SSH de una m\u00e1quina A a otra B, A -> B, y ejecuto una aplicaci\u00f3n gr\u00e1fica (X11), no la veo en mi equipo A, solo se ve en el equipo B. La forma de poder ver en A una app X11 ejecutada en B es con la t\u00e9cnica X11 forwarding. Para poder aplicar esta t\u00e9cnica tengo que: Habilitar en el servidor de B /etc/ssh/sshd_config las opciones bash X11Forwarding yes X11DisplayOffset 10 Si lo que quiero es ejecutar una aplicaci\u00f3n gr\u00e1fica de C en mi m\u00e1quina A, debo de: Habilitar en el cliente/agente de B /etc/ssh/ssh_config la opci\u00f3n bash FordwardX11 yes Al ejecutar una app X11 remota, aunque la vea en mi equipo local, los recursos que consume son de la m\u00e1quina remota. Transferir ficheros por SSH SSH no solo permite iniciar sesiones o ejecutar comandos en remoto. Tambi\u00e9n permite la transferencia de ficheros a trav\u00e9s de dos protocolos, SCP y SFTP. SCP SCP es un protocolo que se puede usar con SSH para poder compartir ficheros. Su sintaxis es similar a la cp , pero \"generalizada\" scp [[<usuario-origen>@]<host-origen>:]<fichero-origen> [[<usuario-destino>@]<host-destino>:]<fichero-destino> scp -r [[<usuario-origen>@]<host-origen>:]<directorio-origen> [[<usuario-destino>@]<host-destino>:]<directorio-destino> Visto as\u00ed es muy lioso, vamos a verlo con ejemplos. M\u00e1quina Usuario Host A usera 192.168.1.120 B userb 192.168.1.121 C userc 192.168.1.122 En todos los ejemplos voy a suponer que estoy en la m\u00e1quina A: Pasar fichero mifichero.txt en el $HOME origen, a la carpeta micarpeta del $HOME destino A -> B (de local a remoto) bash scp $HOME/mifichero.txt userb@192.168.1.121:$HOME/micarpeta/ B -> A (de remoto a local) bash scp userb@192.168.121:$HOME/fichero.txt $HOME/micarpeta/ B -> C (de remoto a remoto) bash scp userb@192.168.1.121:$HOME/fichero.txt userc@192.168.1.122:$HOME/micarpeta/ Pasar la carpeta micarpeta del $HOME origen al $HOME destino A -> B (de local a remoto) bash scp -r $HOME/micarpeta userb@192.168.1.121:$HOME/ B -> A (de remoto a local) bash scp -r userb@192.168.1.121:$HOME/micarpeta $HOME/ B -> C (de remoto a remoto) bash scp -r userb@192.168.1.121:$HOME/micarpeta userc@192.168.1.122:$HOME/ SFTP SFTP es SSH FTP, es decir, una comunicaci\u00f3n FTP sobre SSH. No confundir con FTPS, que es una variaci\u00f3n de FTP securizada. Para usarla hacemos sftp <usuario>@<host> Se nos abrir\u00e1 una shell que podemos usar como si fuera una shell FTP. Tambi\u00e9n podemos abrir una conexi\u00f3n SFTP desde cualquier programa FTP cliente como Filezilla T\u00faneles SSH Esto se conoce como Port Fordwarding o TCP Fordwarding. Supongamos que tenemos: Maquina Usuario Host Puerto SSH A usera hosta porta A<->B B userb hostb portb B<->A, B<->C C userc hostc portc C<->B Con este escenario, tenemos 3 tipos de t\u00faneles: Local Fordwarding (-L): Traer un puerto (servicio) remoto (de A \u00f3 C) a uno local (de C \u00f3 A) por B. Remote Fordwarding (-R): Enviar un puerto (servicio) local (de A \u00f3 C) a uno remoto (de C \u00f3 A) por B. Dynamic Fordwarding (-D): ni idea B\u00e1sicamente consiste en traer / enviar un puerto local / remoto desde una m\u00e1quina a otra, pasando por una m\u00e1quina intermedia. Local Fordwarding Local Fordwarding consiste en traer un puerto remoto (de otra m\u00e1quina) a un puerto de mi m\u00e1quina local. Es decir, es como si desde mi puerto local estuviera en el puerto remoto de la otra m\u00e1quina. Comando y variantes: ssh -f -N -L [<bind-address>:]<port>:<host>:<host-port> [<user>@<host>] ssh -f -N -L [<bind-address>:]<port>:<remote-socket> [<user>@<host>] ssh -f -N -L <local-socket>:<host>:<host-port> [<user>@<host>] ssh -f -N -L <local-socket>:<remote-socket> [<user>@<host>] Supongamos que A con acceso libre a Internet, y C con acceso restringido Internet (no puede acceder a ciertos servicios / web). As\u00ed que nos interesar\u00eda: Desde C, traer hosta:porta a hostc:portc, por B bash ssh -f -NL portc:hosta:porta userb@hostb Ahora supongamos que C tiene un servicio NGINX en su puerto 80, y lo queremos poder consumir: Desde A, traer el puerto 80 de C al puerto 1080 de A, por B bash ssh -f -NL 1080:hostc:80 userb@hostb Tambi\u00e9n podr\u00edamos hacer: Desde B, traer el pierto de C al puerto 1080 de B bash ssh -f -NL Desde A, consumir ese NGINX accediendo en el navegador a hostb:1080 Remote Forwarding Remote Fordwarding consiste en enviar un puerto local (de mi m\u00e1quina) a un puerto de una m\u00e1quina remota. Es decir, es como si desde un puerto de una m\u00e1quina remota estuviera en el puerto de mi m\u00e1quina local. Comando y sus variantes: ssh -f -N -R [<bind-address>:]<port>:<host>:<host-port> [<user>@<host>] ssh -f -N -R [<bind-address>:]<port>:<local-socket> [<user>@<host>] ssh -f -N -R <remote-socket>:<host>:<host-port> [<user>@<host>] ssh -f -N -R <remote-socket>:<local-socket> [<user>@<host>] ssh -f -N -R [<bind-address>:]<port> [<user>@<host>] Supongamos que Dynamic Fordwarding ssh -f -N -D [<bind-address>:]<port> Conexi\u00f3n a Github con par clave p\u00fablico-privada Generar par de claves con passphrase mediante bash ssh-keygen -t rsa -b 4096 -C \"<github email>\" A\u00f1adir la clave al ssh-agent bash ssh-add -K <ruta al fichero de clave privada> A\u00f1adir la clave p\u00fablica en Github Copiar la clave p\u00fablica en el clipboard bash pbcopy < <ruta al fichero de clave p\u00fablica> Pegar la clave p\u00fablica en Github Ir a Settings -> SSH and GPG Keys -> New SSH or Add SSH Key Poner un t\u00edtulo para que se entienda de que equipo es la clave y pegar la clave en el campo Key Por \u00faltimo, darle al bot\u00f3n Add SSH key , confirmar y listo.","title":"SSH"},{"location":"sw/redes/redes-ssh/#ssh","text":"","title":"SSH"},{"location":"sw/redes/redes-ssh/#instalacion-y-configuracion","text":"","title":"Instalaci\u00f3n y configuraci\u00f3n"},{"location":"sw/redes/redes-ssh/#servidor","text":"Instalaci\u00f3n sudo apt install openssh-server Esto genera 4 pares de ficheros de clave p\u00fablica-privada en el servidor con 4 algoritmos de cifrado: Algoritmo Fichero Clave Privada Fichero Clave P\u00fablica DSA ssh_host_dsa_key ssh_host_dsa_key.pub ECDSA ssh_host_ecdsa_key ssh_host_ecdsa_key.pub ED25519 ssh_host_ed25519_key ssh_host_ed25519_key.pub RSA ssh_host_rsa_key ssh_host_rsa_key.pub Configuraci\u00f3n en /etc/ssh/sshd_config . Una buena pr\u00e1ctica es configurar que el acceso por root solo se haga a trav\u00e9s de clave p\u00fablica con PermitRootLogin without-password","title":"Servidor"},{"location":"sw/redes/redes-ssh/#cliente","text":"Instalaci\u00f3n sudo apt install openssh-client Configuraci\u00f3n en /etc/ssh/ssh_config","title":"Cliente"},{"location":"sw/redes/redes-ssh/#acceso-con-usuario-contrasena","text":"Lo t\u00edpico para iniciar sesi\u00f3n en SSH es usar las credenciales del usuario y contrase\u00f1a ssh <usuario>@<ip> O tambi\u00e9n se puede usar ssh -l <usuarios> <ip> Luego nos pedir\u00e1 la contrase\u00f1a, y la primera vez nos pedir\u00e1 aceptar la conexi\u00f3n.","title":"Acceso con usuario-contrase\u00f1a"},{"location":"sw/redes/redes-ssh/#ejecutar-comandos-sin-abrir-una-terminal-remota","text":"Tambi\u00e9n se pueden ejecutar comandos o scripts sin abrir una consola remota ssh <user>@<ip> <comando> ssh <user>@<ip> '<script>'","title":"Ejecutar comandos sin abrir una terminal remota"},{"location":"sw/redes/redes-ssh/#acceso-con-par-clave-publico-privada-sin-passphrase","text":"Lo l\u00f3gico en SSH es usar el par claves p\u00fablico-privada para acceder por SSH, y no tener que estar poniendo usuario-contrase\u00f1a cada vez que queremos acceder (a parte de que es menos inseguro). Crear par de clave privada-p\u00fablica (en el equipo local): Para crear el par de claves usamos el comando bash ssh-keygen -t <algoritmo> <algortimo> -> dsa | ed25519 | rsa | rsa1 Saldr\u00e1 un di\u00e1logo y nos pedir\u00e1 el nombre para el fichero. Tambi\u00e9n nos pedir\u00e1 un passphrase (frase de paso), que es opcional, lo dejamos en blanco. Esto lo vemos en la siguiente secci\u00f3n. Esto generar\u00e1 dos ficheros, por ejemplo si usamos rsa y el nombre por defecto, tendremos: En ~/.ssh/ los ficheros de claves. id_rsa clave privada. id_rsa.pub clave p\u00fablica. Copiar clave p\u00fablica (en el equipo remoto): Para poder acceder con este m\u00e9todo, hay que \"publicar\" la clave p\u00fablica en el equipo remoto. Esto consiste en meter la clave p\u00fablica en el fichero ~/.ssh/authorized_keys del equipo remoto. Hay varios m\u00e9todos pero el m\u00e1s sencillo es con el comando bash ssh-copy-id -i <ruta al fichero de clave privada> <usuario>@<ip> Por ejemplo, si queremos copiar nuestra rsa clave que est\u00e1 en ~/.ssh/ en el equipo con usuario pepe con la ip 192.168.1.13 haremos bash ssh-copy-id -i ~/.ssh/id_rsa pepe@192.168.1.13 Ahora para acceder no nos pedir\u00e1 contrase\u00f1a. Ventajas: Es m\u00e1s seguro Si se cambia el password del usuario, nosotros no necesitaremos saberlo (no nos afecta).","title":"Acceso con par clave p\u00fablico-privada sin passphrase"},{"location":"sw/redes/redes-ssh/#acceso-con-par-publico-privada-con-passphrase","text":"El passphrase es un second factor authentication. Si a\u00f1adimos una passphrase a nuestro par de claves, al acceder por ssh nos la pedir\u00e1, como cuando accedemos por usuario y la contrase\u00f1a. Ventajas: Es m\u00e1s seguro. Si alguien nos roba la clave privada, no podr\u00e1 usarla si no sabe la passphrase. Para que sea m\u00e1s c\u00f3modo esto, usamos el programa ssh-agent , y as\u00ed solo tendremos que poner el passphrase la primera vez y ya est\u00e1.","title":"Acceso con par p\u00fablico-privada con passphrase"},{"location":"sw/redes/redes-ssh/#ssh-agent","text":"El programa / servicio ssh-agent nos permite no tener que estar introduciendo la passphrase cada vez que nos conectemos. Lo ponemos una vez y listo. Los pasos para que todo esto funcionen son: Comprobamos que est\u00e9 ejecutando ssh-agent bash ps aux | grep ssh-agent Si no se est\u00e1 ejecutando lo activamos con bash ssh-agent /bin/bash Una vez se est\u00e1 ejecutando, se a\u00f1ade la clave privada bash ssh-add <ruta fichero clave privada> Por ejemplo bash ssh-add ~/.ssh/id_rsa Utilidades de ssh-agent : Ver las claves cargadas bash ssh-add -L Ver sus huellas bash ssh-add -l Para eliminar una clave bash ssh-add -d <fichero-clave-privada> Eliminar todas las claves bash ssh-add -D Crear clave p\u00fablica (si no existe) desde la clave privada Supongamos que por lo que sea solo tenemos una clave privada y queremos generar la p\u00fablica bash ssh-keygen -y -f <fichero clave privada> >> <fichero clave p\u00fablica> * Por ejemplo ```bash ssh-keygen -y -f id_rsa >> id_rsa.pub ``` El proceso inverso, sacar la privada de la p\u00fablica, no es posible.","title":"ssh-agent"},{"location":"sw/redes/redes-ssh/#authorized_keys-gestionar-accesos-a-mi-equipo","text":"El servidor SSH guarda las claves p\u00fablicas autorizadas para que puedan en el fichero ~/.ssh/authorized_keys . Si quisiera que una clave p\u00fablica no se pudiera usar para acceder en mi servidor, la borro de ese fichero. El formato que tiene cada l\u00ednea es <tipo-clave> <clave-p\u00fablica-cliente> <comentario> El <tipo-clave> me dice el algoritmo con el que se ha creado. La <clave-publica-cliente> es la clave del cliente que se va a conectar a mi equipo. El <comentario> suele ser el <usuario>@<equipo> .","title":"authorized_keys -&gt; Gestionar accesos a mi equipo"},{"location":"sw/redes/redes-ssh/#known_hosts-gestionar-equipos-a-los-que-accedo","text":"El cliente tiene un control de todos los servidores SSH a los que se conecta. Esto lo hace guardando las claves p\u00fablicas de los servidores en el fichero ~/.ssh/known_hosts . Tiene 3 campos <hash-ip-equipo-remoto> <tipo-clave> <clave-publica-servidor>","title":"known_hosts -&gt; Gestionar equipos a los que accedo"},{"location":"sw/redes/redes-ssh/#problemas-con-acceso-a-la-misma-ip-pero-distintos-hosts","text":"Supongamos que yo ten\u00eda un pc al que acced\u00eda con la ip 192.168.1.120 . Por lo que sea, he formateado y trato de volver a acceder a esa m\u00e1quina formateada. Lo m\u00e1s seguro es que me salga un mensaje de error diciendome que el remote host ha cambiado (del que yo ten\u00eda guardado), y puedo sufrir un ataque man-in-the-middle . Si estamos completamente seguros que no hay nadie en medio, y accedo directamente a mi m\u00e1quina, l que debemos hacer es borrar el known_hosts el anterior equipo. Tranquilos, que el propio comando te lo dan en el mensaje de ayuda, solo hay que hacer copia-pega. El comando es as\u00ed: ssh-keygen [-f \"<path-to-known_hosts>\"] -R <ip> En nuestro caso ser\u00eda ssh-keygen -f \"~/.ssh/known_hosts\" -R 192.168.1.120 . La parte de -f \"~/.ssh/known_hosts\" es opcional, podr\u00edamos hacer ssh-keygen -R 192.168.1.120 y ser\u00eda totalmente v\u00e1lido.","title":"Problemas con acceso a la misma ip pero distintos hosts"},{"location":"sw/redes/redes-ssh/#forwarding","text":"Esta t\u00e9cnica permite reenviar \"algo\", desde un equipo al otro, pasando por otro.","title":"Forwarding"},{"location":"sw/redes/redes-ssh/#agent-forwarding","text":"Imaginemos que existen 3 m\u00e1quinas, A, B, C, y tenemos el siguiente problema: A <-> B = A y B se pueden comunicar por SSH. B <-> C = B y C se pueden comunicar por SSH. A C = A y C no se pueden comunicar por SSH. Agent forwarding nos permite que A <-> C a trav\u00e9s de B, es decir A <-B-> C. Esto es posible haciendo: Activando en el servidor de B /etc/ssh/sshd_config la opci\u00f3n bash AllowAgentForwarding yes Activando en el agente / cliente de B /etc/ssh/ssh_config la opci\u00f3n bash ForwardAgent yes As\u00ed ahora, para hacer A <-> C, lo que har\u00eda es: Accedo desde A por SSH a B = A -> B. Accedo desde B por SSH a C = B -> C. Y ahora en la shell ver\u00e9 que estoy en C. Parece obvio, pero si estas opciones no est\u00e1n activadas, no se podr\u00eda hacer. La idea al final de todo esto, es que si tengo muchas m\u00e1quinas C's: C1, C2, C3, etc. Es recomendable que no est\u00e9n expuestas al exterior. Lo mejor es tener un \"basti\u00f3n\", es decir, una m\u00e1quina B, que est\u00e1 autenticada con claves publico-privada + passphrase con cada Cx, y yo desde A solo tengo acceso a B.","title":"Agent Forwarding"},{"location":"sw/redes/redes-ssh/#x11-forwarding","text":"Si accedo por SSH de una m\u00e1quina A a otra B, A -> B, y ejecuto una aplicaci\u00f3n gr\u00e1fica (X11), no la veo en mi equipo A, solo se ve en el equipo B. La forma de poder ver en A una app X11 ejecutada en B es con la t\u00e9cnica X11 forwarding. Para poder aplicar esta t\u00e9cnica tengo que: Habilitar en el servidor de B /etc/ssh/sshd_config las opciones bash X11Forwarding yes X11DisplayOffset 10 Si lo que quiero es ejecutar una aplicaci\u00f3n gr\u00e1fica de C en mi m\u00e1quina A, debo de: Habilitar en el cliente/agente de B /etc/ssh/ssh_config la opci\u00f3n bash FordwardX11 yes Al ejecutar una app X11 remota, aunque la vea en mi equipo local, los recursos que consume son de la m\u00e1quina remota.","title":"X11 Forwarding"},{"location":"sw/redes/redes-ssh/#transferir-ficheros-por-ssh","text":"SSH no solo permite iniciar sesiones o ejecutar comandos en remoto. Tambi\u00e9n permite la transferencia de ficheros a trav\u00e9s de dos protocolos, SCP y SFTP.","title":"Transferir ficheros por SSH"},{"location":"sw/redes/redes-ssh/#scp","text":"SCP es un protocolo que se puede usar con SSH para poder compartir ficheros. Su sintaxis es similar a la cp , pero \"generalizada\" scp [[<usuario-origen>@]<host-origen>:]<fichero-origen> [[<usuario-destino>@]<host-destino>:]<fichero-destino> scp -r [[<usuario-origen>@]<host-origen>:]<directorio-origen> [[<usuario-destino>@]<host-destino>:]<directorio-destino> Visto as\u00ed es muy lioso, vamos a verlo con ejemplos. M\u00e1quina Usuario Host A usera 192.168.1.120 B userb 192.168.1.121 C userc 192.168.1.122 En todos los ejemplos voy a suponer que estoy en la m\u00e1quina A: Pasar fichero mifichero.txt en el $HOME origen, a la carpeta micarpeta del $HOME destino A -> B (de local a remoto) bash scp $HOME/mifichero.txt userb@192.168.1.121:$HOME/micarpeta/ B -> A (de remoto a local) bash scp userb@192.168.121:$HOME/fichero.txt $HOME/micarpeta/ B -> C (de remoto a remoto) bash scp userb@192.168.1.121:$HOME/fichero.txt userc@192.168.1.122:$HOME/micarpeta/ Pasar la carpeta micarpeta del $HOME origen al $HOME destino A -> B (de local a remoto) bash scp -r $HOME/micarpeta userb@192.168.1.121:$HOME/ B -> A (de remoto a local) bash scp -r userb@192.168.1.121:$HOME/micarpeta $HOME/ B -> C (de remoto a remoto) bash scp -r userb@192.168.1.121:$HOME/micarpeta userc@192.168.1.122:$HOME/","title":"SCP"},{"location":"sw/redes/redes-ssh/#sftp","text":"SFTP es SSH FTP, es decir, una comunicaci\u00f3n FTP sobre SSH. No confundir con FTPS, que es una variaci\u00f3n de FTP securizada. Para usarla hacemos sftp <usuario>@<host> Se nos abrir\u00e1 una shell que podemos usar como si fuera una shell FTP. Tambi\u00e9n podemos abrir una conexi\u00f3n SFTP desde cualquier programa FTP cliente como Filezilla","title":"SFTP"},{"location":"sw/redes/redes-ssh/#tuneles-ssh","text":"Esto se conoce como Port Fordwarding o TCP Fordwarding. Supongamos que tenemos: Maquina Usuario Host Puerto SSH A usera hosta porta A<->B B userb hostb portb B<->A, B<->C C userc hostc portc C<->B Con este escenario, tenemos 3 tipos de t\u00faneles: Local Fordwarding (-L): Traer un puerto (servicio) remoto (de A \u00f3 C) a uno local (de C \u00f3 A) por B. Remote Fordwarding (-R): Enviar un puerto (servicio) local (de A \u00f3 C) a uno remoto (de C \u00f3 A) por B. Dynamic Fordwarding (-D): ni idea B\u00e1sicamente consiste en traer / enviar un puerto local / remoto desde una m\u00e1quina a otra, pasando por una m\u00e1quina intermedia.","title":"T\u00faneles SSH"},{"location":"sw/redes/redes-ssh/#local-fordwarding","text":"Local Fordwarding consiste en traer un puerto remoto (de otra m\u00e1quina) a un puerto de mi m\u00e1quina local. Es decir, es como si desde mi puerto local estuviera en el puerto remoto de la otra m\u00e1quina. Comando y variantes: ssh -f -N -L [<bind-address>:]<port>:<host>:<host-port> [<user>@<host>] ssh -f -N -L [<bind-address>:]<port>:<remote-socket> [<user>@<host>] ssh -f -N -L <local-socket>:<host>:<host-port> [<user>@<host>] ssh -f -N -L <local-socket>:<remote-socket> [<user>@<host>] Supongamos que A con acceso libre a Internet, y C con acceso restringido Internet (no puede acceder a ciertos servicios / web). As\u00ed que nos interesar\u00eda: Desde C, traer hosta:porta a hostc:portc, por B bash ssh -f -NL portc:hosta:porta userb@hostb Ahora supongamos que C tiene un servicio NGINX en su puerto 80, y lo queremos poder consumir: Desde A, traer el puerto 80 de C al puerto 1080 de A, por B bash ssh -f -NL 1080:hostc:80 userb@hostb Tambi\u00e9n podr\u00edamos hacer: Desde B, traer el pierto de C al puerto 1080 de B bash ssh -f -NL Desde A, consumir ese NGINX accediendo en el navegador a hostb:1080","title":"Local Fordwarding"},{"location":"sw/redes/redes-ssh/#remote-forwarding","text":"Remote Fordwarding consiste en enviar un puerto local (de mi m\u00e1quina) a un puerto de una m\u00e1quina remota. Es decir, es como si desde un puerto de una m\u00e1quina remota estuviera en el puerto de mi m\u00e1quina local. Comando y sus variantes: ssh -f -N -R [<bind-address>:]<port>:<host>:<host-port> [<user>@<host>] ssh -f -N -R [<bind-address>:]<port>:<local-socket> [<user>@<host>] ssh -f -N -R <remote-socket>:<host>:<host-port> [<user>@<host>] ssh -f -N -R <remote-socket>:<local-socket> [<user>@<host>] ssh -f -N -R [<bind-address>:]<port> [<user>@<host>] Supongamos que","title":"Remote Forwarding"},{"location":"sw/redes/redes-ssh/#dynamic-fordwarding","text":"ssh -f -N -D [<bind-address>:]<port>","title":"Dynamic Fordwarding"},{"location":"sw/redes/redes-ssh/#conexion-a-github-con-par-clave-publico-privada","text":"Generar par de claves con passphrase mediante bash ssh-keygen -t rsa -b 4096 -C \"<github email>\" A\u00f1adir la clave al ssh-agent bash ssh-add -K <ruta al fichero de clave privada> A\u00f1adir la clave p\u00fablica en Github Copiar la clave p\u00fablica en el clipboard bash pbcopy < <ruta al fichero de clave p\u00fablica> Pegar la clave p\u00fablica en Github Ir a Settings -> SSH and GPG Keys -> New SSH or Add SSH Key Poner un t\u00edtulo para que se entienda de que equipo es la clave y pegar la clave en el campo Key Por \u00faltimo, darle al bot\u00f3n Add SSH key , confirmar y listo.","title":"Conexi\u00f3n a Github con par clave p\u00fablico-privada"},{"location":"sw/terminal/terminal-zsh/","text":"ZSH - La shell de tus sue\u00f1os Vamos a instalar y configurar ese fant\u00e1stico shell que es ZSH Instalaci\u00f3n Abrimos la terminal y lo instalamos sudo apt install zsh Oh My ZSH - Customizaci\u00f3n para ZSH # 1. Descargarmos el script de la utilidad que le va a aportar todo su valor. El script se llama **install.sh** wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh # 2. Le damos permisos de ejecuci\u00f3n chmod a+x install.sh # 3. Instalamos el script sh install.sh # 4. Despu\u00e9s de instalar todo, al final en el prompt nos pide un password # Si lo hemos introducido correctamente, lo m\u00e1s probable es que ya se haya cambiado la shell # Si la shell no se ha cambiado, entonces hay que hacer esto chsh -s 'which zsh' # 5. Reiniciar la consola source ~/.zshrc Configurar Oh My ZSH Abrir el fichero .zshrc con el editor que m\u00e1s te guste scratch-text-editor ~/.zshrc Plugins Sobre la l\u00ednea 54 tenemos algo asi como plugins=(git) Lo \u00fanico que hay que hacer es ir a\u00f1adi\u00e9ndole todos los plugins que quieras ponerle y que esten contenidos en la carpeta ~/.oh-my-zsh/plugins . Los plugins se a\u00f1aden simplemente con un espacio y el nombre al lado (no uses comillas). En mi caso como programo en python uso los siguientes plugins plugins=(git python pip virtualenvwrapper autopep8 pep8) Todos los plugins oficiales est\u00e1n comentados aqu\u00ed . El que m\u00e1s me ha llamado la atenci\u00f3n es el plugin de Chuck Norris . Una vez terminado, guardamos, cerramos el editor y recargamos la shell. source ~/.zshrc Themes Lo que le da el aspecto chachi son los temas, y est\u00e1n en la carpeta ~/.oh-my-zsh/themes/ . Aqu\u00ed est\u00e1n recogidos todos los temas oficiales con capturas . Yo suelo usar el tema bira , aunque a veces uso el agnoster con modificaciones. Bien pues para poner un tema, abrimos el fichero ~/.zshrc y en la linea 10 aproximadamente tendremos algo asi como ZSH_THEME=\"robbyrussell\" Simplemente ponemos el que m\u00e1s nos guste ZSH_THEME=\"agnoster\" Cerramos el editor y reiniciamos la shell source ~/.zshrc TEMA AGNOSTER TUNEADO El tema agnoster es muy muy bonito, pero para usarlo hay que tunear ciertas cosas. Para comprobar que rula tienes que metes estos comandos en la shell echo \"\\ue0b0 \\u00b1 \\ue0a0 \\u27a6 \\u2718 \\u26a1 \\u2699\" Deber\u00eda de salir algo as\u00ed Si no sale, debes instalar las fuentes Powerline git clone https://github.com/powerline/fonts.git --depth=1 cd fonts chmod a+x install.sh sh install.sh cd .. sudo rm -R fonts Una vez sabemos que el tema va a funcionar, lo elegimos en el archivo ~/.zshrc ZSH_THEME=\"agnoster\" Faltan dos pasos que son opcionales. A mi me ocurre que el agnoster no viene preparado para introducir comandos en una linea nueva (cosa que si hace el bira por ejemplo). Si tu agnoster ya trae esta funcionalidad o no la quieres poner, salta al siguiente paso. Si no, tienes que editar el fichero ~/.oh-my-zsh/themes/agnoster . nano ~/.oh-my-zsh/themes/agnoster.zsh-theme El fichero debe de quedar como aqu\u00ed . Si no quieres copiar sin saber que has hecho, sigue leyendo. En la \u00faltima funci\u00f3n, build_prompt tendremos algo as\u00ed ## Main prompt build_prompt() { RETVAL=$? prompt_status prompt_virtualenv prompt_context prompt_dir prompt_git prompt_hg prompt_end } Antes del prompt_end tienes que a\u00f1adirle un prompt_newline , osea que quedar\u00eda as\u00ed ## Main prompt build_prompt() { RETVAL=$? prompt_status prompt_virtualenv prompt_context prompt_dir prompt_git prompt_hg prompt_newline prompt_end } Pero falta por definir la funcion nueva que has a\u00f1adido, as\u00ed que encima del ## Main prompt a\u00f1ade lo siguiente # Newline # Add new line to the prompt prompt_newline() { if [[ -n $CURRENT_BG ]]; then echo -n \" %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR\" else echo -n \" %{%k%}\" fi echo -n \" %{%f%}\" CURRENT_BG='' } Por \u00faltimo vamos a a\u00f1adirle la fecha y hora (un timestamp ). Para ello, en el fichero del punto anterior ~/.oh-my-zsh/themes/agnoster.zsh-theme y en el \u00faltimo comando, que es algo asi como PROMPT='%{%f%b%k%}$(build_prompt) ' Hay que a\u00f1adirle delante esto %D{%f/%m/%y}|%D{%L:%M:%S} La referencia sobre esta utilidad la saqu\u00e9 de aqu\u00ed . Al final el \u00faltimo comando acaba quedando as\u00ed PROMPT='%D{%f/%m/%y}|%D{%L:%M:%S}%{%f%b%k%}$(build_prompt) ' Y recarga la shell source ~/.zshrc","title":"ZSH"},{"location":"sw/terminal/terminal-zsh/#zsh-la-shell-de-tus-suenos","text":"Vamos a instalar y configurar ese fant\u00e1stico shell que es ZSH","title":"ZSH - La shell de tus sue\u00f1os"},{"location":"sw/terminal/terminal-zsh/#instalacion","text":"Abrimos la terminal y lo instalamos sudo apt install zsh","title":"Instalaci\u00f3n"},{"location":"sw/terminal/terminal-zsh/#oh-my-zsh-customizacion-para-zsh","text":"# 1. Descargarmos el script de la utilidad que le va a aportar todo su valor. El script se llama **install.sh** wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh # 2. Le damos permisos de ejecuci\u00f3n chmod a+x install.sh # 3. Instalamos el script sh install.sh # 4. Despu\u00e9s de instalar todo, al final en el prompt nos pide un password # Si lo hemos introducido correctamente, lo m\u00e1s probable es que ya se haya cambiado la shell # Si la shell no se ha cambiado, entonces hay que hacer esto chsh -s 'which zsh' # 5. Reiniciar la consola source ~/.zshrc","title":"Oh My ZSH - Customizaci\u00f3n para ZSH"},{"location":"sw/terminal/terminal-zsh/#configurar-oh-my-zsh","text":"Abrir el fichero .zshrc con el editor que m\u00e1s te guste scratch-text-editor ~/.zshrc","title":"Configurar Oh My ZSH"},{"location":"sw/terminal/terminal-zsh/#plugins","text":"Sobre la l\u00ednea 54 tenemos algo asi como plugins=(git) Lo \u00fanico que hay que hacer es ir a\u00f1adi\u00e9ndole todos los plugins que quieras ponerle y que esten contenidos en la carpeta ~/.oh-my-zsh/plugins . Los plugins se a\u00f1aden simplemente con un espacio y el nombre al lado (no uses comillas). En mi caso como programo en python uso los siguientes plugins plugins=(git python pip virtualenvwrapper autopep8 pep8) Todos los plugins oficiales est\u00e1n comentados aqu\u00ed . El que m\u00e1s me ha llamado la atenci\u00f3n es el plugin de Chuck Norris . Una vez terminado, guardamos, cerramos el editor y recargamos la shell. source ~/.zshrc","title":"Plugins"},{"location":"sw/terminal/terminal-zsh/#themes","text":"Lo que le da el aspecto chachi son los temas, y est\u00e1n en la carpeta ~/.oh-my-zsh/themes/ . Aqu\u00ed est\u00e1n recogidos todos los temas oficiales con capturas . Yo suelo usar el tema bira , aunque a veces uso el agnoster con modificaciones. Bien pues para poner un tema, abrimos el fichero ~/.zshrc y en la linea 10 aproximadamente tendremos algo asi como ZSH_THEME=\"robbyrussell\" Simplemente ponemos el que m\u00e1s nos guste ZSH_THEME=\"agnoster\" Cerramos el editor y reiniciamos la shell source ~/.zshrc","title":"Themes"},{"location":"sw/terminal/terminal-zsh/#tema-agnoster-tuneado","text":"El tema agnoster es muy muy bonito, pero para usarlo hay que tunear ciertas cosas. Para comprobar que rula tienes que metes estos comandos en la shell echo \"\\ue0b0 \\u00b1 \\ue0a0 \\u27a6 \\u2718 \\u26a1 \\u2699\" Deber\u00eda de salir algo as\u00ed Si no sale, debes instalar las fuentes Powerline git clone https://github.com/powerline/fonts.git --depth=1 cd fonts chmod a+x install.sh sh install.sh cd .. sudo rm -R fonts Una vez sabemos que el tema va a funcionar, lo elegimos en el archivo ~/.zshrc ZSH_THEME=\"agnoster\" Faltan dos pasos que son opcionales. A mi me ocurre que el agnoster no viene preparado para introducir comandos en una linea nueva (cosa que si hace el bira por ejemplo). Si tu agnoster ya trae esta funcionalidad o no la quieres poner, salta al siguiente paso. Si no, tienes que editar el fichero ~/.oh-my-zsh/themes/agnoster . nano ~/.oh-my-zsh/themes/agnoster.zsh-theme El fichero debe de quedar como aqu\u00ed . Si no quieres copiar sin saber que has hecho, sigue leyendo. En la \u00faltima funci\u00f3n, build_prompt tendremos algo as\u00ed ## Main prompt build_prompt() { RETVAL=$? prompt_status prompt_virtualenv prompt_context prompt_dir prompt_git prompt_hg prompt_end } Antes del prompt_end tienes que a\u00f1adirle un prompt_newline , osea que quedar\u00eda as\u00ed ## Main prompt build_prompt() { RETVAL=$? prompt_status prompt_virtualenv prompt_context prompt_dir prompt_git prompt_hg prompt_newline prompt_end } Pero falta por definir la funcion nueva que has a\u00f1adido, as\u00ed que encima del ## Main prompt a\u00f1ade lo siguiente # Newline # Add new line to the prompt prompt_newline() { if [[ -n $CURRENT_BG ]]; then echo -n \" %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR %{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR\" else echo -n \" %{%k%}\" fi echo -n \" %{%f%}\" CURRENT_BG='' } Por \u00faltimo vamos a a\u00f1adirle la fecha y hora (un timestamp ). Para ello, en el fichero del punto anterior ~/.oh-my-zsh/themes/agnoster.zsh-theme y en el \u00faltimo comando, que es algo asi como PROMPT='%{%f%b%k%}$(build_prompt) ' Hay que a\u00f1adirle delante esto %D{%f/%m/%y}|%D{%L:%M:%S} La referencia sobre esta utilidad la saqu\u00e9 de aqu\u00ed . Al final el \u00faltimo comando acaba quedando as\u00ed PROMPT='%D{%f/%m/%y}|%D{%L:%M:%S}%{%f%b%k%}$(build_prompt) ' Y recarga la shell source ~/.zshrc","title":"TEMA AGNOSTER TUNEADO"}]}